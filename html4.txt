
<!DOCTYPE html>
<html lang="lo">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫™‡∫∞‡∫ï‡∫±‡∫≠‡∫Å‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</title>
    
<!-- ‚≠ê pdfMake ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏•‡∏≤‡∏ß -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
<script>
// ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏•‡∏≤‡∏ß‡πÉ‡∏´‡πâ pdfMake
pdfMake.fonts = {
    NotoSansLao: {
        normal: 'https://fonts.gstatic.com/s/notosanslao/v30/bx6lNx2Ol_ixgdYWLm9BwxM3NW6BOkuf763Clj73CiQ_J1Djx9pidOt4ccfdf5MK3riB2w.ttf',
        bold: 'https://fonts.gstatic.com/s/notosanslao/v30/bx6lNx2Ol_ixgdYWLm9BwxM3NW6BOkuf763Clj73CiQ_J1Djx9pidOt4ccfdf5MK3riB2w.ttf',
        italics: 'https://fonts.gstatic.com/s/notosanslao/v30/bx6lNx2Ol_ixgdYWLm9BwxM3NW6BOkuf763Clj73CiQ_J1Djx9pidOt4ccfdf5MK3riB2w.ttf',
        bolditalics: 'https://fonts.gstatic.com/s/notosanslao/v30/bx6lNx2Ol_ixgdYWLm9BwxM3NW6BOkuf763Clj73CiQ_J1Djx9pidOt4ccfdf5MK3riB2w.ttf'
    },
    // ‡∏™‡∏≥‡∏£‡∏≠‡∏á Roboto ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢
    Roboto: {
        normal: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Regular.ttf',
        bold: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Medium.ttf',
        italics: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-Italic.ttf',
        bolditalics: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/fonts/Roboto/Roboto-MediumItalic.ttf'
    }
};
</script>

    <style>

      /* ========================================
   ‚≠ê ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà: ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á + ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠
   ======================================== */

/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á */
.btn-clear-table {
    background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
    color: white;
}

.btn-clear-table:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(244, 67, 54, 0.4);
}

/* ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠ */
.btn-decision-buy {
    background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
    color: white;
}

.btn-decision-buy:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(76, 175, 80, 0.4);
}

.btn-decision-buy:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
}

/* ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö *//* ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö */
.store-column-header {
    background: linear-gradient(135deg, #9c27b0 0%, #7b1fa2 100%) !important;
    color: white !important;
    text-align: center !important;
    font-weight: bold !important;
    border-left: 3px solid #fff !important;
    min-width: 150px; /* ‚≠ê ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ */
    padding: 15px 10px !important; /* ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° padding */
    white-space: nowrap; /* ‚≠ê ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà */
}

.store-price-cell {
    text-align: center !important;
    font-weight: bold !important;
    background: #ffffff !important; /* ‚≠ê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß */
    border-left: 2px solid #e0e0e0 !important; /* ‚≠ê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô */
    min-width: 120px;
    padding: 12px 10px !important;
}

.store-total-cell {
    text-align: center !important;
    font-weight: bold !important;
    background: #ffffff !important; /* ‚≠ê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß */
    border-left: 2px solid #e0e0e0 !important; /* ‚≠ê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô */
    min-width: 130px;
    padding: 12px 10px !important;
}

/* ‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏∏‡∏î - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß */
.cheapest-store {
    background: linear-gradient(135deg, #388e3c 0%, #2e7d32 100%) !important; /* ‚≠ê ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏° */
    color: #ffffff !important; /* ‚≠ê ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß */
    border: 3px solid #1b5e20 !important; /* ‚≠ê ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏° */
    box-shadow: 0 0 15px rgba(27, 94, 32, 0.6) !important; /* ‚≠ê ‡πÄ‡∏á‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏° */
    font-weight: bold !important;
}

.cheapest-store::before {
    content: 'üü¢ ';
    font-size: 1.2rem;
}

/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫´‡∫º‡∫±‡∫Å" */
.main-table-label {
    color: #999;
    font-size: 0.8em;
    font-style: italic;
    margin-left: 5px;
}

/* Summary Row ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */
.summary-row {
    background: linear-gradient(135deg, #fff9c4 0%, #fff59d 100%) !important;
    font-weight: bold !important;
    font-size: 1.1rem !important;
    border-top: 4px solid #fbc02d !important;
}

.summary-store-cell {
    background: linear-gradient(135deg, #e1bee7 0%, #ce93d8 100%) !important;
    border-left: 3px solid #9c27b0 !important;
}

.summary-cheapest {
    background: linear-gradient(135deg, #a5d6a7 0%, #81c784 100%) !important;
    color: #1b5e20 !important;
    border: 3px solid #4caf50 !important;
    font-size: 1.2rem !important;
}

.summary-cheapest::before {
    content: 'üèÜ ';
}

/* ========================================
   ‚≠ê ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
   ======================================== */

/* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */
.edit-items-btn {
    position: fixed;
    top: 80px;
    left: 20px;
    background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 50px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: bold;
    box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4);
    z-index: 999;
    display: flex;
    align-items: center;
    gap: 8px;
    animation: editItemsPulse 1.5s infinite;
}

@keyframes editItemsPulse {
    0%, 100% {
        transform: scale(1);
        background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
    }
    50% {
        transform: scale(1.15);
        background: linear-gradient(135deg, #66bb6a 0%, #4caf50 100%);
    }
}

/* Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */
.edit-items-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.85);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 10002;
    padding: 20px;
}

.edit-items-modal.show {
    display: flex;
}

.edit-items-content {
    background: white;
    border-radius: 20px;
    width: 95%;
    height: 95%;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.edit-items-header {
    background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
    color: white;
    padding: 20px 30px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 20px;
}

.edit-header-buttons {
    display: flex;
    gap: 10px;
    align-items: center;
}

.edit-header-buttons .edit-action-btn {
    padding: 10px 20px;
    font-size: 0.95rem;
}

.edit-header-buttons .edit-close-btn {
    margin-left: 10px;
}

.edit-items-title {
    font-size: 1.8rem;
    font-weight: bold;
}

.edit-close-btn {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1.5rem;
    color: white;
    transition: all 0.3s;
}

.edit-close-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: rotate(90deg);
}

/* ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á */
.edit-filter-section {
    padding: 20px 30px;
    background: #f8f9fa;
    border-bottom: 2px solid #e0e0e0;
}

.filter-row {
    display: flex;
    gap: 15px;
    flex-wrap: nowrap;
}

.filter-item {
    flex: 1;
    min-width: 150px;
}

.filter-label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
    color: #333;
}

.filter-select,
.filter-input {
    width: 100%;
    padding: 10px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 1rem;
    transition: all 0.3s;
}

.filter-select:focus,
.filter-input:focus {
    border-color: #4caf50;
    outline: none;
}

/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° */
.edit-action-buttons {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin-top: 15px;
}

.edit-action-btn {
    padding: 12px 25px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: bold;
    color: white;
    transition: all 0.3s;
}

.btn-show-filtered {
    background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);
}

.btn-edit-selected {
    background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%);
}

.btn-clear-filter {
    background: linear-gradient(135deg, #9e9e9e 0%, #757575 100%);
}

.edit-action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.edit-action-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
}

/* ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á */
.edit-table-section {
    flex: 1;
    overflow: auto;
    padding: 20px 30px;
}

.edit-items-table {
    width: 100%;
    border-collapse: collapse;
}

.edit-items-table thead {
    background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
    color: white;
    position: sticky;
    top: 0;
    z-index: 10;
}

.edit-items-table th {
    padding: 12px;
    text-align: left;
    font-weight: bold;
    border: 1px solid #45a049;
}

.edit-items-table td {
    padding: 10px 12px;
    border: 1px solid #e0e0e0;
}

.edit-items-table tbody tr {
    transition: background 0.2s;
    cursor: pointer;
}

.edit-items-table tbody tr:hover {
    background: #f0f8f0;
}

.edit-items-table tbody tr.selected {
    background: #c8e6c9;
}

.edit-table-img {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: 5px;
}

/* Checkbox */
.edit-checkbox {
    width: 20px;
    height: 20px;
    cursor: pointer;
}

/* Modal ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç */
.edit-form-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.9);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 10003;
    padding: 20px;
}

.edit-form-modal.show {
    display: flex;
}

.edit-form-content {
    background: white;
    border-radius: 20px;
    max-width: 700px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    padding: 30px;
}

.edit-form-title {
    font-size: 1.5rem;
    font-weight: bold;
    color: #4caf50;
    margin-bottom: 20px;
    text-align: center;
}

.edit-form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
}

.edit-form-field {
    display: flex;
    flex-direction: column;
}

.edit-form-field.full-width {
    grid-column: 1 / -1;
}

.edit-form-label {
    font-weight: bold;
    margin-bottom: 5px;
    color: #333;
}

.edit-form-input {
    padding: 10px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 1rem;
}

.edit-form-input:focus {
    border-color: #4caf50;
    outline: none;
}

.edit-form-input:disabled {
    background: #f0f0f0;
    cursor: not-allowed;
}

.edit-form-actions {
    display: flex;
    gap: 15px;
    margin-top: 25px;
    justify-content: center;
}

.btn-save-edit,
.btn-cancel-edit {
    padding: 12px 30px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1.1rem;
    font-weight: bold;
    color: white;
    transition: all 0.3s;
}

.btn-save-edit {
    background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
}

.btn-cancel-edit {
    background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
}

.btn-save-edit:hover,
.btn-cancel-edit:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

@media (max-width: 768px) {
    .edit-items-btn {
        top: 60px;
        left: 10px;
        padding: 10px 15px;
        font-size: 0.9rem;
    }
    
    .filter-row {
        flex-direction: column;
    }
    
    .edit-form-grid {
        grid-template-columns: 1fr;
    }
}
/* ‚≠ê ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥‡πÄ‡∏Ç‡πâ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */
.order-table tbody td {
    color: #000000 !important;
    font-weight: 700 !important;
}

.order-table tbody tr {
    color: #000000 !important;
}

.order-table td * {
    color: #000000 !important;
    font-weight: 700 !important;
}

/* ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞ input */
.order-quantity-input {
    color: #000000 !important;
    font-weight: 700 !important;
}
      .btn-download-order {
    background: linear-gradient(135deg, #42a5f5 0%, #1976d2 100%);
    color: white;
}

.btn-download-order:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(66, 165, 245, 0.4);
}

.badge-items {
    background: #f44336;
    color: white;
}

/* Badge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤ */
.badge-price-study {
    background: #4caf50;
    color: white;
    padding: 4px 10px;
    border-radius: 12px;
    font-size: 0.85rem;
    font-weight: bold;
}

/* ‚≠ê Badge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏î‡∏¥‡∏°) */
.badge-main-table {
    background: #2196f3;
    color: white;
    padding: 4px 10px;
    border-radius: 12px;
    font-size: 0.85rem;
    font-weight: bold;
}


   /* ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Order List */
.order-option-item {
    padding: 15px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    margin-bottom: 10px;
    cursor: pointer;
    transition: all 0.2s;
    background: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.order-option-item:hover {
    border-color: #667eea;
    background: #f0f4ff;
    transform: translateX(5px);
}

.order-display-text {
    font-size: 1.05rem;
    font-weight: bold;
    color: #333;
    flex: 1;
}

.order-item-count {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 5px 12px;
    border-radius: 15px;
    font-size: 0.9rem;
    font-weight: bold;
    margin-left: 10px;
} 

      /* Phone Dropdown Styles */
.phone-dropdown-item {
    padding: 12px;
    cursor: pointer;
    border-bottom: 1px solid #f0f0f0;
    transition: background 0.2s;
}

.phone-dropdown-item:hover {
    background: #e3f2fd !important;
}

.phone-dropdown-item:last-child {
    border-bottom: none;
}

/* Column Selection Modal Styles */
.column-checkbox-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.column-checkbox-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 12px;
    background: #f8f9fa;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s;
    font-size: 1rem;
}

.column-checkbox-item:hover {
    background: #e3f2fd;
    border-color: #4facfe;
}

.column-checkbox-item input[type="checkbox"] {
    width: 20px;
    height: 20px;
    cursor: pointer;
}

.column-checkbox-item span {
    flex: 1;
    font-weight: 500;
}


/* Saving Animation Styles */
.saving-animation-content {
    background: white;
    padding: 50px;
    border-radius: 20px;
    text-align: center;
    box-shadow: 0 10px 40px rgba(0,0,0,0.3);
    min-width: 300px;
}

.saving-spinner {
    width: 80px;
    height: 80px;
    border: 6px solid #f3f3f3;
    border-top: 6px solid #4facfe;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 25px;
}

.saving-text {
    font-size: 1.3rem;
    font-weight: bold;
    color: #4facfe;
    margin-bottom: 10px;
}

.saving-subtext {
    font-size: 1rem;
    color: #999;
}

.success-checkmark {
    font-size: 4rem;
    color: #4caf50;
    animation: scaleIn 0.5s ease-out;
}

@keyframes scaleIn {
    0% {
        transform: scale(0);
        opacity: 0;
    }
    50% {
        transform: scale(1.2);
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}

.fade-out {
    animation: fadeOut 0.3s ease-out;
}

@keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}

/* ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô Modal */
.btn-confirm-stores {
    background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
    transition: all 0.3s;
}

.btn-confirm-stores:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(76, 175, 80, 0.4);
}




/* Loading Animation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.7);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 99999;
}

.loading-overlay.show {
    display: flex;
}

.loading-content {
    background: white;
    padding: 40px;
    border-radius: 20px;
    text-align: center;
    box-shadow: 0 10px 40px rgba(0,0,0,0.3);
}

.loading-spinner {
    width: 60px;
    height: 60px;
    border: 5px solid #f3f3f3;
    border-top: 5px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.loading-text {
    font-size: 1.2rem;
    font-weight: bold;
    color: #667eea;
    margin-top: 15px;
}

.loading-subtext {
    font-size: 0.9rem;
    color: #999;
    margin-top: 10px;
}


/* ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ */
.order-option-item {
    padding: 15px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    margin-bottom: 10px;
    cursor: pointer;
    transition: all 0.2s;
    background: white;
}

.order-option-item:hover {
    border-color: #667eea;
    background: #f0f4ff;
    transform: translateX(5px);
}

.order-display-text {
    font-size: 1.05rem;
    font-weight: bold;
    color: #333;
}


/* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î / ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î) - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô */
.data-mode-options {
    display: flex !important;
    flex-direction: row !important; /* ‚≠ê ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô */
    gap: 15px;
    margin-bottom: 20px;
    padding: 15px;
    background: linear-gradient(135deg, #fff5f5 0%, #f0fff4 100%);
    border-radius: 10px;
    border: 2px solid #e0e0e0;
    align-items: stretch; /* ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô */
}

.data-mode-btn {
    flex: 1 1 50%; /* ‚≠ê ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á 50% */
    padding: 15px 20px; /* ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° padding */
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    background: white;
    cursor: pointer;
    font-size: 1.05rem; /* ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ */
    font-weight: bold;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    white-space: nowrap; /* ‚≠ê ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏±‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î */
}

.data-mode-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.data-mode-btn.active.mode-low-stock {
    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
    color: white;
    border-color: #ff6b6b;
}

.data-mode-btn.active.mode-all-items {
    background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
    color: white;
    border-color: #4caf50;
}

/* Responsive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ */
@media (max-width: 768px) {
    .data-mode-options {
        flex-direction: column !important; /* ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ */
        gap: 10px;
    }
    
    .data-mode-btn {
        flex: 1 1 100%;
        width: 100%;
    }
}

/* ‡∏™‡∏µ‡πÑ‡∏•‡πà‡πÇ‡∏ó‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô */
.product-item.color-1 { background: #fff3cd !important; }
.product-item.color-2 { background: #ffe4b5 !important; }
.product-item.color-3 { background: #e3f2fd !important; }
.product-item.color-4 { background: #c8e6c9 !important; }
.product-item.color-5 { background: #e1bee7 !important; }
.product-item.color-6 { background: #ffccbc !important; }

.selectable-item.color-1 { background: #fff3cd !important; }
.selectable-item.color-2 { background: #ffe4b5 !important; }
.selectable-item.color-3 { background: #e3f2fd !important; }
.selectable-item.color-4 { background: #c8e6c9 !important; }
.selectable-item.color-5 { background: #e1bee7 !important; }
.selectable-item.color-6 { background: #ffccbc !important; }

/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */
.product-stock-detail {
    font-size: 0.85rem;
    color: #666;
    margin-top: 5px;
    line-height: 1.4;
}

.item-details-extended {
    font-size: 0.85rem;
    color: #666;
    line-height: 1.5;
}




     * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Noto Sans Lao', Arial, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .header {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        padding: 30px;
        text-align: center;
    }

    .header h1 {
        font-size: 2.5rem;
        margin-bottom: 10px;
    }

    .data-status {
        margin-top: 20px;
        display: flex;
        gap: 15px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        background: rgba(255,255,255,0.2);
        padding: 8px 15px;
        border-radius: 20px;
    }

    .status-icon {
        width: 12px;
        height: 12px;
        border-radius: 50%;
    }

    .status-loading { background: #ffa726; animation: pulse 2s infinite; }
    .status-success { background: #4caf50; }
    .status-error { background: #f44336; }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    .main-content {
        padding: 30px;
    }

    .loading-section {
        text-align: center;
        padding: 40px;
    }

    .loading-icon {
        width: 60px;
        height: 60px;
        border: 4px solid #e3f2fd;
        border-top: 4px solid #4facfe;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .low-stock-alert-btn {
        position: fixed;
        top: 20px;
        left: 20px;
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 50px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: bold;
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        z-index: 999;
        display: none;
        align-items: center;
        gap: 8px;
        animation: lowStockPulse 1.5s infinite;
    }

    .low-stock-alert-btn.show {
        display: flex;
    }

    @keyframes lowStockPulse {
        0%, 100% {
            transform: scale(1);
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
        }
        50% {
            transform: scale(1.15);
            background: linear-gradient(135deg, #ff4757 0%, #ff3838 100%);
        }
    }

    .stock-alert-badge {
        background: white;
        color: #ff4757;
        border-radius: 12px;
        padding: 4px 10px;
        font-size: 0.9rem;
        font-weight: bold;
    }

    .low-stock-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.85);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        padding: 20px;
    }

    .low-stock-modal.show {
        display: flex;
    }

    .low-stock-modal-content {
        background: white;
        border-radius: 20px;
        padding: 30px;
        max-width: 900px;
        width: 100%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .low-stock-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 20px;
        border-bottom: 3px solid #f0f0f0;
    }

    .low-stock-modal-title {
        font-size: 2rem;
        font-weight: bold;
        color: #ff6b6b;
    }

    .stock-close-btn {
        background: #f0f0f0;
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
        font-size: 1.5rem;
    }

    .zone-card {
        background: #f8f9fa;
        border: 3px solid #e1e5e9;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 15px;
        cursor: pointer;
    }

    .zone-card:hover {
        border-color: #ff6b6b;
    }

    .zone-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .zone-name {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .zone-count {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
        color: white;
        padding: 6px 15px;
        border-radius: 20px;
    }

    .zone-details {
        display: none;
        margin-top: 20px;
        padding-top: 20px;
        border-top: 2px solid #dee2e6;
    }

    .zone-details.show {
        display: block;
    }

    .product-group {
        background: white;
        border-radius: 12px;
        padding: 15px;
        margin-bottom: 15px;
        border-left: 4px solid #ff6b6b;
    }

    .product-group-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        padding-bottom: 10px;
        border-bottom: 2px solid #f0f0f0;
    }

    .product-stock-info {
        display: flex;
        gap: 15px;
    }

    .stock-alert-text {
        color: #ff6b6b;
        font-weight: bold;
    }

    .stock-remain-text {
        color: #ffa502;
        font-weight: bold;
    }

    .product-item {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 12px;
        background: #f8f9ff;
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .product-icon {
        font-size: 1.5rem;
    }

    .product-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
    }

    .no-product-image {
        width: 60px;
        height: 60px;
        background: #f0f0f0;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: #999;
    }

    .product-info {
        flex: 1;
    }

    .product-name {
        font-size: 1.05rem;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .product-details {
        font-size: 0.9rem;
        color: #666;
    }

    .stock-empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #666;
    }

    .stock-empty-state i {
        font-size: 4rem;
        color: #4caf50;
    }

    .order-section {
        margin-top: 30px;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 15px;
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding: 20px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .order-number-display {
        font-size: 1.3rem;
        font-weight: bold;
        color: #4facfe;
    }

    .order-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .order-btn {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: bold;
        transition: all 0.3s;
    }

    .btn-load-order {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .btn-compare-price {
        background: linear-gradient(135deg, #ffa726 0%, #fb8c00 100%);
        color: white;
    }

    .btn-compare-price:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

.order-table-wrapper {
    background: white;
    border-radius: 12px;
    overflow-x: auto; /* ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° Scrollbar ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô */
    overflow-y: visible;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    max-width: 100%;
}

/* ‚≠ê ‡∏ï‡∏≤‡∏£‡∏≤‡∏á - ‡πÑ‡∏°‡πà‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î */
.order-table {
    width: 100%;
    min-width: 1200px; /* ‚≠ê ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ */
    border-collapse: collapse;
}

/* ‚≠ê ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô ‚Üí ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á */
.order-table.with-stores {
    min-width: 1800px; /* ‚≠ê ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠ */
}

/* ‚≠ê Scrollbar ‡∏™‡∏ß‡∏¢‡πÜ */
.order-table-wrapper::-webkit-scrollbar {
    height: 12px;
    background: #f0f0f0;
    border-radius: 10px;
}

.order-table-wrapper::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    border-radius: 10px;
    border: 2px solid #f0f0f0;
}

.order-table-wrapper::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

    .order-table {
        width: 100%;
        border-collapse: collapse;
    }

    .order-table thead {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
    }

    .order-table th {
        padding: 15px;
        text-align: left;
        font-weight: bold;
    }

    .order-table td {
        padding: 12px 15px;
        border-bottom: 1px solid #f0f0f0;
    }

    .order-table tbody tr {
        transition: background 0.2s;
    }

    .order-table tbody tr:hover {
        background: #f8f9ff;
    }

    .order-table-img {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 8px;
    }

    .no-order-img {
        width: 50px;
        height: 50px;
        background: #f0f0f0;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
    }

    .order-quantity-input {
        width: 80px;
        padding: 8px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        text-align: center;
        font-size: 1rem;
    }

    .order-quantity-input:focus {
        border-color: #4facfe;
        outline: none;
    }

    .btn-delete-item {
        background: #f44336;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 1rem;
    }

    .btn-delete-item:hover {
        background: #d32f2f;
    }

    .order-footer {
        padding: 20px;
        background: #f8f9fa;
        border-top: 3px solid #4facfe;
    }

    .order-total {
        text-align: right;
        font-size: 1.5rem;
        font-weight: bold;
        color: #4facfe;
        margin-bottom: 15px;
    }

    .order-submit-actions {
        display: flex;
        justify-content: flex-end;
        gap: 15px;
    }

    .btn-save-print,
    .btn-save-whatsapp {
        padding: 15px 30px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        font-size: 1.1rem;
        font-weight: bold;
        color: white;
        transition: all 0.3s;
    }

    .btn-save-print {
        background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
    }

    .btn-save-whatsapp {
        background: linear-gradient(135deg, #25d366 0%, #128c7e 100%);
    }

    .btn-save-print:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(76, 175, 80, 0.4);
    }

    .btn-save-whatsapp:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(37, 211, 102, 0.4);
    }

    .compare-section {
        margin-top: 20px;
    }

    .compare-table-container {
        margin-bottom: 20px;
        background: white;
        border-radius: 12px;
        padding: 15px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .compare-table-header {
        font-size: 1.2rem;
        font-weight: bold;
        color: #ffa726;
        margin-bottom: 10px;
        padding-bottom: 10px;
        border-bottom: 2px solid #ffa726;
    }

    .item-highlighted {
        background: #fff3cd !important;
        border-left: 4px solid #ffc107;
    }

    .item-source-badge {
        display: inline-block;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 0.85rem;
        font-weight: bold;
    }

    .badge-items {
        background: #f44336;
        color: white;
    }

   

    .store-selector-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.85);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 10001;
        padding: 20px;
    }

    .store-selector-modal.show {
        display: flex;
    }

    .store-selector-content {
        background: white;
        border-radius: 20px;
        padding: 30px;
        max-width: 600px;
        width: 100%;
        max-height: 80vh;
        overflow-y: auto;
    }

    .store-selector-header {
        font-size: 1.8rem;
        font-weight: bold;
        color: #ffa726;
        margin-bottom: 20px;
    }

    .store-search-input {
        width: 100%;
        padding: 12px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 1rem;
        margin-bottom: 15px;
    }

    .store-search-input:focus {
        border-color: #ffa726;
        outline: none;
    }

    .store-list {
        max-height: 300px;
        overflow-y: auto;
        margin-bottom: 20px;
    }

    .store-item {
        padding: 12px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .store-item:hover {
        border-color: #ffa726;
        background: #fff8e1;
    }

    .store-item.selected {
        background: #ffa726;
        color: white;
        border-color: #ffa726;
    }

    .store-checkbox {
        width: 20px;
        height: 20px;
        cursor: pointer;
    }

    .store-selector-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .btn-confirm-stores,
    .btn-cancel-stores {
        padding: 12px 25px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: bold;
    }

    .btn-confirm-stores {
        background: #ffa726;
        color: white;
    }

    .btn-cancel-stores {
        background: #e0e0e0;
        color: #333;
    }

    .search-options {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
        padding: 15px;
        background: #f0f0f0;
        border-radius: 10px;
    }

    .search-option-btn {
        flex: 1;
        padding: 12px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        font-size: 1rem;
        font-weight: bold;
        transition: all 0.3s;
    }

    .search-option-btn.active {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        border-color: #4facfe;
    }

    .search-input-container {
        margin-bottom: 20px;
    }

    .search-input {
        width: 100%;
        padding: 15px;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        font-size: 1.1rem;
    }

    .search-input:focus {
        border-color: #4facfe;
        outline: none;
    }

    .search-results {
        max-height: 400px;
        overflow-y: auto;
    }

    .selectable-item {
        padding: 15px;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .selectable-item:hover {
        border-color: #4facfe;
        background: #f0f8ff;
    }

    .selectable-item.selected {
        background: #fff3cd;
        border-color: #ffc107;
    }

    .item-checkbox {
        width: 24px;
        height: 24px;
        cursor: pointer;
    }

    .item-image-small {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
    }

    .item-info-block {
        flex: 1;
    }

    .item-name-large {
        font-size: 1.1rem;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .item-details-small {
        font-size: 0.9rem;
        color: #666;
    }

    .item-quantity-container {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .quantity-label {
        font-weight: bold;
    }

    .quantity-input {
        width: 80px;
        padding: 8px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        text-align: center;
        font-size: 1rem;
    }

    .confirm-selection-btn {
        margin-top: 20px;
        width: 100%;
        padding: 15px;
        background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
        color: white;
        border: none;
        border-radius: 10px;
        font-size: 1.2rem;
        font-weight: bold;
        cursor: pointer;
    }

    .confirm-selection-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(76, 175, 80, 0.4);
    }

    @media print {
        body * {
            visibility: hidden;
        }
        
        .print-area,
        .print-area * {
            visibility: visible;
        }
        
        .print-area {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
        }
        
        .order-actions,
        .order-submit-actions,
        .btn-delete-item {
            display: none !important;
        }
    }

    @media (max-width: 768px) {
        .low-stock-alert-btn {
            top: 10px;
            left: 10px;
            padding: 10px 15px;
            font-size: 0.9rem;
        }

        .product-item {
            flex-direction: column;
            text-align: center;
        }

        .order-header {
            flex-direction: column;
            gap: 15px;
        }
        
        .order-table {
            font-size: 0.9rem;
        }
        
        .order-table th,
        .order-table td {
            padding: 8px;
        }
        
        .order-submit-actions {
            flex-direction: column;
        }
        
        .btn-save-print,
        .btn-save-whatsapp {
            width: 100%;
        }
    }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîî ‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫™‡∫∞‡∫ï‡∫±‡∫≠‡∫Å‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</h1>
            <p>‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫ï‡∫¥‡∫î‡∫ï‡∫≤‡∫°‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡ªÉ‡∫Å‡ªâ‡ªù‡∫ª‡∫î‡∫≠‡∫±‡∫î‡∫ï‡∫∞‡ªÇ‡∫ô‡∫°‡∫±‡∫î</p>
            
            <div class="data-status">
                <div class="status-indicator" id="itemsStatus">
                    <div class="status-icon status-loading"></div>
                    <span>Items: ‡∫Å‡ªç‡∫≤‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫º‡∫î...</span>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div id="loadingSection" class="loading-section">
                <div class="loading-icon"></div>
                <h3>‡∫Å‡ªç‡∫≤‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫º‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô...</h3>
                <p>‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫™‡∫±‡∫Å‡∫Ñ‡∫π‡ªà</p>
                <div style="margin-top: 15px; color: #666;">
                    <div id="dataCount">0 ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô</div>
                </div>
            </div>

            <div id="orderSection" class="order-section" style="display: none;">
                <div class="order-header">
                    <div class="order-number-display">
                        üßæ ‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ: <span id="currentOrderNumber" data-is-loaded="false">-</span>
                    </div>
                 <div class="order-actions">
    <button class="order-btn btn-load-order" onclick="showLoadOrderModal()">
        üîÑ ‡∫î‡∫∂‡∫á‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡ªÄ‡∫Å‡∫ª‡ªà‡∫≤
    </button>
    <button class="order-btn btn-download-order" onclick="showDownloadOrderModal()">
        üì• ‡∫î‡∫≤‡∫ß‡ªÇ‡∫´‡∫º‡∫î‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ
    </button>
    <!-- ‚≠ê ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á -->
    <button class="order-btn btn-clear-table" onclick="clearOrderTable()">
        üóëÔ∏è ‡∫•‡ªâ‡∫≤‡∫á‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á
    </button>
    <!-- ‚≠ê ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠ -->
    <button class="order-btn btn-decision-buy" id="decisionBuyBtn" onclick="showDecisionBuyModal()" disabled>
        ‚úÖ ‡∫ï‡∫±‡∫î‡∫™‡∫¥‡∫ô‡ªÉ‡∫à‡∫ä‡∫∑‡ªâ
    </button>
    <button class="order-btn btn-compare-price" id="comparePriceBtn" onclick="showStoreSelectorModal()" disabled>
        ‚öñÔ∏è ‡∫õ‡∫Ω‡∫ö‡∫ó‡∫Ω‡∫ö‡∫•‡∫≤‡∫Ñ‡∫≤
    </button>
</div>
                </div>

                <div class="order-table-wrapper">
                    <table class="order-table">
                        <thead>
                            <tr>
                                <th>‡∫•‡∫≥‡∫î‡∫±‡∫ö</th>
                                <th>‡∫•‡∫∞‡∫´‡∫±‡∫î</th>
                                <th>‡∫Æ‡∫π‡∫ö</th>
                                <th>‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</th>
                                <th>‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç</th>
                                <th>‡∫à‡∫≥‡∫ô‡∫ß‡∫ô</th>
                                <th>‡∫•‡∫≤‡∫Ñ‡∫≤/‡ªú‡ªà‡∫ß‡∫ç</th>
                                <th>‡∫•‡∫ß‡∫°‡ªÄ‡∫á‡∫¥‡∫ô</th>
                                <th>‡∫•‡∫ª‡∫ö</th>
                            </tr>
                        </thead>
                        <tbody id="orderTableBody">
                        </tbody>
                    </table>
                </div>

                <div class="order-footer">
                    <div class="order-total">
                        üí∞ ‡∫•‡∫ß‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î: <span id="orderTotalAmount">0</span> ‡∫Å‡∫µ‡∫ö
                    </div>
                    <div class="order-submit-actions">
                        <button class="btn-save-print" onclick="saveAndPrint()">
                            üñ®Ô∏è ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å + PRINT
                        </button>
                        <button class="btn-save-whatsapp" onclick="saveAndWhatsapp()">
                            üì± ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å + WhatsApp
                        </button>
                    </div>
                </div>

                <div id="compareSection" class="compare-section" style="display: none;">
                </div>
            </div>
        </div>
    </div>

    <script>
    let itemsData = new Map();
    let priceStudyData = new Map();
    let storeList = [];
    let phoneNumberList = []; // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
     let searchDebounceTimer = null; // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    let dataLoaded = { items: false, priceStudy: false };
    let loadStartTime = Date.now();
    let lowStockData = [];
    let lowStockModal = null;
    let currentOrderNumber = '';
    let orderItems = [];
    let selectedItemsForOrder = new Set();
   
    let currentSearchMode = 'zone';
let currentDataMode = 'lowStock'; // ‡πÉ‡∏´‡∏°‡πà: ‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (lowStock / allItems)
let allItemsDataCache = []; // ‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    window.onload = function() {
        loadAllData();
    };

  async function loadAllData() {
    await Promise.all([
        loadItemsData(),
        loadPriceStudyData(),
        loadStoreList(),
        loadPhoneNumberList()  // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    ]);
}
async function loadPhoneNumberList() {
    return new Promise((resolve) => {
        google.script.run
            .withSuccessHandler((phones) => {
                phoneNumberList = phones;
                console.log('Phone numbers loaded:', phoneNumberList.length);
                resolve();
            })
            .withFailureHandler((error) => {
                console.error('Error loading phone numbers:', error);
                resolve();
            })
            .getPhoneNumberList();
    });
}

    async function loadItemsData() {
        updateDataStatus('items', 'loading');
        
        return new Promise(function(resolve) {
            google.script.run
                .withSuccessHandler(function(data) {
                    itemsData.clear();
                    
                    if (!data || !Array.isArray(data)) {
                        console.error('Invalid data received from getItemsData');
                        updateDataStatus('items', 'error');
                        dataLoaded.items = true;
                        checkAndInitialize();
                        resolve();
                        return;
                    }
                    
                    data.forEach(function(item) {
                        if (item.columnA) {
                            itemsData.set(item.columnA.toString().trim(), item);
                        }
                    });
                    
                    updateDataStatus('items', 'success', itemsData.size);
                    dataLoaded.items = true;
                    checkAndInitialize();
                    resolve();
                })
                .withFailureHandler(function(error) {
                    console.error('Error in loadItemsData:', error);
                    updateDataStatus('items', 'error');
                    dataLoaded.items = true;
                    checkAndInitialize();
                    resolve();
                })
                .getItemsData();
        });
    }

  async function loadPriceStudyData() {
    return new Promise(function(resolve) {
        google.script.run
            .withSuccessHandler(function(data) {
                console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                console.log('üì• Received data from getPriceStudyData()');
                console.log('üìä Data type:', typeof data);
                console.log('üìä Is Array:', Array.isArray(data));
                console.log('üìä Length:', data ? data.length : 0);
                
                priceStudyData.clear();
                
                if (!data || !Array.isArray(data) || data.length === 0) {
                    console.warn('‚ö†Ô∏è No price study data received');
                    dataLoaded.priceStudy = true;
                    checkAndInitialize();
                    resolve();
                    return;
                }
                
                console.log('üîÑ Processing ' + data.length + ' items...');
                
                let processedCount = 0;
                
                // ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                data.forEach(function(item, idx) {
                    if (!item || !item.columnB) {
                        console.warn('‚ö†Ô∏è Item ' + idx + ' missing columnB:', item);
                        return;
                    }
                    
                    const barcode = item.columnB.toString().trim();
                    const store = item.columnF ? item.columnF.toString().trim() : '';
                    const price = parseFloat(item.columnH) || 0;
                    
                    if (!barcode) {
                        console.warn('‚ö†Ô∏è Empty barcode at index ' + idx);
                        return;
                    }
                    
                    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Map
                    if (!priceStudyData.has(barcode)) {
                        priceStudyData.set(barcode, []);
                    }
                    
                    priceStudyData.get(barcode).push({
                        barcode: barcode,
                        store: store,
                        price: price,
                        rawData: item
                    });
                    
                    processedCount++;
                    
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                    if (idx < 5) {
                        console.log('  ‚úì Item ' + (idx + 1) + ':', barcode, '|', store, '|', price);
                    }
                });
                
                console.log('‚úÖ Processed: ' + processedCount + ' items');
                console.log('‚úÖ Unique barcodes: ' + priceStudyData.size);
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
                console.log('\nüìã Sample stored data:');
                let sampleCount = 0;
                priceStudyData.forEach(function(items, barcode) {
                    if (sampleCount < 3) {
                        console.log('üîë Barcode:', barcode, '(' + items.length + ' stores)');
                        items.forEach(function(item, idx) {
                            console.log('  ' + (idx + 1) + '. Store:', item.store, '| Price:', item.price);
                        });
                        sampleCount++;
                    }
                });
                console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
                
                dataLoaded.priceStudy = true;
                checkAndInitialize();
                resolve();
            })
            .withFailureHandler(function(error) {
                console.error('‚ùå Error loading price study data:', error);
                dataLoaded.priceStudy = true;
                checkAndInitialize();
                resolve();
            })
            .getPriceStudyData();
    });
}

    async function loadStoreList() {
        return new Promise((resolve) => {
            google.script.run
                .withSuccessHandler((stores) => {
                    storeList = stores;
                    resolve();
                })
                .withFailureHandler((error) => {
                    console.error('Error loading store list:', error);
                    resolve();
                })
                .getStoreList();
        });
    }

    function checkAndInitialize() {
        if (dataLoaded.items && dataLoaded.priceStudy) {
            initializeUI();
        }
    }

    function updateDataStatus(type, status, count = 0) {
        const statusElement = document.getElementById(type + 'Status');
        if (!statusElement) return;
        
        const icon = statusElement.querySelector('.status-icon');
        const text = statusElement.querySelector('span');
        
        if (icon) icon.className = 'status-icon status-' + status;
        
        if (text) {
            if (status === 'success') {
                text.textContent = 'Items: ' + count.toLocaleString() + ' ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô ‚úì';
            } else if (status === 'error') {
                text.textContent = 'Items: ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î ‚úó';
            }
        }
    }

    function initializeUI() {
        const loadingSection = document.getElementById('loadingSection');
        const orderSection = document.getElementById('orderSection');
        
        if (loadingSection) loadingSection.style.display = 'none';
        if (orderSection) orderSection.style.display = 'block';
        
        currentOrderNumber = generateOrderNumber();
        document.getElementById('currentOrderNumber').textContent = currentOrderNumber;

        createLowStockAlertButton();
        checkLowStockAndShowAlert();
    }

    function generateOrderNumber() {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const day = String(now.getDate()).padStart(2, '0');
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        
        return 'PO-' + year + month + day + '-' + hours + minutes;
    }

    function createLowStockAlertButton() {
        if (document.getElementById('lowStockAlertBtn')) return;

        const alertButton = document.createElement('button');
        alertButton.id = 'lowStockAlertBtn';
        alertButton.className = 'low-stock-alert-btn';
        alertButton.innerHTML = 'üîî ‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫™‡∫∞‡∫ï‡∫±‡∫≠‡∫Å & üõí‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤ <span class="stock-alert-badge" id="stockAlertBadge">0</span>';
        alertButton.onclick = showLowStockModal;
        document.body.appendChild(alertButton);

        createLowStockModal();
    }

function createLowStockModal() {
    const modal = document.createElement('div');
    modal.id = 'lowStockModal';
    modal.className = 'low-stock-modal';
    
    const content = '<div class="low-stock-modal-content">' +
        '<div class="low-stock-modal-header">' +
        '<h2 class="low-stock-modal-title">üîî ‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</h2>' +
        '<button class="stock-close-btn" onclick="closeLowStockModal()">√ó</button>' +
        '</div>' +
        // ‚≠ê ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ class="data-mode-options"
        '<div class="data-mode-options">' +
        '<button class="data-mode-btn mode-all-items active" onclick="setDataMode(\'allItems\')">üì¶ ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î</button>' +
        '<button class="data-mode-btn mode-low-stock" onclick="setDataMode(\'lowStock\')">üî¥ ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡ªÉ‡∫Å‡ªâ‡ªú‡∫ª‡∫î</button>' +
        '</div>' +
        '<div class="search-options">' +
        '<button class="search-option-btn active" onclick="setSearchMode(\'zone\')">üìç ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ï‡∫≤‡∫°‡ªÇ‡∫ä‡∫ô</button>' +
        '<button class="search-option-btn" onclick="setSearchMode(\'scan\')">üì∑ ‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô‡∫ö‡∫≤‡ªÇ‡∫Ñ‡∫î</button>' +
        '<button class="search-option-btn" onclick="setSearchMode(\'name\')">üîç ‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤‡∫ä‡∫∑‡ªà</button>' +
        '</div>' +
        '<div id="searchInputContainer" class="search-input-container" style="display: none;">' +
        '<input type="text" id="searchInput" class="search-input" placeholder="‡∫õ‡ªâ‡∫≠‡∫ô‡∫ö‡∫≤‡ªÇ‡∫Ñ‡∫î ‡∫´‡∫º‡∫∑ ‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤...">' +
        '</div>' +
        '<div id="lowStockContent"></div>' +
        '<button id="confirmSelectionBtn" class="confirm-selection-btn" style="display: none;" onclick="confirmItemSelection()">‚úÖ ‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å</button>' +
        '</div>';
    
    modal.innerHTML = content;
    document.body.appendChild(modal);
    lowStockModal = modal;
    
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', handleSearch);
    }
}
function setSearchMode(mode) {
    currentSearchMode = mode;
    
    document.querySelectorAll('.search-option-btn').forEach(function(btn) {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    const searchContainer = document.getElementById('searchInputContainer');
    const searchInput = document.getElementById('searchInput');
    const confirmBtn = document.getElementById('confirmSelectionBtn');
    
    if (mode === 'zone') {
        searchContainer.style.display = 'none';
        confirmBtn.style.display = 'block';
        displayZoneView();
    } else {
        searchContainer.style.display = 'block';
        confirmBtn.style.display = 'block';
        searchInput.value = '';
        searchInput.placeholder = mode === 'scan' ? '‡∫õ‡ªâ‡∫≠‡∫ô‡∫ö‡∫≤‡ªÇ‡∫Ñ‡∫î...' : '‡∫õ‡ªâ‡∫≠‡∫ô‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤...';
        searchInput.focus();
        document.getElementById('lowStockContent').innerHTML = '<p style="text-align: center; color: #999;">‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤</p>';
    }
}

 /**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° Debounce + ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
 */
function handleSearch(e) {
    const query = e.target.value.trim().toLowerCase();
    
    // Clear timeout ‡πÄ‡∏î‡∏¥‡∏°
    if (searchDebounceTimer) {
        clearTimeout(searchDebounceTimer);
    }
    
    if (!query) {
        document.getElementById('lowStockContent').innerHTML = '<p style="text-align: center; color: #999;">‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤</p>';
        return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á Loading
    document.getElementById('lowStockContent').innerHTML = '<p style="text-align: center; color: #4facfe;">üîç ‡∫Å‡ªç‡∫≤‡∫•‡∫±‡∫á‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤...</p>';
    
    // Debounce: ‡∏£‡∏≠ 300ms ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    searchDebounceTimer = setTimeout(function() {
        performSearch(query);
    }, 300);
}

/**
 * ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function performSearch(query) {
    const results = [];
    const seenBarcodeBox = new Set();
    const sourceData = currentDataMode === 'lowStock' ? itemsData : itemsData;
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß: Loop ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    sourceData.forEach(function(item, barcode) {
        const stockRemaining = parseFloat(item.columnF) || 0;
        const reorderPoint = parseFloat(item.columnD) || 0;
        
        const passStockCheck = currentDataMode === 'allItems' || 
                              (stockRemaining < reorderPoint && reorderPoint > 0);
        
        if (!passStockCheck) return;
        
        let matchFound = false;
        
        if (currentSearchMode === 'scan') {
            matchFound = barcode.toLowerCase().includes(query);
        } else if (currentSearchMode === 'name') {
            const itemName = (item.columnB || '').toLowerCase();
            matchFound = itemName.includes(query);
        }
        
        if (matchFound) {
            const barcodeBox = item.columnJ || barcode;
            
            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ
            if (!seenBarcodeBox.has(barcodeBox)) {
                seenBarcodeBox.add(barcodeBox);
                
                // ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                sourceData.forEach(function(relatedItem, relatedBarcode) {
                    const relatedBarcodeBox = relatedItem.columnJ || relatedBarcode;
                    
                    if (relatedBarcodeBox === barcodeBox) {
                        const relatedStock = parseFloat(relatedItem.columnF) || 0;
                        const relatedReorder = parseFloat(relatedItem.columnD) || 0;
                        
                        const relatedPassCheck = currentDataMode === 'allItems' || 
                                                (relatedStock < relatedReorder && relatedReorder > 0);
                        
                        if (relatedPassCheck) {
                            results.push({
                                barcode: relatedBarcode,
                                barcodeBox: relatedBarcodeBox,
                                itemName: relatedItem.columnB || '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ä‡∫∑‡ªà',
                                reorderPoint: relatedReorder,
                                stockRemaining: relatedStock,
                                unit: relatedItem.columnH || '‡∫ä‡∫¥‡ªâ‡∫ô',
                                quantityPerUnit: parseFloat(relatedItem.columnI) || 1,
                                image: relatedItem.columnK || '',
                                zone: relatedItem.columnM || '‡∫ö‡ªç‡ªà‡∫•‡∫∞‡∫ö‡∫∏‡ªÇ‡∫ä‡∫ô',
                                price: parseFloat(relatedItem.columnN) || 0
                            });
                        }
                    }
                });
            }
        }
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    displaySearchResultsGrouped(results);
    
    // ‚≠ê ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏™‡πÅ‡∏Å‡∏ô: ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (currentSearchMode === 'scan' && results.length > 0) {
        const uniqueGroups = new Set(results.map(item => item.barcodeBox));
        
        if (uniqueGroups.size === 1) {
            // ‡∏û‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            autoAddSearchResultsToOrder(results);
            
            // ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            document.getElementById('searchInput').value = '';
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            document.getElementById('lowStockContent').innerHTML = 
                '<p style="text-align: center; color: #4caf50; font-size: 1.2rem; padding: 30px;">' +
                '‚úÖ ‡ªÄ‡∫û‡∫µ‡ªà‡∫° ' + results.length + ' ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î!<br>' +
                '<span style="font-size: 0.9rem; color: #666;">‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô‡∫ï‡ªç‡ªà‡ªÑ‡∫î‡ªâ‡ªÄ‡∫•‡∫µ‡∫ç</span>' +
                '</p>';
            
            // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(function() {
                document.getElementById('lowStockContent').innerHTML = 
                    '<p style="text-align: center; color: #999;">‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤</p>';
            }, 1500);
        }
    }
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function autoAddSearchResultsToOrder(results) {
    let addedCount = 0;
    
    results.forEach(function(item) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        const isInOrder = orderItems.some(function(orderItem) {
            return orderItem.barcode === item.barcode;
        });
        
        if (!isInOrder) {
            const orderItem = {
                barcode: item.barcode,
                itemName: item.itemName,
                unit: item.unit,
                quantity: 1,
                price: item.price,
                image: item.image,
                total: item.price
            };
            
            orderItems.push(orderItem);
            addedCount++;
        }
    });
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    if (addedCount > 0) {
        updateOrderTable();
    }
}

    function displaySearchResults(results) {
        const content = document.getElementById('lowStockContent');
        
        if (results.length === 0) {
            content.innerHTML = '<p style="text-align: center; color: #999;">‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô</p>';
            return;
        }
        
        const uniqueResults = [];
        const seenBarcodes = new Set();
        
        results.forEach(function(item) {
            if (!seenBarcodes.has(item.barcode)) {
                seenBarcodes.add(item.barcode);
                uniqueResults.push(item);
            }
        });
        
        let html = '<div class="search-results">';
        
        uniqueResults.forEach(function(item) {
            const isSelected = selectedItemsForOrder.has(item.barcode);
            const quantity = isSelected ? getItemQuantityFromOrder(item.barcode) : 1;
            
            html += '<div class="selectable-item ' + (isSelected ? 'selected' : '') + '" data-barcode="' + item.barcode + '" onclick="handleItemCardClick(event, \'' + item.barcode + '\')">';
            html += '<input type="checkbox" class="item-checkbox" ' + (isSelected ? 'checked' : '') + ' onclick="event.stopPropagation(); toggleItemSelection(\'' + item.barcode + '\')">';
            
            if (item.image) {
                html += '<img src="' + item.image + '" class="item-image-small">';
            } else {
                html += '<div class="no-product-image">üì∑</div>';
            }
            
            html += '<div class="item-info-block">';
            html += '<div class="item-name-large">' + item.itemName + '</div>';
            html += '<div class="item-details-small">‡∫•‡∫∞‡∫´‡∫±‡∫î: ' + item.barcode + ' | ‡ªÇ‡∫ä‡∫ô: ' + item.zone + '</div>';
            html += '</div>';
            html += '<div class="item-quantity-container">';
            html += '<span class="quantity-label">‡∫à‡∫≥‡∫ô‡∫ß‡∫ô:</span>';
            html += '<input type="number" class="quantity-input" value="' + quantity + '" min="1" onclick="event.stopPropagation()" onchange="updateItemQuantity(\'' + item.barcode + '\', this.value)">';
            html += '</div>';
            html += '</div>';
        });
        
        html += '</div>';
        content.innerHTML = html;
    }

    function handleItemCardClick(event, barcode) {
        if (event.target.classList.contains('quantity-input') || 
            event.target.classList.contains('item-checkbox')) {
            return;
        }
        
        toggleItemSelection(barcode);
    }

function displayZoneView() {
    const dataSource = currentDataMode === 'lowStock' ? lowStockData : allItemsDataCache;
    
    if (currentDataMode === 'allItems' && Object.keys(allItemsDataCache).length === 0) {
        loadAllItemsData();
    }
    
    const content = document.getElementById('lowStockContent');
    
    if (!dataSource || Object.keys(dataSource).length === 0) {
        if (currentDataMode === 'lowStock') {
            content.innerHTML = '<div class="stock-empty-state"><i>‚úÖ</i><h3>‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡ªÉ‡∫Å‡ªâ‡ªú‡∫ª‡∫î‡∫™‡∫∞‡∫ï‡∫±‡∫≠‡∫Å</h3></div>';
        } else {
            content.innerHTML = '<div class="stock-empty-state"><i>üì¶</i><h3>‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</h3></div>';
        }
        return;
    }

    const sortedZones = Object.entries(dataSource).sort(function(a, b) {
        return a[0].localeCompare(b[0]);
    });

    let html = '';
    sortedZones.forEach(function(zoneEntry) {
        const zoneName = zoneEntry[0];
        const zoneData = zoneEntry[1];
        const productCount = Object.keys(zoneData.products).length;
        const zoneId = 'zone_' + zoneName.replace(/\W/g, '');

        html += '<div class="zone-card" onclick="toggleZoneDetails(\'' + zoneId + '\')">';
        html += '<div class="zone-card-header">';
        html += '<div class="zone-name">üìç ‡ªÇ‡∫ä‡∫ô: ' + zoneName + '</div>';
        html += '<div class="zone-count">' + productCount + ' ‡∫Å‡∫∏‡ªà‡∫°‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</div>';
        html += '</div>';
        html += '<div id="' + zoneId + '" class="zone-details">';
        html += generateZoneDetailsHTMLEnhanced(zoneData);
        html += '</div>';
        html += '</div>';
    });

    content.innerHTML = html;
}

   

    function toggleItemSelection(barcode) {
        const item = itemsData.get(barcode);
        if (!item) return;
        
        if (selectedItemsForOrder.has(barcode)) {
            selectedItemsForOrder.delete(barcode);
        } else {
            selectedItemsForOrder.add(barcode);
        }
        
        const elements = document.querySelectorAll('[data-barcode="' + barcode + '"]');
        elements.forEach(function(el) {
            const checkbox = el.querySelector('.item-checkbox');
            const isSelected = selectedItemsForOrder.has(barcode);
            
            if (checkbox) {
                checkbox.checked = isSelected;
            }
            
            if (isSelected) {
                el.classList.add('selected');
            } else {
                el.classList.remove('selected');
            }
        });
    }

    function updateItemQuantity(barcode, quantity) {
        const qty = parseInt(quantity) || 1;
        
        if (!selectedItemsForOrder.has(barcode)) {
            selectedItemsForOrder.add(barcode);
        }
        
        const existingIndex = orderItems.findIndex(function(item) {
            return item.barcode === barcode;
        });
        if (existingIndex >= 0) {
            orderItems[existingIndex].quantity = qty;
        }
    }

    function getItemQuantityFromOrder(barcode) {
        const item = orderItems.find(function(i) {
            return i.barcode === barcode;
        });
        return item ? item.quantity : 1;
    }

  /**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î Modal)
 */
function confirmItemSelection() {
    if (selectedItemsForOrder.size === 0) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡∫Å‡ªà‡∫≠‡∫ô');
        return;
    }
    
    let addedCount = 0;
    
    selectedItemsForOrder.forEach(function(barcode) {
        const item = itemsData.get(barcode);
        if (!item) return;
        
        const existingIndex = orderItems.findIndex(function(i) {
            return i.barcode === barcode;
        });
        
        const quantityInputs = document.querySelectorAll('[data-barcode="' + barcode + '"] .quantity-input');
        let quantity = 1;
        
        for (let i = 0; i < quantityInputs.length; i++) {
            const val = parseInt(quantityInputs[i].value);
            if (val && val > 0) {
                quantity = val;
                break;
            }
        }
        
        const orderItem = {
            barcode: barcode,
            itemName: item.columnB || '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ä‡∫∑‡ªà',
            unit: item.columnH || '‡∫ä‡∫¥‡ªâ‡∫ô',
            quantity: quantity,
            price: parseFloat(item.columnN) || 0,
            image: item.columnK || '',
            total: quantity * (parseFloat(item.columnN) || 0)
        };
        
        if (existingIndex >= 0) {
            orderItems[existingIndex] = orderItem;
        } else {
            orderItems.push(orderItem);
            addedCount++;
        }
    });
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    selectedItemsForOrder.clear();
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    updateOrderTable();
    
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Modal
    if (currentSearchMode === 'zone') {
        displayZoneView();
    } else {
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.value = '';
            document.getElementById('lowStockContent').innerHTML = '<p style="text-align: center; color: #999;">‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤</p>';
        }
    }
    
    // ‚≠ê ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î Modal - ‡πÉ‡∏´‡πâ‡∏™‡πÅ‡∏Å‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    // closeLowStockModal(); // ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (addedCount > 0) {
        // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        const content = document.getElementById('lowStockContent');
        const originalHTML = content.innerHTML;
        
        content.innerHTML = '<p style="text-align: center; color: #4caf50; font-size: 1.2rem; padding: 30px;">‚úÖ ‡ªÄ‡∫û‡∫µ‡ªà‡∫° ' + addedCount + ' ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î!</p>';
        
        setTimeout(function() {
            if (currentSearchMode === 'zone') {
                displayZoneView();
            } else {
                content.innerHTML = '<p style="text-align: center; color: #999;">‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤</p>';
            }
        }, 1500);
    }
}

    function checkLowStockAndShowAlert() {
        if (!itemsData || itemsData.size === 0) return;

        const lowStockItems = [];

        itemsData.forEach(function(item) {
            const stockRemaining = parseFloat(item.columnF) || 0;
            const reorderPoint = parseFloat(item.columnD) || 0;

            if (stockRemaining < reorderPoint && reorderPoint > 0) {
                lowStockItems.push({
                    barcode: item.columnA || '',
                    barcodeBox: item.columnJ || '',
                    itemName: item.columnB || '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ä‡∫∑‡ªà',
                    reorderPoint: reorderPoint,
                    stockRemaining: stockRemaining,
                    unit: item.columnH || '‡∫ä‡∫¥‡ªâ‡∫ô',
                    quantityPerUnit: parseFloat(item.columnI) || 1,
                    image: item.columnK || '',
                    zone: item.columnM || '‡∫ö‡ªç‡ªà‡∫•‡∫∞‡∫ö‡∫∏‡ªÇ‡∫ä‡∫ô',
                    price: parseFloat(item.columnN) || 0
                });
            }
        });

        if (lowStockItems.length > 0) {
            lowStockData = groupLowStockByZone(lowStockItems);
            
            const alertBtn = document.getElementById('lowStockAlertBtn');
            if (alertBtn) {
                alertBtn.classList.add('show');
                
                const totalItems = Object.values(lowStockData).reduce(function(sum, zone) {
                    return sum + Object.keys(zone.products).length;
                }, 0);
                
                const badge = document.getElementById('stockAlertBadge');
                if (badge) badge.textContent = totalItems;
            }
        }
    }

    function groupLowStockByZone(items) {
        const grouped = {};

        items.forEach(function(item) {
            const zone = item.zone;
            const barcodeBox = item.barcodeBox || item.barcode;

            if (!grouped[zone]) {
                grouped[zone] = { zoneName: zone, products: {} };
            }

            if (!grouped[zone].products[barcodeBox]) {
                grouped[zone].products[barcodeBox] = {
                    barcodeBox: barcodeBox,
                    reorderPoint: item.reorderPoint,
                    stockRemaining: item.stockRemaining,
                    items: []
                };
            }

            grouped[zone].products[barcodeBox].items.push(item);
        });

        return grouped;
    }

/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏°‡∏î "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
 */
function showLowStockModal() {
    if (!lowStockModal) return;
    
    // ‚≠ê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    currentSearchMode = 'zone';
    currentDataMode = 'allItems'; // ‚≠ê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'lowStock' ‡πÄ‡∏õ‡πá‡∏ô 'allItems'
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    document.querySelectorAll('.search-option-btn').forEach(function(btn) {
        btn.classList.remove('active');
    });
    document.querySelectorAll('.search-option-btn')[0].classList.add('active');
    
    // ‚≠ê ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    document.querySelectorAll('.data-mode-btn').forEach(function(btn) {
        btn.classList.remove('active');
    });
    document.querySelector('.data-mode-btn.mode-all-items').classList.add('active');
    
    // ‡∏ã‡πà‡∏≠‡∏ô input ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    document.getElementById('searchInputContainer').style.display = 'none';
    document.getElementById('confirmSelectionBtn').style.display = 'block';
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (Object.keys(allItemsDataCache).length === 0) {
        loadAllItemsData();
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á View
    displayZoneView();
    lowStockModal.classList.add('show');
}
    function toggleZoneDetails(zoneId) {
        const element = document.getElementById(zoneId);
        if (element) {
            element.classList.toggle('show');
            
            if (element.classList.contains('show')) {
                setTimeout(function() {
                    element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                }, 100);
            }
        }
    }

    function closeLowStockModal() {
        if (lowStockModal) lowStockModal.classList.remove('show');
    }

    function updateOrderTable() {
        const tbody = document.getElementById('orderTableBody');
        const comparePriceBtn = document.getElementById('comparePriceBtn');
        
        if (!tbody) return;
        
        if (orderItems.length === 0) {
            tbody.innerHTML = '<tr><td colspan="9" style="text-align: center; padding: 40px; color: #999;">‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ<br>‡∫Å‡∫ª‡∫î‡∫õ‡∫∏‡ªà‡∫° "üîî ‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫™‡∫∞‡∫ï‡∫±‡∫≠‡∫Å" ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</td></tr>';
            comparePriceBtn.disabled = true;
            updateOrderTotal();
            return;
        }
        
        comparePriceBtn.disabled = false;
        
        let html = '';
        orderItems.forEach(function(item, index) {
            const highlightClass = selectedItemsForOrder.has(item.barcode) ? 'item-highlighted' : '';
            const imgHtml = item.image ? '<img src="' + item.image + '" class="order-table-img">' : '<div class="no-order-img">üì∑</div>';
            
            html += '<tr class="' + highlightClass + '">';
            html += '<td>' + (index + 1) + '</td>';
            html += '<td>' + item.barcode + '</td>';
            html += '<td>' + imgHtml + '</td>';
            html += '<td>' + item.itemName + '</td>';
            html += '<td>' + item.unit + '</td>';
            html += '<td><input type="number" class="order-quantity-input" value="' + item.quantity + '" min="1" onchange="updateOrderItemQuantity(' + index + ', this.value)"></td>';
            html += '<td>' + item.price.toLocaleString() + '</td>';
            html += '<td>' + (item.quantity * item.price).toLocaleString() + '</td>';
            html += '<td><button class="btn-delete-item" onclick="deleteOrderItem(' + index + ')">‚ùå</button></td>';
            html += '</tr>';
        });
        
        tbody.innerHTML = html;
        updateOrderTotal();
    }

    function updateOrderItemQuantity(index, quantity) {
        const qty = parseInt(quantity) || 1;
        orderItems[index].quantity = qty;
        orderItems[index].total = qty * orderItems[index].price;
        updateOrderTable();
    }

 function deleteOrderItem(index) {
    const item = orderItems[index];
    selectedItemsForOrder.delete(item.barcode);
    orderItems.splice(index, 1);
    updateOrderTable();
    
    // ‡∏ñ‡πâ‡∏≤ Modal ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    if (lowStockModal && lowStockModal.classList.contains('show')) {
        if (currentSearchMode === 'zone') {
            displayZoneView();
        } else {
            const searchInput = document.getElementById('searchInput');
            if (searchInput && searchInput.value.trim()) {
                handleSearch({ target: searchInput });
            }
        }
    }
}

    function updateOrderTotal() {
        const total = orderItems.reduce(function(sum, item) {
            return sum + item.total;
        }, 0);
        document.getElementById('orderTotalAmount').textContent = total.toLocaleString();
    }

    function showStoreSelectorModal() {
        if (orderItems.length === 0) {
            alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡∫•‡∫ª‡∫á‡ªÉ‡∫ô‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫Å‡ªà‡∫≠‡∫ô');
            return;
        }
        
        const modal = document.createElement('div');
        modal.id = 'storeSelectorModal';
        modal.className = 'store-selector-modal show';
        
        modal.innerHTML = '<div class="store-selector-content">' +
            '<div class="store-selector-header">‚öñÔ∏è ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫Æ‡ªâ‡∫≤‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫õ‡∫Ω‡∫ö‡∫ó‡∫Ω‡∫ö‡∫•‡∫≤‡∫Ñ‡∫≤</div>' +
            '<input type="text" id="storeSearchInput" class="store-search-input" placeholder="‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô..." onkeyup="filterStores()">' +
            '<div class="store-list" id="storeListContainer">' + generateStoreListHTML() + '</div>' +
            '<div class="store-selector-actions">' +
            '<button class="btn-cancel-stores" onclick="closeStoreSelectorModal()">‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>' +
            '<button class="btn-confirm-stores" onclick="confirmStoreSelection()">‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô</button>' +
            '</div>' +
            '</div>';
        
        document.body.appendChild(modal);
        
        modal.addEventListener('click', function(e) {
            if (e.target === modal) closeStoreSelectorModal();
        });
    }

    function generateStoreListHTML() {
        if (!storeList || storeList.length === 0) {
            return '<p style="text-align: center; color: #999;">‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Æ‡ªâ‡∫≤‡∫ô</p>';
        }
        
        let html = '';
        storeList.forEach(function(store) {
            html += '<div class="store-item" onclick="toggleStoreSelection(\'' + store + '\')">';
            html += '<input type="checkbox" class="store-checkbox" value="' + store + '" onchange="event.stopPropagation(); toggleStoreSelection(\'' + store + '\')">';
            html += '<span>' + store + '</span>';
            html += '</div>';
        });
        
        return html;
    }

    function filterStores() {
        const input = document.getElementById('storeSearchInput');
        const filter = input.value.toLowerCase();
        const container = document.getElementById('storeListContainer');
        const items = container.getElementsByClassName('store-item');
        
        for (let i = 0; i < items.length; i++) {
            const text = items[i].textContent || items[i].innerText;
            if (text.toLowerCase().indexOf(filter) > -1) {
                items[i].style.display = '';
            } else {
                items[i].style.display = 'none';
            }
        }
    }

    function toggleStoreSelection(storeName) {
        const item = event.currentTarget;
        const checkbox = item.querySelector('.store-checkbox');
        
        item.classList.toggle('selected');
        checkbox.checked = !checkbox.checked;
    }

    function confirmStoreSelection() {
        const checkboxes = document.querySelectorAll('.store-checkbox:checked');
        const selectedStores = Array.from(checkboxes).map(function(cb) {
            return cb.value;
        });
        
        if (selectedStores.length === 0) {
            alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫Æ‡ªâ‡∫≤‡∫ô‡∫¢‡ªà‡∫≤‡∫á‡ªú‡ªâ‡∫≠‡∫ç 1 ‡∫Æ‡ªâ‡∫≤‡∫ô');
            return;
        }
        
        closeStoreSelectorModal();
        generateComparisonTables(selectedStores);
    }

    function closeStoreSelectorModal() {
        const modal = document.getElementById('storeSelectorModal');
        if (modal) modal.remove();
    }

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡πâ‡∏≤‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°)
 */
function generateComparisonTables(stores) {
    console.log('=== generateComparisonTables START ===');
    console.log('Selected Stores:', stores);

    const compareSection = document.getElementById('compareSection');
    if (!compareSection) {
        console.error('‚ùå compareSection not found!');
        return;
    }

    compareSection.style.display = 'block';
    compareSection.innerHTML = '<h3 style="color: #ffa726; margin-bottom: 20px;">üìä ‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫õ‡∫Ω‡∫ö‡∫ó‡∫Ω‡∫ö‡∫•‡∫≤‡∫Ñ‡∫≤</h3>';

    if (!orderItems || orderItems.length === 0) {
        console.warn('‚ö†Ô∏è orderItems is empty');
        orderItems = [];
        itemsData.forEach((item, key) => {
            orderItems.push({
                barcode: key,
                itemName: item.itemName || '',
                unit: item.unit || '',
                quantity: item.quantity || 1,
                image: item.image || '',
                price: item.price || 0
            });
        });
        console.log('‚úÖ Generated orderItems from itemsData:', orderItems.length);
    }

    console.log('Order Items:', orderItems);

    // ‚≠ê ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    const mainTableTotal = orderItems.reduce(function(sum, item) {
        return sum + (item.quantity * item.price);
    }, 0);

    console.log('üí∞ Main Table Total:', mainTableTotal);

    // ‚≠ê ‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô
    const storeTotals = {};

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô
    stores.forEach(function(storeName) {
        console.log('Generating table for store:', storeName);
        const tableResult = generateSingleComparisonTableWithTotal(storeName);
        compareSection.innerHTML += tableResult.html;
        storeTotals[storeName] = tableResult.total;
    });

    // ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
    const summaryHTML = createTotalSummary(mainTableTotal, storeTotals);
    
    // ‡πÅ‡∏ó‡∏£‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á compareSection
    const summaryDiv = document.createElement('div');
    summaryDiv.innerHTML = summaryHTML;
    compareSection.insertBefore(summaryDiv, compareSection.firstChild.nextSibling);

    console.log('=== generateComparisonTables END ===');
}
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Column H ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏£‡πâ‡∏≤‡∏ô)
 */
function generateSingleComparisonTable(storeName) {
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üè™ Generating table for store:', storeName);
    console.log('üìä Order Items:', orderItems.length);
    console.log('üóÑÔ∏è Items Data:', itemsData.size);
    console.log('üí∞ Price Study Data:', priceStudyData.size);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

    let html = '<div class="compare-table-container">' +
        '<div class="compare-table-header">üè™ ' + storeName + '</div>' +
        '<div class="order-table-wrapper">' +
        '<table class="order-table">' +
        '<thead><tr>' +
        '<th>‡∫•‡∫≥‡∫î‡∫±‡∫ö</th><th>‡∫•‡∫∞‡∫´‡∫±‡∫î</th><th>‡∫Æ‡∫π‡∫ö</th><th>‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</th>' +
        '<th>‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç</th><th>‡∫à‡∫≥‡∫ô‡∫ß‡∫ô</th><th>‡∫•‡∫≤‡∫Ñ‡∫≤/‡ªú‡ªà‡∫ß‡∫ç</th><th>‡∫•‡∫ß‡∫°‡ªÄ‡∫á‡∫¥‡∫ô</th><th>‡ªÅ‡∫´‡∫º‡ªà‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô</th>' +
        '</tr></thead><tbody>';

    let totalAmount = 0;

    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    orderItems.forEach(function(orderItem, index) {
        const barcodeFromOrder = orderItem.barcode.toString().trim();
        
        console.log('\nüì¶ Item ' + (index + 1) + ': ' + orderItem.itemName);
        console.log('üîë Barcode:', barcodeFromOrder);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (Items)
        const mainItem = itemsData.get(barcodeFromOrder);
        
        if (!mainItem) {
            console.warn('‚ö†Ô∏è Not found in Items table');
            
            // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å orderItem
            const itemTotal = orderItem.quantity * (orderItem.price || 0);
            totalAmount += itemTotal;
            
            const imgHtml = orderItem.image ? 
                '<img src="' + orderItem.image + '" class="order-table-img">' : 
                '<div class="no-order-img">üì∑</div>';
            
            html += '<tr style="background: #ffe0e0;">';
            html += '<td>' + (index + 1) + '</td>';
            html += '<td>' + barcodeFromOrder + '</td>';
            html += '<td>' + imgHtml + '</td>';
            html += '<td>' + orderItem.itemName + '</td>';
            html += '<td>' + orderItem.unit + '</td>';
            html += '<td>' + orderItem.quantity + '</td>';
            html += '<td>' + (orderItem.price || 0).toLocaleString() + '</td>';
            html += '<td>' + itemTotal.toLocaleString() + '</td>';
            html += '<td><span class="item-source-badge badge-main-table">‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÄ‡∫î‡∫µ‡∫°</span></td>';
            html += '</tr>';
            return;
        }

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        const baseData = {
            barcode: barcodeFromOrder,
            itemName: mainItem.columnB || orderItem.itemName,
            unit: mainItem.columnH || orderItem.unit,
            quantity: orderItem.quantity,
            image: mainItem.columnK || orderItem.image,
            priceFromMainTable: parseFloat(mainItem.columnN) || 0
        };

        console.log('‚úÖ Found in Items table');
        console.log('üìã Item Name:', baseData.itemName);
        console.log('üíµ Main Table Price (Column N):', baseData.priceFromMainTable);

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∫™‡∫∂‡∫Å‡∫™‡∫≤‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô
        const priceStudyItems = priceStudyData.get(barcodeFromOrder);
        
        let finalPrice = baseData.priceFromMainTable;
        let source = 'main-table';
        let priceSource = '‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫´‡∫º‡∫±‡∫Å';

        if (priceStudyItems && priceStudyItems.length > 0) {
            console.log('üîç Found ' + priceStudyItems.length + ' price study entries for this barcode');
            
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            const matchedItem = priceStudyItems.find(function(item) {
                const storeMatch = item.store.toLowerCase() === storeName.toLowerCase().trim();
                console.log('  ‚Üí Comparing: "' + item.store + '" === "' + storeName + '" ? ' + storeMatch + ' (Price: ' + item.price + ')');
                return storeMatch;
            });
            
            if (matchedItem) {
                console.log('‚úÖ MATCH FOUND!');
                console.log('üè™ Store:', matchedItem.store);
                console.log('üí∞ Price (Column H):', matchedItem.price);
                
                if (matchedItem.price > 0) {
                    finalPrice = matchedItem.price;
                    source = 'price-study';
                    priceSource = '‡∫™‡∫∂‡∫Å‡∫™‡∫≤‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô';
                } else {
                    console.warn('‚ö†Ô∏è Price is 0 or invalid, using main table price');
                }
            } else {
                console.log('‚ùå No matching store found, using main table price');
            }
        } else {
            console.log('‚ùå No price study data for this barcode');
        }

        console.log('üìä Final Price:', finalPrice);
        console.log('üìå Source:', priceSource);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        const itemTotal = baseData.quantity * finalPrice;
        totalAmount += itemTotal;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML
        const imgHtml = baseData.image ? 
            '<img src="' + baseData.image + '" class="order-table-img">' : 
            '<div class="no-order-img">üì∑</div>';

        const badgeClass = source === 'price-study' ? 'badge-price-study' : 'badge-main-table';
        const rowStyle = source === 'main-table' ? ' style="background: #e3f2fd;"' : '';

        html += '<tr' + rowStyle + '>';
        html += '<td>' + (index + 1) + '</td>';
        html += '<td>' + baseData.barcode + '</td>';
        html += '<td>' + imgHtml + '</td>';
        html += '<td>' + baseData.itemName + '</td>';
        html += '<td>' + baseData.unit + '</td>';
        html += '<td>' + baseData.quantity + '</td>';
        html += '<td>' + (finalPrice > 0 ? finalPrice.toLocaleString() : '-') + '</td>';
        html += '<td>' + (itemTotal > 0 ? itemTotal.toLocaleString() : '-') + '</td>';
        html += '<td><span class="item-source-badge ' + badgeClass + '">' + priceSource + '</span></td>';
        html += '</tr>';
    });

    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üí∞ Total Amount:', totalAmount.toLocaleString());
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

    html += '</tbody></table></div>' +
        '<div class="order-footer">' +
        '<div class="order-total">üí∞ ‡∫•‡∫ß‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î: ' + totalAmount.toLocaleString() + ' ‡∫Å‡∫µ‡∫ö</div>' +
        '</div></div>';

    return html;
}


 function saveAndPrint() {
    if (orderItems.length === 0) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡∫•‡∫ª‡∫á‡ªÉ‡∫ô‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫Å‡ªà‡∫≠‡∫ô');
        return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Å‡πà‡∏≠‡∏ô
    showColumnSelectionModal();
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô Print
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showColumnSelectionModal() {
    const modal = document.createElement('div');
    modal.id = 'columnSelectionModal';
    modal.className = 'store-selector-modal show';
    
    modal.innerHTML = '<div class="store-selector-content" style="max-width: 500px;">' +
        '<div class="store-selector-header">üñ®Ô∏è ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫Ñ‡ªç‡∫•‡ªç‡∫≤‡∫ó‡∫µ‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫õ‡∫¥‡∫î‡∫ö‡∫±‡∫á</div>' +
        '<div style="padding: 20px;">' +
        '<p style="margin-bottom: 15px; color: #666;">‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫Ñ‡ªç‡∫•‡ªç‡∫≤‡∫ó‡∫µ‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫á‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫õ‡∫∂‡∫°:</p>' +
        '<div class="column-checkbox-list">' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="index"> <span>‡∫•‡∫≥‡∫î‡∫±‡∫ö</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="barcode"> <span>‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="image"> <span>‡∫Æ‡∫π‡∫ö‡∫û‡∫≤‡∫ö</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="itemName"> <span>‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="quantity"> <span>‡∫à‡∫≥‡∫ô‡∫ß‡∫ô</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="price"> <span>‡∫•‡∫≤‡∫Ñ‡∫≤/‡ªú‡ªà‡∫ß‡∫ç</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="total"> <span>‡∫•‡∫ß‡∫°‡ªÄ‡∫á‡∫¥‡∫ô</span>' +
        '</label>' +
        '</div>' +
        '</div>' +
        '<div class="store-selector-actions">' +
        '<button class="btn-cancel-stores" onclick="closeColumnSelectionModal()">‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>' +
        '<button class="btn-confirm-stores" onclick="confirmColumnSelectionAndPrint()">‚úÖ ‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô ‡ªÅ‡∫•‡∫∞ ‡∫õ‡∫∂‡∫°</button>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) closeColumnSelectionModal();
    });
}
/**
 * ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function closeColumnSelectionModal() {
    const modal = document.getElementById('columnSelectionModal');
    if (modal) modal.remove();
}
function confirmColumnSelectionAndPrint() {
    const checkboxes = document.querySelectorAll('#columnSelectionModal input[type="checkbox"]:checked');
    const hiddenColumns = [];
    
    checkboxes.forEach(function(checkbox) {
        hiddenColumns.push(checkbox.value);
    });
    
    closeColumnSelectionModal();
    
    // ‚≠ê ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• hiddenColumns ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô sessionStorage
    sessionStorage.setItem('printHiddenColumns', JSON.stringify(hiddenColumns));
    
    executePrint(hiddenColumns);
}
/**
 * ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Print ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô)
 */
function executePrint(hiddenColumns) {
    // ‡πÅ‡∏™‡∏î‡∏á Loading Animation - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    showImageLoadingAnimation();
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    waitForAllImagesToLoad(function() {
        // ‡∏ã‡πà‡∏≠‡∏ô Loading Animation
        hideImageLoadingAnimation();
        
        // ‚≠ê ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 300ms ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏¥‡πâ‡∏ô
        setTimeout(function() {
            proceedWithPrint(hiddenColumns);
        }, 300);
    });
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function waitForAllImagesToLoad(callback) {
    const orderTableBody = document.getElementById('orderTableBody');
    if (!orderTableBody) {
        callback();
        return;
    }
    
    // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const images = orderTableBody.querySelectorAll('.order-table-img');
    
    if (images.length === 0) {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ ‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        callback();
        return;
    }
    
    let loadedCount = 0;
    let totalImages = images.length;
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    function checkAllLoaded() {
        loadedCount++;
        updateImageLoadingProgress(loadedCount, totalImages);
        
        if (loadedCount >= totalImages) {
            // ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 500ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏£‡∏ö
            setTimeout(callback, 500);
        }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ
    images.forEach(function(img) {
        if (img.complete && img.naturalHeight !== 0) {
            // ‡∏£‡∏π‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
            checkAllLoaded();
        } else {
            // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
            img.onload = checkAllLoaded;
            img.onerror = function() {
                console.warn('Image failed to load:', img.src);
                checkAllLoaded(); // ‡∏ô‡∏±‡∏ö‡πÅ‡∏°‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            };
        }
    });
}

/**
 * ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Print ‡∏à‡∏£‡∏¥‡∏á (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà - ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å executePrint)
 */
/**
 * ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Print ‡∏à‡∏£‡∏¥‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Print ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô)
 */
function proceedWithPrint(hiddenColumns) {
    const now = new Date();
    const dateStr = now.toLocaleDateString('lo-LA');
    const timeStr = now.toLocaleTimeString('lo-LA');
    const total = orderItems.reduce(function(sum, item) {
        return sum + item.total;
    }, 0);
    
    const hideIndex = hiddenColumns.includes('index');
    const hideBarcode = hiddenColumns.includes('barcode');
    const hideImage = hiddenColumns.includes('image');
    const hideItemName = hiddenColumns.includes('itemName');
    const hideQuantity = hiddenColumns.includes('quantity');
    const hidePrice = hiddenColumns.includes('price');
    const hideTotal = hiddenColumns.includes('total');
    
    let tableHeader = '<tr>' +
        '<th style="width: 50px;">‡∫•‡∫≥‡∫î‡∫±‡∫ö</th>' +
        '<th style="width: 120px;">‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</th>' +
        '<th style="width: 80px;">‡∫Æ‡∫π‡∫ö</th>' +
        '<th>‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</th>' +
        '<th style="width: 100px;">‡∫à‡∫≥‡∫ô‡∫ß‡∫ô</th>' +
        '<th style="width: 100px;">‡∫•‡∫≤‡∫Ñ‡∫≤/‡ªú‡ªà‡∫ß‡∫ç</th>' +
        '<th style="width: 120px;">‡∫•‡∫ß‡∫°‡ªÄ‡∫á‡∫¥‡∫ô</th>' +
        '</tr>';
    
    let itemsRows = '';
    orderItems.forEach(function(item, index) {
        const imgTag = item.image ? 
            '<img src="' + item.image + '" class="order-table-img" style="width: 60px; height: 60px; object-fit: cover; border-radius: 5px;">' : 
            '<div style="width: 60px; height: 60px; background: #f0f0f0; border-radius: 5px; display: flex; align-items: center; justify-content: center; font-size: 1.5rem;">üì∑</div>';
        
        itemsRows += '<tr>';
        itemsRows += '<td style="text-align: center; padding: 10px; border: 1px solid #ddd;">' + (hideIndex ? '&nbsp;' : (index + 1)) + '</td>';
        itemsRows += '<td style="padding: 10px; border: 1px solid #ddd;">' + (hideBarcode ? '&nbsp;' : item.barcode) + '</td>';
        itemsRows += '<td style="text-align: center; padding: 10px; border: 1px solid #ddd;">' + (hideImage ? '&nbsp;' : imgTag) + '</td>';
        itemsRows += '<td style="padding: 10px; border: 1px solid #ddd;">' + (hideItemName ? '&nbsp;' : item.itemName) + '</td>';
        itemsRows += '<td style="text-align: center; padding: 10px; border: 1px solid #ddd;">' + (hideQuantity ? '&nbsp;' : (item.quantity + ' ' + item.unit)) + '</td>';
        itemsRows += '<td style="text-align: right; padding: 10px; border: 1px solid #ddd;">' + (hidePrice ? '&nbsp;' : item.price.toLocaleString()) + '</td>';
        itemsRows += '<td style="text-align: right; padding: 10px; border: 1px solid #ddd;">' + (hideTotal ? '&nbsp;' : item.total.toLocaleString()) + '</td>';
        itemsRows += '</tr>';
    });
    
    let totalRow = '<tr class="total-row">' +
        '<td colspan="6" style="text-align: right; padding: 15px;">‡∫•‡∫ß‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î:</td>' +
        '<td style="text-align: right; padding: 15px;">' + (hideTotal ? '&nbsp;' : (total.toLocaleString() + ' ‡∫Å‡∫µ‡∫ö')) + '</td>' +
        '</tr>';
    
    // ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏û‡∏£‡πâ‡∏≠‡∏° Script ‡∏£‡∏≠‡∏£‡∏π‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö
    const printContent = '<!DOCTYPE html><html><head><meta charset="UTF-8"><title>‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤ - ' + currentOrderNumber + '</title><style>body { font-family: "Noto Sans Lao", Arial, sans-serif; padding: 20px; }.header { text-align: center; margin-bottom: 30px; }.header h1 { color: #4facfe; margin: 0; font-size: 2rem; }.info-section { margin-bottom: 20px; }.info-section p { margin: 5px 0; font-size: 1rem; }table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }thead { background: #2c3e50 !important; color: white !important; -webkit-print-color-adjust: exact; print-color-adjust: exact; }th { padding: 12px; border: 1px solid #ddd; font-weight: bold; color: white !important; background: #2c3e50 !important; -webkit-print-color-adjust: exact; print-color-adjust: exact; }td { padding: 10px; border: 1px solid #ddd; }tbody tr:nth-child(even) { background: #f9f9f9; }.total-row { background: #f0f0f0; font-weight: bold; font-size: 1.2em; }.signature-section { margin-top: 50px; display: flex; justify-content: space-around; }.signature-box { text-align: center; }.signature-line { margin-top: 50px; border-top: 1px solid #333; padding-top: 5px; }@media print { body { padding: 10px; }thead { background: #2c3e50 !important; -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important; }th { background: #2c3e50 !important; color: white !important; -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important; }}</style></head><body><div class="header"><h1>üè¢ ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</h1></div><div class="info-section"><p><strong>‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ:</strong> ' + currentOrderNumber + '</p><p><strong>‡∫ß‡∫±‡∫ô‡∫ó‡∫µ:</strong> ' + dateStr + ' ' + timeStr + '</p></div><table><thead>' + tableHeader + '</thead><tbody>' + itemsRows + totalRow + '</tbody></table><div class="signature-section"><div class="signature-box"><p>‡∫•‡∫≤‡∫ç‡ªÄ‡∫ä‡∫±‡∫ô‡∫ú‡∫π‡ªâ‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ</p><div class="signature-line">_________________</div></div><div class="signature-box"><p>‡∫•‡∫≤‡∫ç‡ªÄ‡∫ä‡∫±‡∫ô‡∫ú‡∫π‡ªâ‡∫≠‡∫∞‡∫ô‡∫∏‡∫°‡∫±‡∫î</p><div class="signature-line">_________________</div></div></div>' +
    '<script>' +
    'function waitForImagesToLoad() {' +
        'var images = document.querySelectorAll(".order-table-img");' +
        'if (images.length === 0) {' +
            'setTimeout(function() { window.print(); }, 500);' +
            'return;' +
        '}' +
        'var loadedCount = 0;' +
        'var totalImages = images.length;' +
        'function checkIfAllLoaded() {' +
            'loadedCount++;' +
            'if (loadedCount >= totalImages) {' +
                'setTimeout(function() { window.print(); }, 800);' +
            '}' +
        '}' +
        'for (var i = 0; i < images.length; i++) {' +
            'if (images[i].complete && images[i].naturalHeight !== 0) {' +
                'checkIfAllLoaded();' +
            '} else {' +
                'images[i].onload = checkIfAllLoaded;' +
                'images[i].onerror = checkIfAllLoaded;' +
            '}' +
        '}' +
    '}' +
    'window.onload = function() { setTimeout(waitForImagesToLoad, 300); };' +
    '<\/script></body></html>';
    
    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    const printWindow = window.open('', '_blank');
    printWindow.document.open();
    printWindow.document.write(printContent);
    printWindow.document.close();
    
    // ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    setTimeout(function() {
        try {
            printWindow.close();
        } catch(e) {
            console.log('Cannot close print window:', e);
        }
        
        showPrintConfirmationModal();
    }, 3000);
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á Animation ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function showImageLoadingAnimation() {
    const existingOverlay = document.getElementById('imageLoadingOverlay');
    if (existingOverlay) {
        existingOverlay.remove();
    }
    
    const overlay = document.createElement('div');
    overlay.id = 'imageLoadingOverlay';
    overlay.className = 'loading-overlay show';
    
    overlay.innerHTML = '<div class="loading-content">' +
        '<div class="loading-spinner"></div>' +
        '<div class="loading-text">üñºÔ∏è ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫º‡∫î‡∫Æ‡∫π‡∫ö‡∫û‡∫≤‡∫ö...</div>' +
        '<div id="imageLoadingProgress" class="loading-subtext">0 / 0 ‡∫Æ‡∫π‡∫ö</div>' +
        '</div>';
    
    document.body.appendChild(overlay);
}

/**
 * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function updateImageLoadingProgress(loaded, total) {
    const progressElement = document.getElementById('imageLoadingProgress');
    if (progressElement) {
        progressElement.textContent = loaded + ' / ' + total + ' ‡∫Æ‡∫π‡∫ö';
    }
}

/**
 * ‡∏ã‡πà‡∏≠‡∏ô Animation ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function hideImageLoadingAnimation() {
    const overlay = document.getElementById('imageLoadingOverlay');
    if (overlay) {
        overlay.classList.add('fade-out');
        setTimeout(function() {
            overlay.remove();
        }, 300);
    }
}

function saveAndWhatsapp() {
    if (orderItems.length === 0) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡∫•‡∫ª‡∫á‡ªÉ‡∫ô‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫Å‡ªà‡∫≠‡∫ô');
        return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö Print)
    showColumnSelectionModalForWhatsApp();
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á WhatsApp
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showColumnSelectionModalForWhatsApp() {
    const modal = document.createElement('div');
    modal.id = 'columnSelectionModalWhatsApp';
    modal.className = 'store-selector-modal show';
    
    modal.innerHTML = '<div class="store-selector-content" style="max-width: 500px;">' +
        '<div class="store-selector-header">üì± ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫Ñ‡ªç‡∫•‡ªç‡∫≤‡∫ó‡∫µ‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫õ‡∫¥‡∫î‡∫ö‡∫±‡∫á (WhatsApp)</div>' +
        '<div style="padding: 20px;">' +
        '<p style="margin-bottom: 15px; color: #666;">‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫Ñ‡ªç‡∫•‡ªç‡∫≤‡∫ó‡∫µ‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫á‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á WhatsApp:</p>' +
        '<div class="column-checkbox-list">' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="index"> <span>‡∫•‡∫≥‡∫î‡∫±‡∫ö</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="barcode"> <span>‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="image"> <span>‡∫Æ‡∫π‡∫ö‡∫û‡∫≤‡∫ö</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="itemName"> <span>‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="quantity"> <span>‡∫à‡∫≥‡∫ô‡∫ß‡∫ô</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="price"> <span>‡∫•‡∫≤‡∫Ñ‡∫≤/‡ªú‡ªà‡∫ß‡∫ç</span>' +
        '</label>' +
        '<label class="column-checkbox-item">' +
        '<input type="checkbox" value="total"> <span>‡∫•‡∫ß‡∫°‡ªÄ‡∫á‡∫¥‡∫ô</span>' +
        '</label>' +
        '</div>' +
        '</div>' +
        '<div class="store-selector-actions">' +
        '<button class="btn-cancel-stores" onclick="closeColumnSelectionModalForWhatsApp()">‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>' +
        '<button class="btn-confirm-stores" onclick="confirmColumnSelectionForWhatsApp()">‚úÖ ‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô ‡ªÅ‡∫•‡∫∞ ‡∫™‡∫ª‡ªà‡∫á WhatsApp</button>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) closeColumnSelectionModalForWhatsApp();
    });
}
/**
 * ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WhatsApp
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function closeColumnSelectionModalForWhatsApp() {
    const modal = document.getElementById('columnSelectionModalWhatsApp');
    if (modal) modal.remove();
}
/**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Modal ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function confirmColumnSelectionForWhatsApp() {
    // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∞‡∏ã‡πà‡∏≠‡∏ô
    const checkboxes = document.querySelectorAll('#columnSelectionModalWhatsApp input[type="checkbox"]:checked');
    const hiddenColumns = [];
    
    checkboxes.forEach(function(checkbox) {
        hiddenColumns.push(checkbox.value);
    });
    
    closeColumnSelectionModalForWhatsApp();
    
    // ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô
    showWhatsAppPhoneModalWithColumns(hiddenColumns);
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WhatsApp ‡∏û‡∏£‡πâ‡∏≠‡∏° Auto-Complete (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° Dropdown)
 */
function showWhatsAppPhoneModalWithColumns(hiddenColumns) {
    const modal = document.createElement('div');
    modal.id = 'whatsappPhoneModal';
    modal.className = 'store-selector-modal show';
    
    modal.innerHTML = '<div class="store-selector-content" style="max-width: 450px;">' +
        '<div class="store-selector-header">üì± ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫•‡∫∞‡∫™‡∫±‡∫ö WhatsApp</div>' +
        '<div style="margin: 20px 0; position: relative;">' +
        '<div style="display: flex; gap: 10px; align-items: center;">' +
        '<div style="background: #25d366; color: white; padding: 12px 15px; border-radius: 8px; font-size: 1.1rem; font-weight: bold;">+856</div>' +
        '<input type="tel" id="whatsappPhoneInput" class="store-search-input" placeholder="‡∫û‡∫¥‡∫°‡ªÄ‡∫ö‡∫µ ‡∫´‡∫º‡∫∑ ‡∫ä‡∫∑‡ªà‡∫Æ‡ªâ‡∫≤‡∫ô..." maxlength="10" style="flex: 1; margin: 0;" autocomplete="off">' +
        '</div>' +
        '<div id="phoneDropdown" style="display: none; position: absolute; top: 100%; left: 50px; right: 0; background: white; border: 2px solid #25d366; border-radius: 8px; max-height: 200px; overflow-y: auto; z-index: 1000; margin-top: 5px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);"></div>' +
        '<div style="margin-top: 10px; font-size: 0.9rem; color: #666;">‡∫ï‡∫ª‡∫ß‡∫¢‡ªà‡∫≤‡∫á: 2055512345 (10 ‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å)</div>' +
        '</div>' +
        '<div class="store-selector-actions">' +
        '<button class="btn-cancel-stores" onclick="closeWhatsAppPhoneModal()">‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>' +
        '<button id="confirmWhatsAppBtn" class="btn-confirm-stores" onclick="confirmWhatsAppSendWithPDF()" disabled>‡∫™‡∫ª‡ªà‡∫á WhatsApp</button>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ
    modal.dataset.hiddenColumns = JSON.stringify(hiddenColumns);
    
    const phoneInput = document.getElementById('whatsappPhoneInput');
    const phoneDropdown = document.getElementById('phoneDropdown');
    const confirmBtn = document.getElementById('confirmWhatsAppBtn');
    
    // Focus ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå
    setTimeout(function() {
        phoneInput.focus();
    }, 100);
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Dropdown
    function filterAndShowDropdown() {
        const query = phoneInput.value.trim().toLowerCase();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°
        validatePhoneNumber();
        
        if (!query) {
            phoneDropdown.style.display = 'none';
            return;
        }
        
        // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const filtered = phoneNumberList.filter(function(item) {
            const phoneMatch = item.phone.includes(query);
            const storeMatch = item.store.toLowerCase().includes(query);
            return phoneMatch || storeMatch;
        });
        
        if (filtered.length === 0) {
            phoneDropdown.style.display = 'none';
            return;
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dropdown
        let dropdownHTML = '';
        filtered.forEach(function(item) {
            dropdownHTML += '<div class="phone-dropdown-item" data-phone="' + item.phone + '" style="padding: 12px; cursor: pointer; border-bottom: 1px solid #f0f0f0; transition: background 0.2s;">' +
                '<div style="font-weight: bold; color: #333;">' + item.store + '</div>' +
                '<div style="font-size: 0.9rem; color: #666;">üìû ' + item.phone + '</div>' +
                '</div>';
        });
        
        phoneDropdown.innerHTML = dropdownHTML;
        phoneDropdown.style.display = 'block';
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        const items = phoneDropdown.querySelectorAll('.phone-dropdown-item');
        items.forEach(function(item) {
            item.addEventListener('mouseenter', function() {
                this.style.background = '#e3f2fd';
            });
            item.addEventListener('mouseleave', function() {
                this.style.background = 'white';
            });
            item.addEventListener('click', function() {
                const selectedPhone = this.dataset.phone;
                phoneInput.value = selectedPhone;
                phoneDropdown.style.display = 'none';
                validatePhoneNumber();
                phoneInput.focus();
            });
        });
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Validate ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    function validatePhoneNumber() {
        const phone = phoneInput.value.trim();
        const isValid = /^\d{10}$/.test(phone);
        
        if (isValid) {
            confirmBtn.disabled = false;
            confirmBtn.style.opacity = '1';
            confirmBtn.style.cursor = 'pointer';
            phoneInput.style.borderColor = '#25d366';
        } else {
            confirmBtn.disabled = true;
            confirmBtn.style.opacity = '0.5';
            confirmBtn.style.cursor = 'not-allowed';
            phoneInput.style.borderColor = '#e0e0e0';
        }
    }
    
    // Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Input
    phoneInput.addEventListener('input', filterAndShowDropdown);
    
    // Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Enter
    phoneInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !confirmBtn.disabled) {
            confirmWhatsAppSendWithPDF();
        }
    });
    
    // ‡∏õ‡∏¥‡∏î Dropdown ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å Modal
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeWhatsAppPhoneModal();
        }
        if (!phoneDropdown.contains(e.target) && e.target !== phoneInput) {
            phoneDropdown.style.display = 'none';
        }
    });
}
/**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á WhatsApp ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function confirmWhatsAppSendWithPDF() {
    const phoneInput = document.getElementById('whatsappPhoneInput');
    const phoneNumber = phoneInput.value.trim();
    
    if (!phoneNumber) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫•‡∫∞‡∫™‡∫±‡∫ö');
        phoneInput.focus();
        return;
    }
    
    if (!/^\d+$/.test(phoneNumber)) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫•‡∫∞‡∫™‡∫±‡∫ö‡ªÄ‡∫õ‡∫±‡∫ô‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô');
        phoneInput.focus();
        return;
    }
    
    if (phoneNumber.length < 8 || phoneNumber.length > 10) {
        alert('‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫•‡∫∞‡∫™‡∫±‡∫ö‡∫ï‡ªâ‡∫≠‡∫á‡∫°‡∫µ 8-10 ‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å');
        phoneInput.focus();
        return;
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô
    const modal = document.getElementById('whatsappPhoneModal');
    const hiddenColumns = JSON.parse(modal.dataset.hiddenColumns || '[]');
    
    closeWhatsAppPhoneModal();
    
    const fullPhoneNumber = '856' + phoneNumber;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ PDF ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á WhatsApp
    generatePDFAndSendWhatsApp(fullPhoneNumber, hiddenColumns);
}
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô WhatsApp (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ pdfMake ‡πÅ‡∏ó‡∏ô)
 */
function generatePDFAndSendWhatsApp(phoneNumber, hiddenColumns) {
    const pdfWindow = window.open('', 'pdfWindow');
    
    const loadingContent = '<!DOCTYPE html><html><head><meta charset="UTF-8"><title>‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡ªâ‡∫≤‡∫á PDF...</title><style>body { font-family: "Noto Sans Lao", Arial, sans-serif; padding: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; display: flex; align-items: center; justify-content: center; margin: 0; }.container { background: white; border-radius: 20px; padding: 40px; text-align: center; box-shadow: 0 20px 60px rgba(0,0,0,0.3); max-width: 600px; }.loading-spinner { width: 80px; height: 80px; border: 6px solid #f3f3f3; border-top: 6px solid #25d366; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 30px; }@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }.loading-text { font-size: 1.5rem; font-weight: bold; color: #25d366; margin-bottom: 15px; }.loading-subtext { font-size: 1rem; color: #666; }.success-content { display: none; }.success-icon { font-size: 5rem; margin-bottom: 20px; }.success-title { font-size: 1.8rem; font-weight: bold; color: #4caf50; margin-bottom: 15px; }.pdf-info { background: #f0f0f0; padding: 15px; border-radius: 10px; margin: 20px 0; font-size: 0.95rem; color: #333; }.whatsapp-btn { display: inline-block; padding: 15px 40px; background: linear-gradient(135deg, #25d366 0%, #128c7e 100%); color: white; text-decoration: none; border-radius: 10px; font-size: 1.2rem; font-weight: bold; margin-top: 20px; transition: all 0.3s; box-shadow: 0 4px 15px rgba(37, 211, 102, 0.4); cursor: pointer; border: none; }.whatsapp-btn:hover { transform: translateY(-2px); box-shadow: 0 6px 20px rgba(37, 211, 102, 0.6); }</style></head><body><div class="container"><div id="loadingContent"><div class="loading-spinner"></div><div class="loading-text">‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡ªâ‡∫≤‡∫á‡ªÑ‡∫ü‡∫•‡ªå PDF...</div><div class="loading-subtext">‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫™‡∫±‡∫Å‡∫Ñ‡∫π‡ªà</div></div><div id="successContent" class="success-content"><div class="success-icon">‚úÖ</div><div class="success-title">‡∫™‡ªâ‡∫≤‡∫á PDF ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î!</div><div class="pdf-info"><strong>‡∫ä‡∫∑‡ªà‡ªÑ‡∫ü‡∫•‡ªå:</strong> <span id="pdfFileName"></span><br><strong>‡∫ö‡ªà‡∫≠‡∫ô‡ªÄ‡∫Å‡∫±‡∫ö‡ªÑ‡∫ß‡ªâ:</strong> Google Drive</div><button id="whatsappBtn" class="whatsapp-btn">üì± ‡ªÄ‡∫õ‡∫µ‡∫î WhatsApp Web ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫™‡∫ª‡ªà‡∫á‡ªÑ‡∫ü‡∫•‡ªå</button></div></div></body></html>';
    
    pdfWindow.document.open();
    pdfWindow.document.write(loadingContent);
    pdfWindow.document.close();
    
    // ‚≠ê ‡πÉ‡∏ä‡πâ pdfMake ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
    createPDFFromTableData(hiddenColumns, function(result) {
        if (!result.success) {
            alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡ªâ‡∫≤‡∫á PDF');
            pdfWindow.close();
            return;
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF ‡πÑ‡∏õ Drive
        uploadPDFToDrive(result.blob, result.fileName, function(uploadResult) {
            if (uploadResult.success) {
                const loadingDiv = pdfWindow.document.getElementById('loadingContent');
                const successDiv = pdfWindow.document.getElementById('successContent');
                const fileNameSpan = pdfWindow.document.getElementById('pdfFileName');
                const whatsappBtn = pdfWindow.document.getElementById('whatsappBtn');
                
                if (loadingDiv) loadingDiv.style.display = 'none';
                if (successDiv) successDiv.style.display = 'block';
                if (fileNameSpan) fileNameSpan.textContent = uploadResult.fileName;
                
                const now = new Date();
                const dateStr = now.toLocaleDateString('lo-LA');
                const timeStr = now.toLocaleTimeString('lo-LA');
                
                const message = 'üì± ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤\n' +
                    '‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ: ' + currentOrderNumber + '\n' +
                    '‡∫ß‡∫±‡∫ô‡∫ó‡∫µ: ' + dateStr + ' ' + timeStr + '\n\n' +
                    'üìÑ ‡ªÄ‡∫ö‡∫¥‡ªà‡∫á‡ªÑ‡∫ü‡∫•‡ªå PDF: ' + uploadResult.fileUrl;
                
                const whatsappUrl = 'https://web.whatsapp.com/send?phone=' + phoneNumber + '&text=' + encodeURIComponent(message);
                
                if (whatsappBtn) {
                    whatsappBtn.onclick = function() {
                        window.open(whatsappUrl, '_blank');
                        
                        setTimeout(function() {
                            pdfWindow.close();
                        }, 500);
                        
                        setTimeout(function() {
                            if (window.opener) {
                                window.opener.showWhatsAppConfirmationModal();
                            } else {
                                showWhatsAppConfirmationModal();
                            }
                        }, 1000);
                    };
                }
            } else {
                alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫≠‡∫±‡∫ö‡ªÇ‡∫´‡∫º‡∫î PDF: ' + uploadResult.error);
                pdfWindow.close();
            }
        });
    });
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á WhatsApp
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showWhatsAppConfirmationModal() {
    const modal = document.createElement('div');
    modal.id = 'whatsappConfirmModal';
    modal.className = 'store-selector-modal show';
    
    modal.innerHTML = '<div class="store-selector-content" style="max-width: 450px;">' +
        '<div class="store-selector-header">‚úÖ ‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å</div>' +
        '<div style="padding: 20px; text-align: center;">' +
        '<p style="font-size: 1.1rem; margin-bottom: 20px;">‡∫™‡∫ª‡ªà‡∫á WhatsApp ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß‡∫ö‡ªç?</p>' +
        '<p style="font-size: 0.95rem; color: #666;">‡∫Å‡∫ª‡∫î‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫•‡∫ª‡∫á‡ªÉ‡∫ô‡∫•‡∫∞‡∫ö‡∫ª‡∫ö</p>' +
        '</div>' +
        '<div class="store-selector-actions">' +
        '<button class="btn-cancel-stores" onclick="closeWhatsAppConfirmationModal()">‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>' +
        '<button class="btn-confirm-stores" onclick="confirmWhatsAppSave()">‚úÖ ‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å</button>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) closeWhatsAppConfirmationModal();
    });
}
/**
 * ‡∏õ‡∏¥‡∏î Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å WhatsApp
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function closeWhatsAppConfirmationModal() {
    const modal = document.getElementById('whatsappConfirmModal');
    if (modal) modal.remove();
}
/**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á WhatsApp
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function confirmWhatsAppSave() {
    closeWhatsAppConfirmationModal();
    
    showSavingAnimation();
    
    const isLoadedOrder = document.getElementById('currentOrderNumber').dataset.isLoaded === 'true';
    
    const orderData = {
        orderNumber: currentOrderNumber,
        items: orderItems,
        method: 'WHATSAPP',
        isUpdate: isLoadedOrder
    };
    
    google.script.run
        .withSuccessHandler(function(result) {
            if (result.success) {
                showSuccessAnimation();
                
                setTimeout(function() {
                    hideSavingAnimation();
                    
                    orderItems = [];
                    selectedItemsForOrder.clear();
                    updateOrderTable();
                    
                    const compareSection = document.getElementById('compareSection');
                    if (compareSection) compareSection.style.display = 'none';
                    
                    currentOrderNumber = generateOrderNumber();
                    const orderNumberElement = document.getElementById('currentOrderNumber');
                    orderNumberElement.textContent = currentOrderNumber;
                    orderNumberElement.dataset.isLoaded = 'false';
                }, 2000);
            } else {
                hideSavingAnimation();
                alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ' + result.error);
            }
        })
        .withFailureHandler(function(error) {
            hideSavingAnimation();
            alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å: ' + error.message);
        })
        .saveOrder(orderData);
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WhatsApp
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showWhatsAppPhoneModal() {
    const modal = document.createElement('div');
    modal.id = 'whatsappPhoneModal';
    modal.className = 'store-selector-modal show';
    
    modal.innerHTML = '<div class="store-selector-content" style="max-width: 450px;">' +
        '<div class="store-selector-header">üì± ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫•‡∫∞‡∫™‡∫±‡∫ö WhatsApp</div>' +
        '<div style="margin: 20px 0;">' +
        '<div style="display: flex; gap: 10px; align-items: center;">' +
        '<div style="background: #25d366; color: white; padding: 12px 15px; border-radius: 8px; font-size: 1.1rem; font-weight: bold;">+856</div>' +
        '<input type="tel" id="whatsappPhoneInput" class="store-search-input" placeholder="20 XXXX XXXX" maxlength="10" style="flex: 1; margin: 0;">' +
        '</div>' +
        '<div style="margin-top: 10px; font-size: 0.9rem; color: #666;">‡∫ï‡∫ª‡∫ß‡∫¢‡ªà‡∫≤‡∫á: 2055512345 (‡∫ö‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡ªÉ‡∫™‡ªà 856)</div>' +
        '</div>' +
        '<div class="store-selector-actions">' +
        '<button class="btn-cancel-stores" onclick="closeWhatsAppPhoneModal()">‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>' +
        '<button class="btn-confirm-stores" onclick="confirmWhatsAppSend()">‡∫™‡∫ª‡ªà‡∫á WhatsApp</button>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    
    // Focus ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå
    setTimeout(function() {
        document.getElementById('whatsappPhoneInput').focus();
    }, 100);
    
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î Enter
    document.getElementById('whatsappPhoneInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            confirmWhatsAppSend();
        }
    });
    
    // ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å content
    modal.addEventListener('click', function(e) {
        if (e.target === modal) closeWhatsAppPhoneModal();
    });
}
/**
 * ‡∏õ‡∏¥‡∏î Modal ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå WhatsApp
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function closeWhatsAppPhoneModal() {
    const modal = document.getElementById('whatsappPhoneModal');
    if (modal) modal.remove();
}
/**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á WhatsApp
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function confirmWhatsAppSend() {
    const phoneInput = document.getElementById('whatsappPhoneInput');
    const phoneNumber = phoneInput.value.trim();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    if (!phoneNumber) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫•‡∫∞‡∫™‡∫±‡∫ö');
        phoneInput.focus();
        return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (!/^\d+$/.test(phoneNumber)) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫•‡∫∞‡∫™‡∫±‡∫ö‡ªÄ‡∫õ‡∫±‡∫ô‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô');
        phoneInput.focus();
        return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (8-10 ‡∏´‡∏•‡∏±‡∏Å)
    if (phoneNumber.length < 8 || phoneNumber.length > 10) {
        alert('‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫•‡∫∞‡∫™‡∫±‡∫ö‡∫ï‡ªâ‡∫≠‡∫á‡∫°‡∫µ 8-10 ‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å');
        phoneInput.focus();
        return;
    }
    
    // ‡∏õ‡∏¥‡∏î Modal
    closeWhatsAppPhoneModal();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏ï‡πá‡∏°: 856 + ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
    const fullPhoneNumber = '856' + phoneNumber;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const message = generateWhatsAppMessage();
    const whatsappUrl = 'https://wa.me/' + fullPhoneNumber + '?text=' + encodeURIComponent(message);
    
    // ‡πÄ‡∏õ‡∏¥‡∏î WhatsApp
    window.open(whatsappUrl, '_blank');
    
    // ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    setTimeout(function() {
        if (confirm('‡∫™‡∫ª‡ªà‡∫á WhatsApp ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß‡∫ö‡ªç? ‡∫Å‡∫ª‡∫î‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô')) {
            saveOrderToSheet('WHATSAPP');
        }
    }, 2000);
}

    function generateWhatsAppMessage() {
        const total = orderItems.reduce(function(sum, item) {
            return sum + item.total;
        }, 0);
        const now = new Date();
        const dateStr = now.toLocaleDateString('lo-LA');
        
        let message = 'üßæ *‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤*\n';
        message += '‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ: ' + currentOrderNumber + '\n';
        message += '‡∫ß‡∫±‡∫ô‡∫ó‡∫µ: ' + dateStr + '\n\n';
        message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
        
        orderItems.forEach(function(item, index) {
            message += (index + 1) + 'Ô∏è‚É£ ' + item.itemName + '\n';
            message += '   ‚Ä¢ ‡∫•‡∫∞‡∫´‡∫±‡∫î: ' + item.barcode + '\n';
            message += '   ‚Ä¢ ‡∫à‡∫≥‡∫ô‡∫ß‡∫ô: ' + item.quantity + ' ' + item.unit + '\n';
            message += '   ‚Ä¢ ‡∫•‡∫≤‡∫Ñ‡∫≤: ' + item.total.toLocaleString() + ' ‡∫Å‡∫µ‡∫ö\n\n';
        });
        
        message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
        message += 'üí∞ *‡∫•‡∫ß‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î: ' + total.toLocaleString() + ' ‡∫Å‡∫µ‡∫ö*';
        
        return message;
    }

  function saveOrderToSheet(method) {
    if (orderItems.length === 0) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡∫•‡∫ª‡∫á‡ªÉ‡∫ô‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫Å‡ªà‡∫≠‡∫ô');
        return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á Saving Animation
    showSavingAnimation();
    
    const isLoadedOrder = document.getElementById('currentOrderNumber').dataset.isLoaded === 'true';
    
    const orderData = {
        orderNumber: currentOrderNumber,
        items: orderItems,
        method: method,
        isUpdate: isLoadedOrder
    };
    
    google.script.run
        .withSuccessHandler(function(result) {
            if (result.success) {
                // ‡πÅ‡∏™‡∏î‡∏á Success Animation
                showSuccessAnimation();
                
                // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                setTimeout(function() {
                    hideSavingAnimation();
                    
                    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    orderItems = [];
                    selectedItemsForOrder.clear();
                    updateOrderTable();
                    
                    const compareSection = document.getElementById('compareSection');
                    if (compareSection) compareSection.style.display = 'none';
                    
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                    currentOrderNumber = generateOrderNumber();
                    const orderNumberElement = document.getElementById('currentOrderNumber');
                    orderNumberElement.textContent = currentOrderNumber;
                    orderNumberElement.dataset.isLoaded = 'false';
                }, 2000);
            } else {
                hideSavingAnimation();
                alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ' + result.error);
            }
        })
        .withFailureHandler(function(error) {
            hideSavingAnimation();
            alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å: ' + error.message);
        })
        .saveOrder(orderData);
}

function showLoadOrderModal() {
    // ‡πÅ‡∏™‡∏î‡∏á Loading
    showLoadingOverlay('‡∫Å‡ªç‡∫≤‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫º‡∫î‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô...', '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫™‡∫±‡∫Å‡∫Ñ‡∫π‡ªà');
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    google.script.run
        .withSuccessHandler(function(orderList) {
            hideLoadingOverlay();
            
            if (!orderList || orderList.length === 0) {
                alert('‡∫ö‡ªç‡ªà‡∫°‡∫µ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡ªÄ‡∫Å‡∫ª‡ªà‡∫≤');
                return;
            }
            
            displayOrderSelectionModal(orderList);
        })
        .withFailureHandler(function(error) {
            hideLoadingOverlay();
            alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ' + error.message);
        })
        .getOrderList();
}

  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        if (lowStockModal && lowStockModal.classList.contains('show')) {
            closeLowStockModal();
        }
        
        const storeModal = document.getElementById('storeSelectorModal');
        if (storeModal) {
            closeStoreSelectorModal();
        }
    }
});

    /**
 * ========================================
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà - Copy ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô window.onload
 * ========================================
 */

/**
 * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î / ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
 */
function setDataMode(mode) {
    currentDataMode = mode;
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏õ‡∏∏‡πà‡∏°
    document.querySelectorAll('.data-mode-btn').forEach(function(btn) {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    selectedItemsForOrder.clear();
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    if (mode === 'lowStock') {
        checkLowStockAndShowAlert();
    } else {
        loadAllItemsData();
    }
    
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä view
    if (currentSearchMode === 'zone') {
        displayZoneView();
    } else {
        document.getElementById('lowStockContent').innerHTML = '<p style="text-align: center; color: #999;">‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤</p>';
        document.getElementById('searchInput').value = '';
    }
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)
 */
function loadAllItemsData() {
    if (!itemsData || itemsData.size === 0) return;
    
    const allItems = [];
    
    itemsData.forEach(function(item) {
        const stockRemaining = parseFloat(item.columnF) || 0;
        const reorderPoint = parseFloat(item.columnD) || 0;
        
        // ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        allItems.push({
            barcode: item.columnA || '',
            barcodeBox: item.columnJ || item.columnA || '',
            itemName: item.columnB || '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ä‡∫∑‡ªà',
            reorderPoint: reorderPoint,
            stockRemaining: stockRemaining,
            unit: item.columnH || '‡∫ä‡∫¥‡ªâ‡∫ô',
            quantityPerUnit: parseFloat(item.columnI) || 1,
            image: item.columnK || '',
            zone: item.columnM || '‡∫ö‡ªç‡ªà‡∫•‡∫∞‡∫ö‡∫∏‡ªÇ‡∫ä‡∫ô',
            price: parseFloat(item.columnN) || 0
        });
    });
    
    allItemsDataCache = groupItemsByZone(allItems);
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô
 */
function groupItemsByZone(items) {
    const grouped = {};
    
    items.forEach(function(item) {
        const zone = item.zone;
        const barcodeBox = item.barcodeBox || item.barcode;
        
        if (!grouped[zone]) {
            grouped[zone] = { zoneName: zone, products: {} };
        }
        
        if (!grouped[zone].products[barcodeBox]) {
            grouped[zone].products[barcodeBox] = {
                barcodeBox: barcodeBox,
                reorderPoint: item.reorderPoint,
                stockRemaining: item.stockRemaining,
                items: []
            };
        }
        
        grouped[zone].products[barcodeBox].items.push(item);
    });
    
    return grouped;
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢
 */
function calculateQuantityWithUnit(value, quantityPerUnit, unit) {
    if (!value || !quantityPerUnit || quantityPerUnit === 0) {
        return '0 ' + unit;
    }
    
    const result = value / quantityPerUnit;
    const formatted = result % 1 === 0 ? result.toFixed(0) : result.toFixed(2);
    
    return formatted + ' ' + unit;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
 */
function displaySearchResultsGrouped(results) {
    const content = document.getElementById('lowStockContent');
    
    if (results.length === 0) {
        content.innerHTML = '<p style="text-align: center; color: #999;">‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô</p>';
        return;
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° barcodeBox
    const grouped = {};
    results.forEach(function(item) {
        const key = item.barcodeBox;
        if (!grouped[key]) {
            grouped[key] = [];
        }
        grouped[key].push(item);
    });
    
    let html = '<div class="search-results">';
    const colors = ['color-1', 'color-2', 'color-3', 'color-4', 'color-5', 'color-6'];
    
    Object.keys(grouped).forEach(function(barcodeBox, groupIndex) {
        const group = grouped[barcodeBox];
        
        html += '<div class="product-group">';
        html += '<div class="product-group-header">';
        html += '<strong>üì¶ ‡∫•‡∫∞‡∫´‡∫±‡∫î‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡ªÇ‡∫ç‡∫á: ' + barcodeBox + '</strong>';
        html += '</div>';
        
        group.forEach(function(item, itemIndex) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            const isInOrder = orderItems.some(function(orderItem) {
                return orderItem.barcode === item.barcode;
            });
            
            // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á
            if (isInOrder) return;
            
            const isSelected = selectedItemsForOrder.has(item.barcode);
            const quantity = isSelected ? getItemQuantityFromOrder(item.barcode) : 1;
            const colorClass = colors[itemIndex % colors.length];
            
            const stockDisplay = calculateQuantityWithUnit(item.stockRemaining, item.quantityPerUnit, item.unit);
            const reorderDisplay = calculateQuantityWithUnit(item.reorderPoint, item.quantityPerUnit, item.unit);
            
            html += '<div class="selectable-item ' + colorClass + ' ' + (isSelected ? 'selected' : '') + '" data-barcode="' + item.barcode + '" onclick="handleItemCardClick(event, \'' + item.barcode + '\')">';
            html += '<input type="checkbox" class="item-checkbox" ' + (isSelected ? 'checked' : '') + ' onclick="event.stopPropagation(); toggleItemSelection(\'' + item.barcode + '\')">';
            
            if (item.image) {
                html += '<img src="' + item.image + '" class="item-image-small">';
            } else {
                html += '<div class="no-product-image">üì∑</div>';
            }
            
            html += '<div class="item-info-block">';
            html += '<div class="item-name-large">' + item.itemName + ' - ‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç: ' + item.unit + '</div>';
            html += '<div class="item-details-extended">';
            html += '‡∫•‡∫∞‡∫´‡∫±‡∫î: ' + item.barcode + ' | ‡ªÇ‡∫ä‡∫ô: ' + item.zone + '<br>';
            html += '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫Ñ‡∫ª‡∫á‡ªÄ‡∫´‡∫º‡∫∑‡∫≠: ' + stockDisplay + ' | ';
            html += '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô: ' + reorderDisplay;
            html += '</div>';
            html += '</div>';
            
            html += '<div class="item-quantity-container">';
            html += '<span class="quantity-label">‡∫à‡∫≥‡∫ô‡∫ß‡∫ô:</span>';
            html += '<input type="number" class="quantity-input" value="' + quantity + '" min="1" onclick="event.stopPropagation()" onchange="updateItemQuantity(\'' + item.barcode + '\', this.value)">';
            html += '</div>';
            html += '</div>';
        });
        
        html += '</div>';
    });
    
    html += '</div>';
    content.innerHTML = html;
}
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏ã‡∏ô (‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
 */
function generateZoneDetailsHTMLEnhanced(zoneData) {
    let html = '';
    let itemNumber = 1;
    const colors = ['color-1', 'color-2', 'color-3', 'color-4', 'color-5', 'color-6'];

    Object.entries(zoneData.products).forEach(function(entry) {
        const barcodeBox = entry[0];
        const productGroup = entry[1];
        
        html += '<div class="product-group">';
        html += '<div class="product-group-header">';
        html += '<strong>' + itemNumber + '. ‡∫•‡∫∞‡∫´‡∫±‡∫î‡ªÄ‡∫ä‡∫∑‡ªà‡∫≠‡∫°‡ªÇ‡∫ç‡∫á: ' + barcodeBox + '</strong>';
        html += '</div>';

        productGroup.items.forEach(function(item, index) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            const isInOrder = orderItems.some(function(orderItem) {
                return orderItem.barcode === item.barcode;
            });
            
            // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á
            if (isInOrder) return;
            
            const isSelected = selectedItemsForOrder.has(item.barcode);
            const orderQty = isSelected ? getItemQuantityFromOrder(item.barcode) : 1;
            const colorClass = colors[index % colors.length];
            
            const stockDisplay = calculateQuantityWithUnit(item.stockRemaining, item.quantityPerUnit, item.unit);
            const reorderDisplay = calculateQuantityWithUnit(item.reorderPoint, item.quantityPerUnit, item.unit);

            html += '<div class="product-item selectable-item ' + colorClass + ' ' + (isSelected ? 'selected' : '') + '" data-barcode="' + item.barcode + '" onclick="event.stopPropagation()">';
            html += '<input type="checkbox" class="item-checkbox" ' + (isSelected ? 'checked' : '') + ' onclick="event.stopPropagation(); toggleItemSelection(\'' + item.barcode + '\')">';
            
            if (item.image) {
                html += '<img src="' + item.image + '" class="product-image">';
            } else {
                html += '<div class="no-product-image">üì∑</div>';
            }
            
            html += '<div class="product-info">';
            html += '<div class="product-name">' + item.itemName + ' - ‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç: ' + item.unit + '</div>';
            html += '<div class="product-details">‡∫•‡∫∞‡∫´‡∫±‡∫î: ' + item.barcode + '</div>';
            html += '<div class="product-stock-detail">';
            html += '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫Ñ‡∫ª‡∫á‡ªÄ‡∫´‡∫º‡∫∑‡∫≠: ' + stockDisplay + ' | ';
            html += '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô: ' + reorderDisplay;
            html += '</div>';
            html += '</div>';
            
            html += '<div class="item-quantity-container">';
            html += '<span class="quantity-label">‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ:</span>';
            html += '<input type="number" class="quantity-input" value="' + orderQty + '" min="1" onclick="event.stopPropagation()" onchange="updateItemQuantity(\'' + item.barcode + '\', this.value)">';
            html += '</div>';
            html += '</div>';
        });

        html += '</div>';
        itemNumber++;
    });

    return html;
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (Dropdown ‡πÅ‡∏ö‡∏ö Autocomplete)
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
 */
function displayOrderSelectionModal(orderList) {
    const modal = document.createElement('div');
    modal.id = 'orderSelectionModal';
    modal.className = 'store-selector-modal show';
    
    let optionsHTML = '';
    orderList.forEach(function(order) {
        optionsHTML += '<div class="order-option-item" data-order="' + order.orderNumber + '" onclick="selectOrderFromList(\'' + order.orderNumber + '\')">' +
            '<div class="order-display-text">' + order.date + ' - ' + order.orderNumber + '</div>' +
            '<div class="order-item-count">' + order.itemCount + ' ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô</div>' +
            '</div>';
    });
    
    modal.innerHTML = '<div class="store-selector-content">' +
        '<div class="store-selector-header">üîÑ ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡ªÄ‡∫Å‡∫ª‡ªà‡∫≤</div>' +
        '<input type="text" id="orderSearchInput" class="store-search-input" placeholder="‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ ‡∫´‡∫º‡∫∑ ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ..." onkeyup="filterOrderList()">' +
        '<div class="store-list" id="orderListContainer">' + optionsHTML + '</div>' +
        '<div class="store-selector-actions">' +
        '<button class="btn-cancel-stores" onclick="closeOrderSelectionModal()">‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) closeOrderSelectionModal();
    });
}

/**
 * ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function filterOrderList() {
    const input = document.getElementById('orderSearchInput');
    const filter = input.value.toLowerCase();
    const container = document.getElementById('orderListContainer');
    const items = container.getElementsByClassName('order-option-item');
    
    for (let i = 0; i < items.length; i++) {
        const text = items[i].textContent || items[i].innerText;
        if (text.toLowerCase().indexOf(filter) > -1) {
            items[i].style.display = '';
        } else {
            items[i].style.display = 'none';
        }
    }
}
/**
 * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */

/**
 * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏•‡∏ö alert ‡∏≠‡∏≠‡∏Å)
 */
function selectOrderFromList(orderNumber) {
    closeOrderSelectionModal();
    
    // ‡πÅ‡∏™‡∏î‡∏á Loading
    showLoadingOverlay('‡∫Å‡ªç‡∫≤‡∫•‡∫±‡∫á‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô...', '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫™‡∫±‡∫Å‡∫Ñ‡∫π‡ªà');
    
    google.script.run
        .withSuccessHandler(function(result) {
            hideLoadingOverlay();
            
            if (result.success && result.items.length > 0) {
                // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
                orderItems = [];
                selectedItemsForOrder.clear();
                
                // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                orderItems = result.items;
                
                result.items.forEach(function(item) {
                    selectedItemsForOrder.add(item.barcode);
                });
                
                // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏¥‡∏°
                currentOrderNumber = orderNumber;
                const orderNumberElement = document.getElementById('currentOrderNumber');
                orderNumberElement.textContent = currentOrderNumber;
                orderNumberElement.dataset.isLoaded = 'true'; // ‡∏ï‡∏±‡πâ‡∏á flag ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏Å‡πà‡∏≤
                
                updateOrderTable();
                // ‡∏•‡∏ö alert ‡∏≠‡∏≠‡∏Å - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏•‡∏¢
            } else {
                alert('‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫ô‡∫µ‡ªâ');
            }
        })
        .withFailureHandler(function(error) {
            hideLoadingOverlay();
            alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ' + error.message);
        })
        .loadOrder(orderNumber);
}
/**
 * ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function closeOrderSelectionModal() {
    const modal = document.getElementById('orderSelectionModal');
    if (modal) modal.remove();
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á Loading Overlay
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showLoadingOverlay(mainText, subText) {
    // ‡∏•‡∏ö overlay ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const existingOverlay = document.getElementById('loadingOverlay');
    if (existingOverlay) {
        existingOverlay.remove();
    }
    
    const overlay = document.createElement('div');
    overlay.id = 'loadingOverlay';
    overlay.className = 'loading-overlay show';
    
    overlay.innerHTML = '<div class="loading-content">' +
        '<div class="loading-spinner"></div>' +
        '<div class="loading-text">' + mainText + '</div>' +
        '<div class="loading-subtext">' + subText + '</div>' +
        '</div>';
    
    document.body.appendChild(overlay);
}
/**
 * ‡∏ã‡πà‡∏≠‡∏ô Loading Overlay
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function hideLoadingOverlay() {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) {
        overlay.remove();
    }
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏á Print
 */
function showPrintConfirmationModal() {
    const modal = document.createElement('div');
    modal.id = 'printConfirmModal';
    modal.className = 'store-selector-modal show';
    
    modal.innerHTML = '<div class="store-selector-content" style="max-width: 450px;">' +
        '<div class="store-selector-header">‚úÖ ‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å</div>' +
        '<div style="padding: 20px; text-align: center;">' +
        '<p style="font-size: 1.1rem; margin-bottom: 20px;">‡∫õ‡∫∂‡∫°‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß‡∫ö‡ªç?</p>' +
        '<p style="font-size: 0.95rem; color: #666;">‡∫Å‡∫ª‡∫î‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫•‡∫ª‡∫á‡ªÉ‡∫ô‡∫•‡∫∞‡∫ö‡∫ª‡∫ö</p>' +
        '</div>' +
        '<div class="store-selector-actions">' +
        '<button class="btn-cancel-stores" onclick="closePrintConfirmationModal()">‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>' +
        '<button class="btn-confirm-stores" onclick="confirmPrintSave()">‚úÖ ‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å</button>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) closePrintConfirmationModal();
    });
}

/**
 * ‡∏õ‡∏¥‡∏î Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 */
function closePrintConfirmationModal() {
    const modal = document.getElementById('printConfirmModal');
    if (modal) modal.remove();
}

/**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏±‡∏á Print (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ jsPDF ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF)
 */
function confirmPrintSave() {
    closePrintConfirmationModal();
    
    // ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (decisionTableVisible && selectedStoresForDecision.length > 0) {
        alert('‚ö†Ô∏è ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªâ‡∫≤‡∫á‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫Å‡ªà‡∫≠‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å\n\n‡∫Å‡∫ª‡∫î‡∫õ‡∫∏‡ªà‡∫° "üóëÔ∏è ‡∫•‡ªâ‡∫≤‡∫á‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á" ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫•‡ªâ‡∫≤‡∫á‡∫Ñ‡ªç‡∫•‡ªç‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô\n‡∫´‡∫º‡∫∑ ‡∫Å‡∫ª‡∫î‡∫õ‡∫∏‡ªà‡∫° "üîÑ ‡∫î‡∫∂‡∫á‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡ªÄ‡∫Å‡∫ª‡ªà‡∫≤" ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡ªÉ‡ªù‡ªà');
        return;
    }
    
    showSavingAnimation();
    
    const statusText = document.getElementById('savingStatusText');
    if (statusText) {
        statusText.textContent = '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡ªâ‡∫≤‡∫á PDF...';
    }
    
    const isLoadedOrder = document.getElementById('currentOrderNumber').dataset.isLoaded === 'true';
    const hiddenColumns = JSON.parse(sessionStorage.getItem('printHiddenColumns') || '[]');
    
    // ‚≠ê ‡πÉ‡∏ä‡πâ jsPDF ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
    createPDFFromTableData(hiddenColumns, function(result) {
        if (!result.success) {
            hideSavingAnimation();
            alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡ªâ‡∫≤‡∫á PDF');
            return;
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF ‡πÑ‡∏õ Drive
        if (statusText) {
            statusText.textContent = '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫≠‡∫±‡∫ö‡ªÇ‡∫´‡∫º‡∫î PDF...';
        }
        
        uploadPDFToDrive(result.blob, result.fileName, function(uploadResult) {
            if (uploadResult.success) {
                if (statusText) {
                    statusText.textContent = 'PDF ‡∫™‡ªâ‡∫≤‡∫á‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î! ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å...';
                }
                
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Sheet
                const orderData = {
                    orderNumber: currentOrderNumber,
                    items: orderItems,
                    method: 'PRINT',
                    isUpdate: isLoadedOrder
                };
                
                google.script.run
                    .withSuccessHandler(function(saveResult) {
                        if (saveResult.success) {
                            showSuccessAnimation();
                            
                            console.log('PDF URL:', uploadResult.fileUrl);
                            
                            setTimeout(function() {
                                hideSavingAnimation();
                                
                                orderItems = [];
                                selectedItemsForOrder.clear();
                                updateOrderTable();
                                
                                const compareSection = document.getElementById('compareSection');
                                if (compareSection) compareSection.style.display = 'none';
                                
                                currentOrderNumber = generateOrderNumber();
                                const orderNumberElement = document.getElementById('currentOrderNumber');
                                orderNumberElement.textContent = currentOrderNumber;
                                orderNumberElement.dataset.isLoaded = 'false';
                                
                                sessionStorage.removeItem('printHiddenColumns');
                            }, 2000);
                        } else {
                            hideSavingAnimation();
                            alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å: ' + saveResult.error);
                        }
                    })
                    .withFailureHandler(function(error) {
                        hideSavingAnimation();
                        alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å: ' + error.message);
                    })
                    .saveOrder(orderData);
            } else {
                hideSavingAnimation();
                alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫≠‡∫±‡∫ö‡ªÇ‡∫´‡∫º‡∫î PDF: ' + uploadResult.error);
            }
        });
    });
}


/**
 * ‡∏ã‡πà‡∏≠‡∏ô Animation ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function hideSavingAnimation() {
    const overlay = document.getElementById('savingAnimationOverlay');
    if (overlay) {
        overlay.classList.add('fade-out');
        setTimeout(function() {
            overlay.remove();
        }, 300);
    }
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á Animation ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showSuccessAnimation() {
    const statusText = document.getElementById('savingStatusText');
    const spinner = document.querySelector('.saving-spinner');
    
    if (statusText) {
        statusText.innerHTML = '‚úÖ ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î!';
        statusText.style.color = '#4caf50';
    }
    
    if (spinner) {
        spinner.innerHTML = '<div class="success-checkmark">‚úì</div>';
        spinner.style.border = 'none';
        spinner.style.animation = 'none';
    }
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á Animation ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showSavingAnimation() {
    const existingOverlay = document.getElementById('savingAnimationOverlay');
    if (existingOverlay) {
        existingOverlay.remove();
    }
    
    const overlay = document.createElement('div');
    overlay.id = 'savingAnimationOverlay';
    overlay.className = 'loading-overlay show';
    
    overlay.innerHTML = '<div class="saving-animation-content">' +
        '<div class="saving-spinner"></div>' +
        '<div id="savingStatusText" class="saving-text">‡∫Å‡ªç‡∫≤‡∫•‡∫±‡∫á‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô...</div>' +
        '<div class="saving-subtext">‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫™‡∫±‡∫Å‡∫Ñ‡∫π‡ªà</div>' +
        '</div>';
    
    document.body.appendChild(overlay);
}
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Validate ‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô)
 */
function createPDFFromTableData(hiddenColumns, callback) {
    console.log('üöÄ Starting PDF creation...');
    console.log('üìä Order items:', orderItems.length);
    console.log('üîí Hidden columns:', hiddenColumns);
    
    const now = new Date();
    const dateStr = now.toLocaleDateString('lo-LA');
    const timeStr = now.toLocaleTimeString('lo-LA');
    const total = orderItems.reduce(function(sum, item) {
        return sum + (item.total || 0);
    }, 0);
    
    // ‚≠ê ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const imageUrls = orderItems.map(function(item) {
        return item.image || '';
    });
    
    console.log('üñºÔ∏è Images to fetch:', imageUrls.filter(url => url).length);
    
    // ‡πÅ‡∏™‡∏î‡∏á Loading ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ
    const statusText = document.getElementById('savingStatusText');
    if (statusText) {
        statusText.textContent = '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫î‡∫∂‡∫á‡∫Æ‡∫π‡∫ö‡∫û‡∫≤‡∫ö... (0/' + imageUrls.length + ')';
    }
    
    // ‚≠ê ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Backend ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Base64
    google.script.run
        .withSuccessHandler(function(base64Images) {
            console.log('‚úÖ Images fetched successfully:', base64Images.length);
            
            if (statusText) {
                statusText.textContent = '‡∫Æ‡∫π‡∫ö‡∫û‡∫≤‡∫ö‡∫î‡∫∂‡∫á‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î! ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡ªâ‡∫≤‡∫á PDF...';
            }
            
            setTimeout(function() {
                buildPDFWithImages(base64Images);
            }, 500);
        })
        .withFailureHandler(function(error) {
            console.error('‚ùå Error fetching images:', error);
            
            const emptyImages = imageUrls.map(function() { return null; });
            
            if (statusText) {
                statusText.textContent = '‡∫î‡∫∂‡∫á‡∫Æ‡∫π‡∫ö‡∫û‡∫≤‡∫ö‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î, ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫™‡ªâ‡∫≤‡∫á PDF ‡ªÅ‡∫ö‡∫ö‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Æ‡∫π‡∫ö...';
            }
            
            setTimeout(function() {
                buildPDFWithImages(emptyImages);
            }, 500);
        })
        .getImagesAsBase64(imageUrls);
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ
    function buildPDFWithImages(base64Images) {
        console.log('üé® Building PDF...');
        
        // ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á Header ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        const tableHeaders = [];
        
        if (!hiddenColumns.includes('index')) {
            tableHeaders.push({ 
                text: '‡∫•‡∫≥‡∫î‡∫±‡∫ö', 
                style: 'tableHeader', 
                alignment: 'center',
                margin: [0, 8, 0, 8]
            });
        }
        if (!hiddenColumns.includes('barcode')) {
            tableHeaders.push({ 
                text: '‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤', 
                style: 'tableHeader', 
                alignment: 'center',
                margin: [0, 8, 0, 8]
            });
        }
        if (!hiddenColumns.includes('image')) {
            tableHeaders.push({ 
                text: '‡∫Æ‡∫π‡∫ö', 
                style: 'tableHeader', 
                alignment: 'center',
                margin: [0, 8, 0, 8]
            });
        }
        if (!hiddenColumns.includes('itemName')) {
            tableHeaders.push({ 
                text: '‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤', 
                style: 'tableHeader', 
                alignment: 'center',
                margin: [0, 8, 0, 8]
            });
        }
        if (!hiddenColumns.includes('quantity')) {
            tableHeaders.push({ 
                text: '‡∫à‡∫≥‡∫ô‡∫ß‡∫ô', 
                style: 'tableHeader', 
                alignment: 'center',
                margin: [0, 8, 0, 8]
            });
        }
        if (!hiddenColumns.includes('price')) {
            tableHeaders.push({ 
                text: '‡∫•‡∫≤‡∫Ñ‡∫≤/‡ªú‡ªà‡∫ß‡∫ç', 
                style: 'tableHeader', 
                alignment: 'center',
                margin: [0, 8, 0, 8]
            });
        }
        if (!hiddenColumns.includes('total')) {
            tableHeaders.push({ 
                text: '‡∫•‡∫ß‡∫°‡ªÄ‡∫á‡∫¥‡∫ô', 
                style: 'tableHeader', 
                alignment: 'center',
                margin: [0, 8, 0, 8]
            });
        }
        
        console.log('üìã Headers count:', tableHeaders.length);
        
        if (tableHeaders.length === 0) {
            console.error('‚ùå No headers!');
            callback({ success: false, error: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫¢‡ªà‡∫≤‡∫á‡ªú‡ªâ‡∫≠‡∫ç 1 ‡∫Ñ‡ªç‡∫•‡ªç‡∫≤' });
            return;
        }
        
        const tableBody = [tableHeaders];
        
        // ‚≠ê ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß
        orderItems.forEach(function(item, index) {
            console.log('üì¶ Row ' + (index + 1) + ':', item);
            
            // ‚≠ê Validate Item
            if (!item) {
                console.error('‚ùå Item ' + (index + 1) + ' is null/undefined');
                return;
            }
            
            const row = [];
            
            // ‚≠ê Column: ‡∏•‡∏≥‡∏î‡∏±‡∏ö
            if (!hiddenColumns.includes('index')) {
                row.push({ 
                    text: (index + 1).toString(), 
                    alignment: 'center',
                    bold: true,
                    color: '#000000',
                    fontSize: 12,
                    margin: [0, 12, 0, 12]
                });
            }
            
            // ‚≠ê Column: ‡∏£‡∏´‡∏±‡∏™
            if (!hiddenColumns.includes('barcode')) {
                row.push({ 
                    text: (item.barcode || '-').toString(),
                    alignment: 'center',
                    bold: true,
                    color: '#000000',
                    fontSize: 12,
                    margin: [0, 12, 0, 12]
                });
            }
            
            // ‚≠ê Column: ‡∏£‡∏π‡∏õ
            if (!hiddenColumns.includes('image')) {
                const base64Image = base64Images[index];
                
                if (base64Image && typeof base64Image === 'string' && base64Image.trim() !== '') {
                    row.push({ 
                        image: base64Image, 
                        width: 50, 
                        height: 50, 
                        alignment: 'center',
                        margin: [0, 5, 0, 5]
                    });
                } else {
                    row.push({ 
                        text: 'üì∑', 
                        alignment: 'center', 
                        fontSize: 20,
                        color: '#666666',
                        margin: [0, 12, 0, 12]
                    });
                }
            }
            
            // ‚≠ê Column: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            if (!hiddenColumns.includes('itemName')) {
                row.push({ 
                    text: (item.itemName || '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ä‡∫∑‡ªà').toString(),
                    alignment: 'center',
                    bold: true,
                    color: '#000000',
                    fontSize: 12,
                    margin: [0, 12, 0, 12]
                });
            }
            
            // ‚≠ê Column: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            if (!hiddenColumns.includes('quantity')) {
                const qty = (item.quantity || 0).toString();
                const unit = (item.unit || '‡∫ä‡∫¥‡ªâ‡∫ô').toString();
                row.push({ 
                    text: qty + ' ' + unit,
                    alignment: 'center',
                    bold: true,
                    color: '#000000',
                    fontSize: 12,
                    margin: [0, 12, 0, 12]
                });
            }
            
            // ‚≠ê Column: ‡∏£‡∏≤‡∏Ñ‡∏≤
            if (!hiddenColumns.includes('price')) {
                const price = parseFloat(item.price) || 0;
                row.push({ 
                    text: price.toLocaleString(),
                    alignment: 'center',
                    bold: true,
                    color: '#000000',
                    fontSize: 12,
                    margin: [0, 12, 0, 12]
                });
            }
            
            // ‚≠ê Column: ‡∏£‡∏ß‡∏°
            if (!hiddenColumns.includes('total')) {
                const itemTotal = parseFloat(item.total) || 0;
                row.push({ 
                    text: itemTotal.toLocaleString(),
                    alignment: 'center',
                    bold: true,
                    color: '#000000',
                    fontSize: 12,
                    margin: [0, 12, 0, 12]
                });
            }
            
            // ‚≠ê Validate Row
            console.log('‚úÖ Row ' + (index + 1) + ' cells:', row.length, '(expected: ' + tableHeaders.length + ')');
            
            if (row.length !== tableHeaders.length) {
                console.error('‚ùå Row ' + (index + 1) + ' mismatch!');
                console.error('   Expected:', tableHeaders.length, 'Got:', row.length);
            } else {
                tableBody.push(row);
            }
        });
        
        // ‚≠ê ‡πÅ‡∏ñ‡∏ß Total
        const totalRow = [];
        const colSpan = tableHeaders.length - 1;
        
        if (colSpan > 0) {
            totalRow.push({ 
                text: '‡∫•‡∫ß‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î:', 
                colSpan: colSpan, 
                alignment: 'center', 
                bold: true, 
                fillColor: '#e8f5e9',
                color: '#000000',
                fontSize: 13,
                margin: [0, 10, 0, 10]
            });
            
            for (let i = 1; i < colSpan; i++) {
                totalRow.push({});
            }
            
            if (!hiddenColumns.includes('total')) {
                totalRow.push({ 
                    text: total.toLocaleString() + ' ‡∫Å‡∫µ‡∫ö',
                    alignment: 'center', 
                    bold: true, 
                    fillColor: '#e8f5e9',
                    color: '#000000',
                    fontSize: 13,
                    margin: [0, 10, 0, 10]
                });
            } else {
                totalRow.push({});
            }
            
            tableBody.push(totalRow);
        }
        
        console.log('üìä Table body rows:', tableBody.length);
        
        // ‚≠ê ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        const colWidths = [];
        if (!hiddenColumns.includes('index')) colWidths.push(37);
        if (!hiddenColumns.includes('barcode')) colWidths.push(90);
        if (!hiddenColumns.includes('image')) colWidths.push(63);
        if (!hiddenColumns.includes('itemName')) colWidths.push('*');
        if (!hiddenColumns.includes('quantity')) colWidths.push(70);
        if (!hiddenColumns.includes('price')) colWidths.push(85);
        if (!hiddenColumns.includes('total')) colWidths.push(85);
        
        console.log('üìè Column widths:', colWidths.length);
        
        // ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF Definition
        const docDefinition = {
            pageSize: 'A4',
            pageOrientation: 'portrait',
            pageMargins: [25, 55, 25, 55],
            content: [
                { text: '‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤', alignment: 'center', bold: true, fontSize: 22, color: '#2e7d32' },
                { text: '\n' },
                { text: '‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ: ' + currentOrderNumber, bold: true, fontSize: 13, color: '#000000', margin: [0, 3] },
                { text: '‡∫ß‡∫±‡∫ô‡∫ó‡∫µ: ' + dateStr + ' ' + timeStr, bold: true, fontSize: 13, color: '#000000', margin: [0, 3] },
                { text: '\n' },
                {
                    table: {
                        headerRows: 1,
                        widths: colWidths,
                        body: tableBody
                    },
                    layout: {
                        fillColor: function (rowIndex) {
                            return (rowIndex === 0) ? '#66bb6a' : ((rowIndex % 2 === 0) ? '#fafafa' : null);
                        },
                        hLineWidth: function() { return 1.2; },
                        vLineWidth: function() { return 1.2; },
                        hLineColor: function() { return '#bdbdbd'; },
                        vLineColor: function() { return '#bdbdbd'; },
                        paddingLeft: function() { return 6; },
                        paddingRight: function() { return 6; },
                        paddingTop: function() { return 10; },
                        paddingBottom: function() { return 10; }
                    }
                },
                { text: '\n\n' },
                {
                    columns: [
                        { text: '‡∫•‡∫≤‡∫ç‡ªÄ‡∫ä‡∫±‡∫ô‡∫ú‡∫π‡ªâ‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ\n\n_________________', alignment: 'center', width: '50%', bold: true, fontSize: 12, color: '#000000' },
                        { text: '‡∫•‡∫≤‡∫ç‡ªÄ‡∫ä‡∫±‡∫ô‡∫ú‡∫π‡ªâ‡∫≠‡∫∞‡∫ô‡∫∏‡∫°‡∫±‡∫î\n\n_________________', alignment: 'center', width: '50%', bold: true, fontSize: 12, color: '#000000' }
                    ]
                }
            ],
            styles: {
                tableHeader: { bold: true, fontSize: 13, color: '#ffffff', fillColor: '#66bb6a' }
            },
            defaultStyle: {
                font: 'NotoSansLao',
                fontSize: 11,
                color: '#000000',
                lineHeight: 1.3
            }
        };
        
        console.log('‚ú® Creating PDF...');
        
        try {
            const pdfDocGenerator = pdfMake.createPdf(docDefinition);
            pdfDocGenerator.getBlob(function(blob) {
                const fileName = '‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ_' + currentOrderNumber + '_' + new Date().getTime() + '.pdf';
                console.log('‚úÖ PDF created:', fileName);
                callback({ success: true, blob: blob, fileName: fileName });
            });
        } catch (error) {
            console.error('‚ùå PDF Error:', error);
            console.error('Stack:', error.stack);
            callback({ success: false, error: error.toString() });
        }
    }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î PDF Blob ‡πÑ‡∏õ Google Drive
 */
function uploadPDFToDrive(pdfBlob, fileName, callback) {
    const reader = new FileReader();
    reader.onload = function(e) {
        const base64Data = e.target.result.split(',')[1];
        
        google.script.run
            .withSuccessHandler(callback)
            .withFailureHandler(function(error) {
                callback({ success: false, error: error.message });
            })
            .uploadPDFBase64(base64Data, fileName);
    };
    reader.readAsDataURL(pdfBlob);
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function showDownloadOrderModal() {
    // ‡πÅ‡∏™‡∏î‡∏á Loading
    showLoadingOverlay('‡∫Å‡ªç‡∫≤‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫º‡∫î‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô...', '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫™‡∫±‡∫Å‡∫Ñ‡∫π‡ªà');
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    google.script.run
        .withSuccessHandler(function(orderList) {
            hideLoadingOverlay();
            
            if (!orderList || orderList.length === 0) {
                alert('‡∫ö‡ªç‡ªà‡∫°‡∫µ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ');
                return;
            }
            
            displayDownloadOrderModal(orderList);
        })
        .withFailureHandler(function(error) {
            hideLoadingOverlay();
            alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ' + error.message);
        })
        .getOrderList();
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function displayDownloadOrderModal(orderList) {
    const modal = document.createElement('div');
    modal.id = 'downloadOrderModal';
    modal.className = 'store-selector-modal show';
    
    let optionsHTML = '';
    orderList.forEach(function(order) {
        optionsHTML += '<div class="order-option-item" data-order="' + order.orderNumber + '" onclick="downloadOrderPDF(\'' + order.orderNumber + '\')" style="cursor: pointer;">' +
            '<div class="order-display-text">' + order.date + ' - ' + order.orderNumber + '</div>' +
            '<div class="order-item-count">üì• ' + order.itemCount + ' ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô</div>' +
            '</div>';
    });
    
    modal.innerHTML = '<div class="store-selector-content">' +
        '<div class="store-selector-header">üì• ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫î‡∫≤‡∫ß‡ªÇ‡∫´‡∫º‡∫î PDF</div>' +
        '<input type="text" id="downloadOrderSearchInput" class="store-search-input" placeholder="‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ ‡∫´‡∫º‡∫∑ ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ..." onkeyup="filterDownloadOrderList()">' +
        '<div class="store-list" id="downloadOrderListContainer">' + optionsHTML + '</div>' +
        '<div class="store-selector-actions">' +
        '<button class="btn-cancel-stores" onclick="closeDownloadOrderModal()">‡∫õ‡∫¥‡∫î</button>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) closeDownloadOrderModal();
    });
}

/**
 * ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function filterDownloadOrderList() {
    const input = document.getElementById('downloadOrderSearchInput');
    const filter = input.value.toLowerCase();
    const container = document.getElementById('downloadOrderListContainer');
    const items = container.getElementsByClassName('order-option-item');
    
    for (let i = 0; i < items.length; i++) {
        const text = items[i].textContent || items[i].innerText;
        if (text.toLowerCase().indexOf(filter) > -1) {
            items[i].style.display = '';
        } else {
            items[i].style.display = 'none';
        }
    }
}

/**
 * ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function downloadOrderPDF(orderNumber) {
    closeDownloadOrderModal();
    
    // ‡πÅ‡∏™‡∏î‡∏á Loading
    showLoadingOverlay('‡∫Å‡ªç‡∫≤‡∫•‡∫±‡∫á‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤‡ªÑ‡∫ü‡∫•‡ªå PDF...', '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫™‡∫±‡∫Å‡∫Ñ‡∫π‡ªà');
    
    google.script.run
        .withSuccessHandler(function(result) {
            hideLoadingOverlay();
            
            if (result.success) {
                // ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
                window.open(result.fileUrl, '_blank');
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                setTimeout(function() {
                    alert('‚úÖ ‡ªÄ‡∫õ‡∫µ‡∫î‡ªÑ‡∫ü‡∫•‡ªå PDF ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î!\n\n‡∫ä‡∫∑‡ªà‡ªÑ‡∫ü‡∫•‡ªå: ' + result.fileName + '\n\n‡∫Ñ‡∫∏‡∫ô‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫î‡∫≤‡∫ß‡ªÇ‡∫´‡∫º‡∫î‡ªÑ‡∫î‡ªâ‡∫à‡∫≤‡∫Å‡ªú‡ªâ‡∫≤‡∫ï‡ªà‡∫≤‡∫á‡∫ó‡∫µ‡ªà‡ªÄ‡∫õ‡∫µ‡∫î‡∫Ç‡∫∂‡ªâ‡∫ô‡∫°‡∫≤');
                }, 500);
            } else {
                alert('‚ùå ' + result.error);
            }
        })
        .withFailureHandler(function(error) {
            hideLoadingOverlay();
            alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ' + error.message);
        })
        .getPDFUrlByOrderNumber(orderNumber);
}

/**
 * ‡∏õ‡∏¥‡∏î Modal ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function closeDownloadOrderModal() {
    const modal = document.getElementById('downloadOrderModal');
    if (modal) modal.remove();
}



console.log('üìä priceStudyData size:', priceStudyData.size);
console.log('üîç Sample data:');
let count = 0;
priceStudyData.forEach((items, barcode) => {
    if (count < 5) {
        console.log('Barcode:', barcode, '| Items:', items);
        count++;
    }
});
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
 */
function generateSingleComparisonTableWithTotal(storeName) {
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üè™ Generating table for store:', storeName);

    let html = '<div class="compare-table-container">' +
        '<div class="compare-table-header">üè™ ' + storeName + '</div>' +
        '<div class="order-table-wrapper">' +
        '<table class="order-table">' +
        '<thead><tr>' +
        '<th>‡∫•‡∫≥‡∫î‡∫±‡∫ö</th><th>‡∫•‡∫∞‡∫´‡∫±‡∫î</th><th>‡∫Æ‡∫π‡∫ö</th><th>‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</th>' +
        '<th>‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç</th><th>‡∫à‡∫≥‡∫ô‡∫ß‡∫ô</th><th>‡∫•‡∫≤‡∫Ñ‡∫≤/‡ªú‡ªà‡∫ß‡∫ç</th><th>‡∫•‡∫ß‡∫°‡ªÄ‡∫á‡∫¥‡∫ô</th><th>‡ªÅ‡∫´‡∫º‡ªà‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô</th>' +
        '</tr></thead><tbody>';

    let totalAmount = 0;

    orderItems.forEach(function(orderItem, index) {
        const barcodeFromOrder = orderItem.barcode.toString().trim();
        
        console.log('\nüì¶ Item ' + (index + 1) + ': ' + orderItem.itemName);
        console.log('üîë Barcode:', barcodeFromOrder);

        const mainItem = itemsData.get(barcodeFromOrder);
        
        if (!mainItem) {
            console.warn('‚ö†Ô∏è Not found in Items table');
            
            const itemTotal = orderItem.quantity * (orderItem.price || 0);
            totalAmount += itemTotal;
            
            const imgHtml = orderItem.image ? 
                '<img src="' + orderItem.image + '" class="order-table-img">' : 
                '<div class="no-order-img">üì∑</div>';
            
            html += '<tr style="background: #ffe0e0;">';
            html += '<td>' + (index + 1) + '</td>';
            html += '<td>' + barcodeFromOrder + '</td>';
            html += '<td>' + imgHtml + '</td>';
            html += '<td>' + orderItem.itemName + '</td>';
            html += '<td>' + orderItem.unit + '</td>';
            html += '<td>' + orderItem.quantity + '</td>';
            html += '<td>' + (orderItem.price || 0).toLocaleString() + '</td>';
            html += '<td>' + itemTotal.toLocaleString() + '</td>';
            html += '<td><span class="item-source-badge badge-main-table">‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÄ‡∫î‡∫µ‡∫°</span></td>';
            html += '</tr>';
            return;
        }

        const baseData = {
            barcode: barcodeFromOrder,
            itemName: mainItem.columnB || orderItem.itemName,
            unit: mainItem.columnH || orderItem.unit,
            quantity: orderItem.quantity,
            image: mainItem.columnK || orderItem.image,
            priceFromMainTable: parseFloat(mainItem.columnN) || 0
        };

        const priceStudyItems = priceStudyData.get(barcodeFromOrder);
        
        let finalPrice = baseData.priceFromMainTable;
        let source = 'main-table';
        let priceSource = '‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫´‡∫º‡∫±‡∫Å';

        if (priceStudyItems && priceStudyItems.length > 0) {
            const matchedItem = priceStudyItems.find(function(item) {
                return item.store.toLowerCase() === storeName.toLowerCase().trim();
            });
            
            if (matchedItem && matchedItem.price > 0) {
                finalPrice = matchedItem.price;
                source = 'price-study';
                priceSource = '‡∫™‡∫∂‡∫Å‡∫™‡∫≤‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô';
            }
        }

        const itemTotal = baseData.quantity * finalPrice;
        totalAmount += itemTotal;

        const imgHtml = baseData.image ? 
            '<img src="' + baseData.image + '" class="order-table-img">' : 
            '<div class="no-order-img">üì∑</div>';

        const badgeClass = source === 'price-study' ? 'badge-price-study' : 'badge-main-table';
        const rowStyle = source === 'main-table' ? ' style="background: #e3f2fd;"' : '';

        html += '<tr' + rowStyle + '>';
        html += '<td>' + (index + 1) + '</td>';
        html += '<td>' + baseData.barcode + '</td>';
        html += '<td>' + imgHtml + '</td>';
        html += '<td>' + baseData.itemName + '</td>';
        html += '<td>' + baseData.unit + '</td>';
        html += '<td>' + baseData.quantity + '</td>';
        html += '<td>' + (finalPrice > 0 ? finalPrice.toLocaleString() : '-') + '</td>';
        html += '<td>' + (itemTotal > 0 ? itemTotal.toLocaleString() : '-') + '</td>';
        html += '<td><span class="item-source-badge ' + badgeClass + '">' + priceSource + '</span></td>';
        html += '</tr>';
    });

    console.log('üí∞ Store Total:', totalAmount.toLocaleString());
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

    html += '</tbody></table></div>' +
        '<div class="order-footer">' +
        '<div class="order-total">üí∞ ‡∫•‡∫ß‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î: ' + totalAmount.toLocaleString() + ' ‡∫Å‡∫µ‡∫ö</div>' +
        '</div></div>';

    return {
        html: html,
        total: totalAmount
    };
}
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏° (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function createTotalSummary(mainTotal, storeTotals) {
    let html = '<div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; padding: 25px; margin: 20px 0; box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);">';
    
    html += '<h3 style="color: white; margin: 0 0 20px 0; font-size: 1.5rem; text-align: center;">üìä ‡∫™‡∫∞‡∫´‡∫º‡∫∏‡∫ö‡∫ç‡∫≠‡∫î‡ªÄ‡∫á‡∫¥‡∫ô‡∫•‡∫ß‡∫°</h3>';
    
    html += '<div style="background: white; border-radius: 12px; padding: 20px;">';
    
    // ‡πÅ‡∏ñ‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    html += '<div style="display: flex; justify-content: space-between; align-items: center; padding: 12px 15px; margin-bottom: 10px; background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); border-radius: 8px; box-shadow: 0 2px 8px rgba(79, 172, 254, 0.3);">';
    html += '<div style="display: flex; align-items: center; gap: 10px;">';
    html += '<span style="font-size: 1.3rem;">üìã</span>';
    html += '<span style="font-weight: bold; color: white; font-size: 1.05rem;">‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫´‡∫º‡∫±‡∫Å</span>';
    html += '</div>';
    html += '<span style="font-weight: bold; color: white; font-size: 1.15rem;">' + mainTotal.toLocaleString() + ' ‡∫Å‡∫µ‡∫ö</span>';
    html += '</div>';
    
    // ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô
    Object.keys(storeTotals).forEach(function(storeName, index) {
        const storeTotal = storeTotals[storeName];
        const difference = storeTotal - mainTotal;
        const isLower = difference < 0;
        const icon = isLower ? 'üìâ' : (difference > 0 ? 'üìà' : '‚ûñ');
        const bgColor = isLower ? 'linear-gradient(135deg, #4caf50 0%, #45a049 100%)' : 
                        (difference > 0 ? 'linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)' : 
                        'linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%)');
        const shadowColor = isLower ? 'rgba(76, 175, 80, 0.3)' : 
                            (difference > 0 ? 'rgba(255, 107, 107, 0.3)' : 'rgba(149, 165, 166, 0.3)');
        
        html += '<div style="display: flex; justify-content: space-between; align-items: center; padding: 12px 15px; margin-bottom: 10px; background: ' + bgColor + '; border-radius: 8px; box-shadow: 0 2px 8px ' + shadowColor + ';">';
        html += '<div style="display: flex; align-items: center; gap: 10px;">';
        html += '<span style="font-size: 1.3rem;">üè™</span>';
        html += '<span style="font-weight: bold; color: white; font-size: 1.05rem;">' + storeName + '</span>';
        html += '</div>';
        html += '<div style="text-align: right;">';
        html += '<div style="font-weight: bold; color: white; font-size: 1.15rem;">' + storeTotal.toLocaleString() + ' ‡∫Å‡∫µ‡∫ö</div>';
        
        if (difference !== 0) {
            const diffText = isLower ? '‡∫ï‡ªà‡∫≥‡∫Å‡∫ß‡ªà‡∫≤' : '‡∫™‡∫π‡∫á‡∫Å‡∫ß‡ªà‡∫≤';
            html += '<div style="font-size: 0.9rem; color: white; opacity: 0.9; margin-top: 3px;">' + icon + ' ' + diffText + ' ' + Math.abs(difference).toLocaleString() + ' ‡∫Å‡∫µ‡∫ö</div>';
        }
        
        html += '</div>';
        html += '</div>';
    });
    
    html += '</div>';
    html += '</div>';
    
    return html;
}

/**
 * ========================================
 * ‚≠ê JavaScript ‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 * ========================================
 */

let editItemsModal = null;
let editFormModal = null;
let selectedItemsForEdit = new Set();
let filteredItemsData = [];
let uniqueZones = [];
let uniqueCategories = [];
let uniqueUnits = [];

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 */
function createEditItemsButton() {
    if (document.getElementById('editItemsBtn')) return;
    
    const button = document.createElement('button');
    button.id = 'editItemsBtn';
    button.className = 'edit-items-btn';
    button.innerHTML = '‚úèÔ∏è ‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤';
    button.onclick = showEditItemsModal;
    document.body.appendChild(button);
    
    createEditItemsModal();
    createEditFormModal();
}


/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Modal ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
 */
function createEditFormModal() {
    const modal = document.createElement('div');
    modal.id = 'editFormModal';
    modal.className = 'edit-form-modal';
    
    modal.innerHTML = '<div class="edit-form-content">' +
        '<h3 class="edit-form-title">‚úèÔ∏è ‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</h3>' +
        '<div id="editFormFields"></div>' +
        '<div class="edit-form-actions">' +
        '<button class="btn-save-edit" onclick="saveEditedItems()">üíæ ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å</button>' +
        '<button class="btn-cancel-edit" onclick="closeEditFormModal()">‚ùå ‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    editFormModal = modal;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏´‡∏•‡∏±‡∏Å
 */
function showEditItemsModal() {
    if (!editItemsModal) return;
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dropdown
    loadEditDropdownData();
    
    editItemsModal.classList.add('show');
}

/**
 * ‡∏õ‡∏¥‡∏î Modal ‡∏´‡∏•‡∏±‡∏Å
 */
function closeEditItemsModal() {
    if (editItemsModal) {
        editItemsModal.classList.remove('show');
        clearEditFilters();
    }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Modal ‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° Auto-Search ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î)
 */
function createEditItemsModal() {
    const modal = document.createElement('div');
    modal.id = 'editItemsModal';
    modal.className = 'edit-items-modal';
    
    modal.innerHTML = '<div class="edit-items-content">' +
        '<div class="edit-items-header">' +
        '<h2 class="edit-items-title">‚úèÔ∏è ‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</h2>' +
        '<div class="edit-header-buttons">' +
        '<button class="edit-action-btn btn-show-filtered" onclick="showFilteredItems()">üìã ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</button>' +
        '<button class="edit-action-btn btn-edit-selected" id="editSelectedBtn" onclick="editSelectedItems()" disabled>‚úèÔ∏è ‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç</button>' +
        '<button class="edit-action-btn btn-clear-filter" onclick="clearEditFilters()">üóëÔ∏è ‡∫•‡ªâ‡∫≤‡∫á</button>' +
        '<button class="edit-close-btn" onclick="closeEditItemsModal()">√ó</button>' +
        '</div>' +
        '</div>' +
        '<div class="edit-filter-section">' +
        '<div class="filter-row">' +
        '<div class="filter-item">' +
        '<label class="filter-label">üìç ‡ªÇ‡∫ä‡∫ô:</label>' +
        '<input list="zoneDatalist" id="filterZone" class="filter-input" placeholder="‡∫û‡∫¥‡∫° ‡∫´‡∫º‡∫∑ ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÇ‡∫ä‡∫ô...">' +
        '<datalist id="zoneDatalist"></datalist>' +
        '</div>' +
        '<div class="filter-item">' +
        '<label class="filter-label">üì¶ ‡ªù‡∫ß‡∫î‡ªù‡∫π‡ªà:</label>' +
        '<input list="categoryDatalist" id="filterCategory" class="filter-input" placeholder="‡∫û‡∫¥‡∫° ‡∫´‡∫º‡∫∑ ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªù‡∫ß‡∫î‡ªù‡∫π‡ªà...">' +
        '<datalist id="categoryDatalist"></datalist>' +
        '</div>' +
        '<div class="filter-item">' +
        '<label class="filter-label">üìè ‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç:</label>' +
        '<select id="filterUnit" class="filter-select">' +
        '<option value="">-- ‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î --</option>' +
        '</select>' +
        '</div>' +
        '<div class="filter-item">' +
        '<label class="filter-label">üîç ‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤:</label>' +
        '<input type="text" id="filterName" class="filter-input" placeholder="‡∫û‡∫¥‡∫°‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤..." oninput="handleRealtimeSearch()">' +
        '</div>' +
        '<div class="filter-item">' +
        '<label class="filter-label">üì∑ ‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô‡∫ö‡∫≤‡ªÇ‡∫Ñ‡∫î:</label>' +
        // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° oninput ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auto-Search
        '<input type="text" id="filterBarcode" class="filter-input" placeholder="‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô ‡∫´‡∫º‡∫∑ ‡∫û‡∫¥‡∫°‡∫ö‡∫≤‡ªÇ‡∫Ñ‡∫î..." oninput="handleBarcodeAutoSearch()">' +
        '</div>' +
        '</div>' +
        '</div>' +
        '<div class="edit-table-section">' +
        '<div style="text-align: center; padding: 40px; color: #999;">' +
        '<p>‡∫Å‡∫ª‡∫î‡∫õ‡∫∏‡ªà‡∫° "üìã ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤" ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ï‡∫ª‡ªâ‡∫ô</p>' +
        '</div>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    editItemsModal = modal;
    
    // Event listeners
    modal.addEventListener('click', function(e) {
        if (e.target === modal) closeEditItemsModal();
    });
}

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dropdown (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ datalist ‡πÅ‡∏ó‡∏ô option)
 */
function loadEditDropdownData() {
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å itemsData
    uniqueZones = [];
    uniqueCategories = [];
    uniqueUnits = [];
    
    const zonesSet = new Set();
    const categoriesSet = new Set();
    const unitsSet = new Set();
    
    itemsData.forEach(function(item) {
        if (item.columnM) zonesSet.add(item.columnM.toString().trim());
        if (item.columnL) categoriesSet.add(item.columnL.toString().trim());
        if (item.columnH) unitsSet.add(item.columnH.toString().trim());
    });
    
    uniqueZones = Array.from(zonesSet).sort();
    uniqueCategories = Array.from(categoriesSet).sort();
    uniqueUnits = Array.from(unitsSet).sort();
    
    // ‚≠ê ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô datalist
    const zoneDatalist = document.getElementById('zoneDatalist');
    const categoryDatalist = document.getElementById('categoryDatalist');
    const unitSelect = document.getElementById('filterUnit');
    
    if (zoneDatalist) {
        zoneDatalist.innerHTML = '';
        uniqueZones.forEach(function(zone) {
            zoneDatalist.innerHTML += '<option value="' + zone + '">';
        });
    }
    
    if (categoryDatalist) {
        categoryDatalist.innerHTML = '';
        uniqueCategories.forEach(function(cat) {
            categoryDatalist.innerHTML += '<option value="' + cat + '">';
        });
    }
    
    if (unitSelect) {
        unitSelect.innerHTML = '<option value="">-- ‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î --</option>';
        uniqueUnits.forEach(function(unit) {
            unitSelect.innerHTML += '<option value="' + unit + '">' + unit + '</option>';
        });
    }
}

// ‚≠ê ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debounce
let realtimeSearchTimer = null;

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Real-time Search (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function handleRealtimeSearch() {
    // Clear timeout ‡πÄ‡∏î‡∏¥‡∏°
    if (realtimeSearchTimer) {
        clearTimeout(realtimeSearchTimer);
    }
    
    const filterName = document.getElementById('filterName').value.trim().toLowerCase();
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if (!filterName) {
        return;
    }
    
    // Debounce: ‡∏£‡∏≠ 500ms ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    realtimeSearchTimer = setTimeout(function() {
        console.log('üîç Real-time search triggered for:', filterName);
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å showFilteredItems() ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        showFilteredItems();
    }, 500);
}
// ‚≠ê ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debounce (Barcode)
let barcodeSearchTimer = null;

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Auto-Search ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function handleBarcodeAutoSearch() {
    // Clear timeout ‡πÄ‡∏î‡∏¥‡∏°
    if (barcodeSearchTimer) {
        clearTimeout(barcodeSearchTimer);
    }
    
    const filterBarcode = document.getElementById('filterBarcode').value.trim();
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if (!filterBarcode) {
        return;
    }
    
    console.log('üì∑ Barcode detected:', filterBarcode);
    
    // ‚≠ê Debounce: ‡∏£‡∏≠ 500ms ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    // (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô)
    barcodeSearchTimer = setTimeout(function() {
        console.log('üîç Auto-searching by barcode:', filterBarcode);
        
        // ‚≠ê ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å showFilteredItems() ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        showFilteredItems();
        
        // ‚≠ê ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
        setTimeout(function() {
            document.getElementById('filterBarcode').value = '';
            document.getElementById('filterBarcode').focus(); // Focus ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô
        }, 300);
        
    }, 500); // ‡∏£‡∏≠ 500ms
}
/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏° Column L)
 */
function showFilteredItems() {
    const filterZone = document.getElementById('filterZone').value.toLowerCase().trim();
    const filterCategory = document.getElementById('filterCategory').value.toLowerCase().trim();
    const filterUnit = document.getElementById('filterUnit').value.toLowerCase();
    const filterName = document.getElementById('filterName').value.toLowerCase().trim();
    const filterBarcode = document.getElementById('filterBarcode').value.trim();
    
    console.log('Filtering with:', { filterZone, filterCategory, filterUnit, filterName, filterBarcode });
    
    filteredItemsData = [];
    selectedItemsForEdit.clear();
    
    // ‚≠ê ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πÅ‡∏Å‡∏ô Barcode (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏° Column L ‡πÅ‡∏ó‡∏ô Column J)
    if (filterBarcode) {
        const scannedItem = itemsData.get(filterBarcode);
        
        if (scannedItem) {
            // ‚≠ê ‡∏î‡∏∂‡∏á Column L (‡ªù‡∫ß‡∫î‡ªù‡∫π‡ªà) ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô
            const categoryOfScanned = (scannedItem.columnL || '').toString().trim();
            
            console.log('üîç Scanned barcode:', filterBarcode);
            console.log('üì¶ Category (Column L):', categoryOfScanned);
            
            if (categoryOfScanned) {
                // ‚≠ê ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ Column L ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
                itemsData.forEach(function(item, barcode) {
                    const itemCategory = (item.columnL || '').toString().trim();
                    
                    if (itemCategory === categoryOfScanned) {
                        filteredItemsData.push({
                            barcode: barcode,
                            data: item
                        });
                    }
                });
                
                console.log('‚úÖ Found items with same category:', filteredItemsData.length);
            } else {
                // ‚≠ê ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ Column L ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                console.log('‚ö†Ô∏è Scanned item has no category, showing only this item');
                filteredItemsData.push({
                    barcode: filterBarcode,
                    data: scannedItem
                });
            }
        } else {
            console.log('‚ùå Barcode not found:', filterBarcode);
        }
    } else {
        // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        itemsData.forEach(function(item, barcode) {
            let match = true;
            
            // Zone: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö contains
            if (filterZone && !(item.columnM || '').toString().toLowerCase().includes(filterZone)) {
                match = false;
            }
            
            // Category: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö contains
            if (filterCategory && !(item.columnL || '').toString().toLowerCase().includes(filterCategory)) {
                match = false;
            }
            
            // Unit: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö
            if (filterUnit && (item.columnH || '').toString().toLowerCase() !== filterUnit) {
                match = false;
            }
            
            // Name: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö contains
            if (filterName && !(item.columnB || '').toString().toLowerCase().includes(filterName)) {
                match = false;
            }
            
            if (match) {
                filteredItemsData.push({
                    barcode: barcode,
                    data: item
                });
            }
        });
    }
    
    // ‚≠ê ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 1 = Column J, ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 2 = Column L
    filteredItemsData.sort(function(a, b) {
        // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Column J (‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á)
        const columnJ_a = (a.data.columnJ || a.barcode || '').toString().trim();
        const columnJ_b = (b.data.columnJ || b.barcode || '').toString().trim();
        
        // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Column L (‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà)
        const columnL_a = (a.data.columnL || '').toString().trim();
        const columnL_b = (b.data.columnL || '').toString().trim();
        
        // ‚≠ê ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Column J (A-Z)
        if (columnJ_a < columnJ_b) return -1;
        if (columnJ_a > columnJ_b) return 1;
        
        // ‚≠ê ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á: ‡∏ñ‡πâ‡∏≤ Column J ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Column L (A-Z)
        if (columnL_a < columnL_b) return -1;
        if (columnL_a > columnL_b) return 1;
        
        return 0;
    });
    
    console.log('‚úÖ Filtered & Sorted items:', filteredItemsData.length);
    
    displayFilteredItemsTable();
}

/**
 * ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Clear real-time timer ‡∏î‡πâ‡∏ß‡∏¢)
 */
function clearEditFilters() {
    // ‚≠ê Clear timer
    if (realtimeSearchTimer) {
        clearTimeout(realtimeSearchTimer);
        realtimeSearchTimer = null;
    }
    
    document.getElementById('filterZone').value = '';
    document.getElementById('filterCategory').value = '';
    document.getElementById('filterUnit').value = '';
    document.getElementById('filterName').value = '';
    document.getElementById('filterBarcode').value = '';
    
    filteredItemsData = [];
    selectedItemsForEdit.clear();
    
    const tableSection = document.querySelector('.edit-table-section');
    if (tableSection) {
        tableSection.innerHTML = '<div style="text-align: center; padding: 40px; color: #999;">' +
            '<p>‡∫Å‡∫ª‡∫î‡∫õ‡∫∏‡ªà‡∫° "üìã ‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤" ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ï‡∫ª‡ªâ‡∫ô</p>' +
            '</div>';
    }
    
    updateEditButtonState();
}



/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 */
function displayFilteredItemsTable() {
    const tableSection = document.querySelector('.edit-table-section');
    
    if (!tableSection) return;
    
    if (filteredItemsData.length === 0) {
        tableSection.innerHTML = '<div style="text-align: center; padding: 40px; color: #999;">' +
            '<h3>‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô</h3>' +
            '<p>‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡∫±‡∫ö‡ªÄ‡∫á‡∫∑‡ªà‡∫≠‡∫ô‡ªÑ‡∫Ç‡∫Å‡∫≤‡∫ô‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤</p>' +
            '</div>';
        return;
    }
    
    let html = '<table class="edit-items-table">' +
        '<thead><tr>' +
        '<th><input type="checkbox" class="edit-checkbox" id="selectAllCheckbox" onchange="toggleSelectAll()"></th>' +
        '<th>‡∫•‡∫∞‡∫´‡∫±‡∫î (A)</th>' +
        '<th>‡∫ä‡∫∑‡ªà‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô (B)</th>' +
        '<th>‡∫•‡∫≤‡∫Ñ‡∫≤‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤ (C)</th>' +
        '<th>‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô (D)</th>' +
        '<th>‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫´‡∫º‡∫∑‡∫≠ (F)</th>' +
        '<th>‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç (H)</th>' +
        '<th>‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ï‡ªç‡ªà‡ªú‡ªà‡∫ß‡∫ç (I)</th>' +
        '<th>‡∫Æ‡∫π‡∫ö (K)</th>' +
        '<th>‡ªù‡∫ß‡∫î‡ªù‡∫π‡ªà (L)</th>' +
        '<th>‡ªÇ‡∫ä‡∫ô (M)</th>' +
        '<th>‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô (N)</th>' +
        '</tr></thead><tbody>';
    
    filteredItemsData.forEach(function(itemObj) {
        const barcode = itemObj.barcode;
        const item = itemObj.data;
        const isSelected = selectedItemsForEdit.has(barcode);
        
        const imgHtml = item.columnK ? 
            '<img src="' + item.columnK + '" class="edit-table-img">' : 
            'üì∑';
        
        html += '<tr class="' + (isSelected ? 'selected' : '') + '" onclick="toggleItemSelectionForEdit(\'' + barcode + '\')">' +
    '<td onclick="event.stopPropagation()"><input type="checkbox" class="edit-checkbox item-checkbox" data-barcode="' + barcode + '" ' + (isSelected ? 'checked' : '') + ' onchange="toggleItemSelectionForEdit(\'' + barcode + '\')"></td>' +
            '<td>' + barcode + '</td>' +
            '<td>' + (item.columnB || '-') + '</td>' +
            '<td>' + (item.columnC || '-') + '</td>' +
            '<td>' + (item.columnD || '-') + '</td>' +
            '<td>' + (item.columnF || '-') + '</td>' +
            '<td>' + (item.columnH || '-') + '</td>' +
            '<td>' + (item.columnI || '-') + '</td>' +
            '<td>' + imgHtml + '</td>' +
            '<td>' + (item.columnL || '-') + '</td>' +
            '<td>' + (item.columnM || '-') + '</td>' +
            '<td>' + (item.columnN || '-') + '</td>' +
            '</tr>';
    });
    
    html += '</tbody></table>';
    
    tableSection.innerHTML = html;
    
    updateEditButtonState();
}
/**
 * Toggle ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
 */
function toggleItemSelectionForEdit(barcode) {
    if (selectedItemsForEdit.has(barcode)) {
        selectedItemsForEdit.delete(barcode);
    } else {
        selectedItemsForEdit.add(barcode);
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
    const checkbox = document.querySelector('.item-checkbox[data-barcode="' + barcode + '"]');
    if (checkbox) {
        checkbox.checked = selectedItemsForEdit.has(barcode);
    }
    
    const row = checkbox ? checkbox.closest('tr') : null;
    if (row) {
        if (selectedItemsForEdit.has(barcode)) {
            row.classList.add('selected');
        } else {
            row.classList.remove('selected');
        }
    }
    
    updateEditButtonState();
    updateSelectAllCheckbox();
}

/**
 * Toggle ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
 */
function toggleSelectAll() {
    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    
    if (!selectAllCheckbox) {
        console.error('selectAllCheckbox not found!');
        return;
    }
    
    const isChecked = selectAllCheckbox.checked;
    
    console.log('üîÑ toggleSelectAll called, isChecked:', isChecked);
    
    if (isChecked) {
        // ‚≠ê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        console.log('‚úÖ Selecting all items...');
        filteredItemsData.forEach(function(itemObj) {
            selectedItemsForEdit.add(itemObj.barcode);
        });
    } else {
        // ‚≠ê ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        console.log('‚ùå Deselecting all items...');
        selectedItemsForEdit.clear();
    }
    
    console.log('üìä Selected items count:', selectedItemsForEdit.size);
    
    // ‚≠ê ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å displayFilteredItemsTable())
    const checkboxes = document.querySelectorAll('.item-checkbox');
    const rows = document.querySelectorAll('.edit-items-table tbody tr');
    
    checkboxes.forEach(function(checkbox) {
        const barcode = checkbox.dataset.barcode;
        if (barcode) {
            checkbox.checked = selectedItemsForEdit.has(barcode);
        }
    });
    
    rows.forEach(function(row) {
        const checkbox = row.querySelector('.item-checkbox');
        if (checkbox && checkbox.dataset.barcode) {
            const barcode = checkbox.dataset.barcode;
            if (selectedItemsForEdit.has(barcode)) {
                row.classList.add('selected');
            } else {
                row.classList.remove('selected');
            }
        }
    });
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    updateEditButtonState();
}


/**
 * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ checkbox ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏Å‡πâ logic)
 */
function updateSelectAllCheckbox() {
    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    if (!selectAllCheckbox) return;
    
    const totalItems = filteredItemsData.length;
    const selectedCount = selectedItemsForEdit.size;
    
    console.log('üîÑ updateSelectAllCheckbox: selected=' + selectedCount + ', total=' + totalItems);
    
    if (selectedCount === 0) {
        // ‚≠ê ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏¢
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
    } else if (selectedCount === totalItems) {
        // ‚≠ê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
    } else {
        // ‚≠ê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = true;
    }
}

/**
 * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
 */
function updateEditButtonState() {
    const editBtn = document.getElementById('editSelectedBtn');
    if (!editBtn) return;
    
    if (selectedItemsForEdit.size > 0) {
        editBtn.disabled = false;
    } else {
        editBtn.disabled = true;
    }
}



/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 */
function editSelectedItems() {
    if (selectedItemsForEdit.size === 0) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡∫Å‡ªà‡∫≠‡∫ô');
        return;
    }
    
    console.log('Editing items:', selectedItemsForEdit.size);
    
    displayEditForm();
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Auto-complete ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
 */
function displayEditForm() {
    const formFields = document.getElementById('editFormFields');
    if (!formFields) return;
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
    const isSingle = selectedItemsForEdit.size === 1;
    let sampleItem = null;
    
    if (isSingle) {
        const barcode = Array.from(selectedItemsForEdit)[0];
        sampleItem = itemsData.get(barcode);
    }
    
    formFields.innerHTML = '<div class="edit-form-grid">' +
        '<div class="edit-form-field">' +
        '<label class="edit-form-label">‡∫•‡∫∞‡∫´‡∫±‡∫î (A):</label>' +
        '<input type="text" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnA : '-') + '" disabled>' +
        '</div>' +
        '<div class="edit-form-field">' +
        '<label class="edit-form-label">‡∫ä‡∫∑‡ªà‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô (B):</label>' +
        '<input type="text" id="editColumnB" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnB : '') + '" placeholder="‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡∫ä‡∫∑‡ªà...">' +
        '</div>' +
        '<div class="edit-form-field">' +
        '<label class="edit-form-label">‡∫•‡∫≤‡∫Ñ‡∫≤‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤ (C):</label>' +
        '<input type="number" id="editColumnC" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnC : '') + '" placeholder="0">' +
        '</div>' +
        '<div class="edit-form-field">' +
        '<label class="edit-form-label">‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô (D):</label>' +
        '<input type="number" id="editColumnD" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnD : '') + '" placeholder="0">' +
        '</div>' +
        '<div class="edit-form-field">' +
        '<label class="edit-form-label">‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫´‡∫º‡∫∑‡∫≠ (F):</label>' +
        '<input type="number" id="editColumnF" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnF : '') + '" placeholder="0">' +
        '</div>' +
        // ‚≠ê ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Unit ‡πÄ‡∏õ‡πá‡∏ô Auto-complete
        '<div class="edit-form-field">' +
        '<label class="edit-form-label">‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç (H):</label>' +
        '<input list="editUnitDatalist" id="editColumnH" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnH : '') + '" placeholder="‡∫û‡∫¥‡∫° ‡∫´‡∫º‡∫∑ ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç...">' +
        '<datalist id="editUnitDatalist">' + generateUnitOptions() + '</datalist>' +
        '</div>' +
        '<div class="edit-form-field">' +
        '<label class="edit-form-label">‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ï‡ªç‡ªà‡ªú‡ªà‡∫ß‡∫ç (I):</label>' +
        '<input type="number" id="editColumnI" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnI : '') + '" placeholder="1">' +
        '</div>' +
        '<div class="edit-form-field full-width">' +
        '<label class="edit-form-label">URL ‡∫Æ‡∫π‡∫ö (K):</label>' +
        '<input type="text" id="editColumnK" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnK : '') + '" placeholder="https://...">' +
        '</div>' +
        // ‚≠ê ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Category ‡πÄ‡∏õ‡πá‡∏ô Auto-complete
        '<div class="edit-form-field">' +
        '<label class="edit-form-label">‡ªù‡∫ß‡∫î‡ªù‡∫π‡ªà (L):</label>' +
        '<input list="editCategoryDatalist" id="editColumnL" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnL : '') + '" placeholder="‡∫û‡∫¥‡∫° ‡∫´‡∫º‡∫∑ ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªù‡∫ß‡∫î‡ªù‡∫π‡ªà...">' +
        '<datalist id="editCategoryDatalist">' + generateCategoryOptionsForDatalist() + '</datalist>' +
        '</div>' +
        // ‚≠ê ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Zone ‡πÄ‡∏õ‡πá‡∏ô Auto-complete
        '<div class="edit-form-field">' +
        '<label class="edit-form-label">‡ªÇ‡∫ä‡∫ô (M):</label>' +
        '<input list="editZoneDatalist" id="editColumnM" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnM : '') + '" placeholder="‡∫û‡∫¥‡∫° ‡∫´‡∫º‡∫∑ ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÇ‡∫ä‡∫ô...">' +
        '<datalist id="editZoneDatalist">' + generateZoneOptionsForDatalist() + '</datalist>' +
        '</div>' +
        '<div class="edit-form-field full-width">' +
        '<label class="edit-form-label">‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô (N):</label>' +
        '<input type="number" id="editColumnN" class="edit-form-input" value="' + (isSingle && sampleItem ? sampleItem.columnN : '') + '" placeholder="0">' +
        '</div>' +
        '</div>';
    
    editFormModal.classList.add('show');
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Datalist ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function generateCategoryOptionsForDatalist() {
    let html = '';
    uniqueCategories.forEach(function(cat) {
        html += '<option value="' + cat + '">';
    });
    return html;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Datalist ‡πÇ‡∏ã‡∏ô (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function generateZoneOptionsForDatalist() {
    let html = '';
    uniqueZones.forEach(function(zone) {
        html += '<option value="' + zone + '">';
    });
    return html;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Datalist ‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function generateUnitOptions() {
    let html = '';
    uniqueUnits.forEach(function(unit) {
        html += '<option value="' + unit + '">';
    });
    return html;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dropdown ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
 */
function generateCategoryOptions(selectedValue) {
    let html = '';
    uniqueCategories.forEach(function(cat) {
        const selected = cat === selectedValue ? 'selected' : '';
        html += '<option value="' + cat + '" ' + selected + '>' + cat + '</option>';
    });
    return html;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dropdown ‡πÇ‡∏ã‡∏ô
 */
function generateZoneOptions(selectedValue) {
    let html = '';
    uniqueZones.forEach(function(zone) {
        const selected = zone === selectedValue ? 'selected' : '';
        html += '<option value="' + zone + '" ' + selected + '>' + zone + '</option>';
    });
    return html;
}

/**
 * ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
 */
function closeEditFormModal() {
    if (editFormModal) {
        editFormModal.classList.remove('show');
    }
}


/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á Alert ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô)
 */
function saveEditedItems() {
    if (selectedItemsForEdit.size === 0) {
        alert('‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡∫ó‡∫µ‡ªà‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å');
        return;
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    const editedData = {
        columnB: document.getElementById('editColumnB').value.trim(),
        columnC: parseFloat(document.getElementById('editColumnC').value) || 0,
        columnD: parseFloat(document.getElementById('editColumnD').value) || 0,
        columnF: parseFloat(document.getElementById('editColumnF').value) || 0,
        columnH: document.getElementById('editColumnH').value.trim(),
        columnI: parseFloat(document.getElementById('editColumnI').value) || 1,
        columnK: document.getElementById('editColumnK').value.trim(),
        columnL: document.getElementById('editColumnL').value.trim(),
        columnM: document.getElementById('editColumnM').value.trim(),
        columnN: parseFloat(document.getElementById('editColumnN').value) || 0
    };
    
    console.log('Edited data:', editedData);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasChanges = editedData.columnB || 
                       editedData.columnC > 0 || 
                       editedData.columnD > 0 || 
                       editedData.columnF > 0 || 
                       editedData.columnH || 
                       editedData.columnI > 0 || 
                       editedData.columnK || 
                       editedData.columnL || 
                       editedData.columnM || 
                       editedData.columnN > 0;
    
    if (!hasChanges) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç');
        return;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á Loading
    showSavingAnimation();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Array ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const updates = [];
    
    selectedItemsForEdit.forEach(function(barcode) {
        const update = { barcode: barcode };
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        if (editedData.columnB) update.columnB = editedData.columnB;
        if (editedData.columnC > 0) update.columnC = editedData.columnC;
        if (editedData.columnD > 0) update.columnD = editedData.columnD;
        if (editedData.columnF > 0) update.columnF = editedData.columnF;
        if (editedData.columnH) update.columnH = editedData.columnH;
        if (editedData.columnI > 0) update.columnI = editedData.columnI;
        if (editedData.columnK) update.columnK = editedData.columnK;
        if (editedData.columnL) update.columnL = editedData.columnL;
        if (editedData.columnM) update.columnM = editedData.columnM;
        if (editedData.columnN > 0) update.columnN = editedData.columnN;
        
        updates.push(update);
    });
    
    console.log('Sending updates:', updates.length);
    
    // ‡∏™‡πà‡∏á‡πÑ‡∏õ Backend
    google.script.run
        .withSuccessHandler(function(result) {
            if (result.success) {
                console.log('Updated successfully:', result.updatedCount);
                
                // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô itemsData
                selectedItemsForEdit.forEach(function(barcode) {
                    const item = itemsData.get(barcode);
                    if (item) {
                        if (editedData.columnB) item.columnB = editedData.columnB;
                        if (editedData.columnC > 0) item.columnC = editedData.columnC;
                        if (editedData.columnD > 0) item.columnD = editedData.columnD;
                        if (editedData.columnF > 0) item.columnF = editedData.columnF;
                        if (editedData.columnH) item.columnH = editedData.columnH;
                        if (editedData.columnI > 0) item.columnI = editedData.columnI;
                        if (editedData.columnK) item.columnK = editedData.columnK;
                        if (editedData.columnL) item.columnL = editedData.columnL;
                        if (editedData.columnM) item.columnM = editedData.columnM;
                        if (editedData.columnN > 0) item.columnN = editedData.columnN;
                    }
                });
                
                showSuccessAnimation();
                
                setTimeout(function() {
                    hideSavingAnimation();
                    closeEditFormModal();
                    
                    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                    showFilteredItems();
                    
                    // ‚≠ê ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á Alert - ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ
                    console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result.updatedCount, '‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô');
                }, 2000);
            } else {
                hideSavingAnimation();
                alert('‚ùå ‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ' + result.error);
            }
        })
        .withFailureHandler(function(error) {
            hideSavingAnimation();
            alert('‚ùå ‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ' + error.message);
        })
        .updateMultipleItems(updates);
}

/**
 * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
 */
window.addEventListener('load', function() {
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    const checkDataLoaded = setInterval(function() {
        if (dataLoaded.items) {
            clearInterval(checkDataLoaded);
            createEditItemsButton();
        }
    }, 500);
});
/**
 * ========================================
 * ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠
 * ========================================
 */

let selectedStoresForDecision = [];
let decisionTableVisible = false;

/**
 * ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 */
function clearOrderTable() {
    if (orderItems.length === 0) {
        alert('‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫ß‡ªà‡∫≤‡∫á‡∫¢‡∫π‡ªà‡ªÅ‡∫•‡ªâ‡∫ß');
        return;
    }
    
    if (!confirm('‡∫ó‡ªà‡∫≤‡∫ô‡ªÅ‡∫ô‡ªà‡ªÉ‡∫à‡∫ö‡ªç‡ªà‡∫ß‡ªà‡∫≤‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫•‡ªâ‡∫≤‡∫á‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î?')) {
        return;
    }
    
    console.log('üóëÔ∏è Clearing order table...');
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    orderItems = [];
    selectedItemsForOrder.clear();
    selectedStoresForDecision = [];
    decisionTableVisible = false;
    // ‚≠ê ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô + ‡∏•‡∏ö class
    const thead = document.querySelector('.order-table thead tr');
    const table = document.querySelector('.order-table');
    
    if (thead) {
        const existingStoreCols = thead.querySelectorAll('.store-column-header');
        existingStoreCols.forEach(col => col.remove());
    }
    
    if (table) {
        table.classList.remove('with-stores');
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç PO ‡πÉ‡∏´‡∏°‡πà
    currentOrderNumber = generateOrderNumber();
    const orderNumberElement = document.getElementById('currentOrderNumber');
    orderNumberElement.textContent = currentOrderNumber;
    orderNumberElement.dataset.isLoaded = 'false';
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    updateOrderTable();
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    const compareSection = document.getElementById('compareSection');
    if (compareSection) compareSection.style.display = 'none';
    
    console.log('‚úÖ Table cleared, new PO:', currentOrderNumber);
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠)
 */
function showDecisionBuyModal() {
    if (orderItems.length === 0) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤‡∫•‡∫ª‡∫á‡ªÉ‡∫ô‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫Å‡ªà‡∫≠‡∫ô');
        return;
    }
    
    const modal = document.createElement('div');
    modal.id = 'decisionBuyModal';
    modal.className = 'store-selector-modal show';
    
    modal.innerHTML = '<div class="store-selector-content">' +
        '<div class="store-selector-header">‚úÖ ‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫Æ‡ªâ‡∫≤‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫ï‡∫±‡∫î‡∫™‡∫¥‡∫ô‡ªÉ‡∫à‡∫ä‡∫∑‡ªâ</div>' +
        '<input type="text" id="decisionStoreSearchInput" class="store-search-input" placeholder="‡∫Ñ‡∫ª‡ªâ‡∫ô‡∫´‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô..." onkeyup="filterDecisionStores()">' +
        '<div class="store-list" id="decisionStoreListContainer">' + generateDecisionStoreListHTML() + '</div>' +
        '<div class="store-selector-actions">' +
        '<button class="btn-cancel-stores" onclick="closeDecisionBuyModal()">‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å</button>' +
        '<button class="btn-confirm-stores" onclick="confirmDecisionStores()">‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô</button>' +
        '</div>' +
        '</div>';
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) closeDecisionBuyModal();
    });
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô
 */
function generateDecisionStoreListHTML() {
    if (!storeList || storeList.length === 0) {
        return '<p style="text-align: center; color: #999;">‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Æ‡ªâ‡∫≤‡∫ô</p>';
    }
    
    let html = '';
    storeList.forEach(function(store) {
        const isSelected = selectedStoresForDecision.includes(store);
        html += '<div class="store-item ' + (isSelected ? 'selected' : '') + '" onclick="toggleDecisionStoreSelection(\'' + store + '\')">';
        html += '<input type="checkbox" class="store-checkbox" value="' + store + '" ' + (isSelected ? 'checked' : '') + ' onchange="event.stopPropagation(); toggleDecisionStoreSelection(\'' + store + '\')">';
        html += '<span>' + store + '</span>';
        html += '</div>';
    });
    
    return html;
}

/**
 * Toggle ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô
 */
function toggleDecisionStoreSelection(storeName) {
    const index = selectedStoresForDecision.indexOf(storeName);
    
    if (index > -1) {
        selectedStoresForDecision.splice(index, 1);
    } else {
        selectedStoresForDecision.push(storeName);
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
    const items = document.querySelectorAll('#decisionStoreListContainer .store-item');
    items.forEach(function(item) {
        const checkbox = item.querySelector('.store-checkbox');
        if (checkbox && checkbox.value === storeName) {
            checkbox.checked = selectedStoresForDecision.includes(storeName);
            if (selectedStoresForDecision.includes(storeName)) {
                item.classList.add('selected');
            } else {
                item.classList.remove('selected');
            }
        }
    });
}

/**
 * ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô
 */
function filterDecisionStores() {
    const input = document.getElementById('decisionStoreSearchInput');
    const filter = input.value.toLowerCase();
    const container = document.getElementById('decisionStoreListContainer');
    const items = container.getElementsByClassName('store-item');
    
    for (let i = 0; i < items.length; i++) {
        const text = items[i].textContent || items[i].innerText;
        if (text.toLowerCase().indexOf(filter) > -1) {
            items[i].style.display = '';
        } else {
            items[i].style.display = 'none';
        }
    }
}

/**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô
 */
function confirmDecisionStores() {
    if (selectedStoresForDecision.length === 0) {
        alert('‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫Æ‡ªâ‡∫≤‡∫ô‡∫¢‡ªà‡∫≤‡∫á‡ªú‡ªâ‡∫≠‡∫ç 1 ‡∫Æ‡ªâ‡∫≤‡∫ô');
        return;
    }
    
    console.log('‚úÖ Selected stores:', selectedStoresForDecision);
    
    closeDecisionBuyModal();
    generateDecisionTable();
}

/**
 * ‡∏õ‡∏¥‡∏î Modal
 */
function closeDecisionBuyModal() {
    const modal = document.getElementById('decisionBuyModal');
    if (modal) modal.remove();
}
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢)
 */
function generateDecisionTable() {
    console.log('üé® Generating decision table with stores:', selectedStoresForDecision);
    console.log('üìä priceStudyData size:', priceStudyData.size);
    
    const tbody = document.getElementById('orderTableBody');
    if (!tbody) return;
    
    // ‚≠ê ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô
    const storeData = [];
    
    selectedStoresForDecision.forEach(function(storeName) {
        console.log('\nüè™ Processing store:', storeName);
        
        const data = {
            storeName: storeName,
            items: [],
            total: 0
        };
        
        orderItems.forEach(function(orderItem, idx) {
            const barcode = orderItem.barcode.toString().trim();
            const quantity = orderItem.quantity;
            const mainPrice = orderItem.price; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
            
            console.log('  üì¶ Item ' + (idx + 1) + ':', orderItem.itemName, '| Barcode:', barcode);
            
            // ‚≠ê ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∫™‡∫∂‡∫Å‡∫™‡∫≤‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô
            const priceStudyItems = priceStudyData.get(barcode);
            let storePrice = null;
            let source = 'main';
            
            if (priceStudyItems && priceStudyItems.length > 0) {
                console.log('    üîç Found price study data:', priceStudyItems.length, 'entries');
                
                // ‚≠ê ‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡πÉ‡∏ä‡πâ toLowerCase + trim)
                const matchedItem = priceStudyItems.find(function(item) {
                    const itemStore = (item.store || '').toString().toLowerCase().trim();
                    const targetStore = storeName.toLowerCase().trim();
                    
                    console.log('      Comparing:', itemStore, '===', targetStore, '?', itemStore === targetStore);
                    
                    return itemStore === targetStore;
                });
                
                if (matchedItem) {
                    console.log('    ‚úÖ MATCH FOUND!');
                    console.log('      Store:', matchedItem.store);
                    console.log('      Price (Column H):', matchedItem.price);
                    
                    if (matchedItem.price > 0) {
                        storePrice = matchedItem.price;
                        source = 'priceStudy';
                        console.log('    ‚úÖ Using price from ‡∫™‡∫∂‡∫Å‡∫™‡∫≤‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô:', storePrice);
                    } else {
                        console.log('    ‚ö†Ô∏è Price is 0, using main table');
                    }
                } else {
                    console.log('    ‚ùå No match found, using main table price');
                }
            } else {
                console.log('    ‚ùå No price study data for this barcode');
            }
            
            // ‚≠ê ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤ ‚Üí ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
            if (storePrice === null) {
                storePrice = mainPrice;
                source = 'main';
                console.log('    üìã Using main table price:', storePrice);
            }
            
            const total = quantity * storePrice;
            
            data.items.push({
                price: storePrice,
                total: total,
                source: source,
                mainPrice: mainPrice, // ‚≠ê ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
                mainTotal: quantity * mainPrice
            });
            
            data.total += total;
            
            console.log('    üí∞ Final: price=' + storePrice + ', total=' + total + ', source=' + source);
        });
        
        console.log('  üè™ Store total:', data.total);
        storeData.push(data);
    });
    
    console.log('\nüìä All store data:', storeData);
    
    // ‚≠ê ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å)
const cheapestPerRow = [];

orderItems.forEach(function(orderItem, rowIdx) {
    // ‚≠ê ‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å)
    const storeTotals = [];
    
    storeData.forEach(function(store, storeIdx) {
        storeTotals.push({
            source: 'store_' + storeIdx,
            total: store.items[rowIdx].total
        });
    });
    
    // ‚≠ê ‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    let minTotal = storeTotals[0].total;
    let cheapestSource = storeTotals[0].source;
    
    for (let i = 1; i < storeTotals.length; i++) {
        if (storeTotals[i].total < minTotal) {
            minTotal = storeTotals[i].total;
            cheapestSource = storeTotals[i].source;
        }
    }
    
    cheapestPerRow.push(cheapestSource);
    
    console.log('Row ' + rowIdx + ' cheapest store:', cheapestSource, 'with total:', minTotal);
});
    
   // ‚≠ê ‡∏´‡∏≤‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å)
const mainTotal = orderItems.reduce(function(sum, item) {
    return sum + (item.quantity * item.price);
}, 0);

// ‚≠ê ‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
const storeTotals = [];

storeData.forEach(function(store, idx) {
    storeTotals.push({
        source: 'store_' + idx,
        total: store.total
    });
});

// ‚≠ê ‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
let globalMinTotal = storeTotals[0].total;
let globalCheapestSource = storeTotals[0].source;

for (let i = 1; i < storeTotals.length; i++) {
    if (storeTotals[i].total < globalMinTotal) {
        globalMinTotal = storeTotals[i].total;
        globalCheapestSource = storeTotals[i].source;
    }
}

console.log('üèÜ Global cheapest store:', globalCheapestSource, 'with total:', globalMinTotal);
    
    // ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML
    let html = '';
    
    orderItems.forEach(function(item, index) {
        const imgHtml = item.image ? 
            '<img src="' + item.image + '" class="order-table-img">' : 
            '<div class="no-order-img">üì∑</div>';
        
       // ‚≠ê ‡πÑ‡∏°‡πà‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏î‡πâ‡∏ß‡∏¢)
html += '<tr>';
html += '<td>' + (index + 1) + '</td>';
html += '<td>' + item.barcode + '</td>';
html += '<td>' + imgHtml + '</td>';
html += '<td>' + item.itemName + '</td>';
html += '<td>' + item.unit + '</td>';
html += '<td><input type="number" class="order-quantity-input" value="' + item.quantity + '" min="1" onchange="updateOrderItemQuantity(' + index + ', this.value)"></td>';
html += '<td>' + item.price.toLocaleString() + '</td>';
html += '<td>' + item.total.toLocaleString() + '</td>'; // ‚≠ê ‡πÑ‡∏°‡πà‡∏°‡∏µ class
        
        // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô
        storeData.forEach(function(store, storeIdx) {
            const itemData = store.items[index];
            const isStoreCheapest = cheapestPerRow[index] === 'store_' + storeIdx;
            
            // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡∏≤‡∏Ñ‡∏≤
            const priceClass = isStoreCheapest ? 'store-price-cell cheapest-store' : 'store-price-cell';
            const sourceLabel = itemData.source === 'main' ? ' <span class="main-table-label">(‡∫ï‡∫≤‡∫ï‡∫∞‡∫•‡∫≤‡∫á‡∫´‡∫º‡∫±‡∫Å)</span>' : '';
            html += '<td class="' + priceClass + '">' + itemData.price.toLocaleString() + sourceLabel + '</td>';
            
            // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
            const totalClass = isStoreCheapest ? 'store-total-cell cheapest-store' : 'store-total-cell';
            html += '<td class="' + totalClass + '">' + itemData.total.toLocaleString() + '</td>';
        });
        
        html += '<td><button class="btn-delete-item" onclick="deleteOrderItem(' + index + ')">‚ùå</button></td>';
        html += '</tr>';
    });
    
    tbody.innerHTML = html;
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Header
    updateDecisionTableHeader();
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Summary (‡∏™‡πà‡∏á globalCheapestSource)
    updateDecisionSummary(storeData, globalCheapestSource, mainTotal);
    
    decisionTableVisible = true;
}
function updateDecisionTableHeader() {
    const thead = document.querySelector('.order-table thead tr');
    const table = document.querySelector('.order-table');
    if (!thead || !table) return;
    
    // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° class ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
    table.classList.add('with-stores');
    
    // ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const existingStoreCols = thead.querySelectorAll('.store-column-header');
    existingStoreCols.forEach(col => col.remove());
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡πâ‡∏≤‡∏ô
    selectedStoresForDecision.forEach(function(storeName) {
        const th1 = document.createElement('th');
        th1.className = 'store-column-header';
        th1.textContent = 'üè™ ' + storeName + ' (‡∫•‡∫≤‡∫Ñ‡∫≤)';
        thead.insertBefore(th1, thead.lastElementChild);
        
        const th2 = document.createElement('th');
        th2.className = 'store-column-header';
        th2.textContent = 'üè™ ' + storeName + ' (‡∫•‡∫ß‡∫°)';
        thead.insertBefore(th2, thead.lastElementChild);
    });
}

/**
 * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Summary Row (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢)
 */
function updateDecisionSummary(storeData, globalCheapestSource, mainTotal) {
    const tbody = document.getElementById('orderTableBody');
    if (!tbody) return;
    
    // ‡∏•‡∏ö Summary Row ‡πÄ‡∏Å‡πà‡∏≤
    const existingSummary = tbody.querySelector('.summary-row');
    if (existingSummary) existingSummary.remove();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Summary Row (‡πÑ‡∏°‡πà‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å)
let summaryHTML = '<tr class="summary-row">';
summaryHTML += '<td colspan="7" style="text-align: right;">üí∞ ‡∫•‡∫ß‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î:</td>';
summaryHTML += '<td>' + mainTotal.toLocaleString() + ' ‡∫Å‡∫µ‡∫ö</td>'; // ‚≠ê ‡πÑ‡∏°‡πà‡∏°‡∏µ class
    
    storeData.forEach(function(store, idx) {
        const isStoreCheapest = globalCheapestSource === 'store_' + idx;
        const className = isStoreCheapest ? 'summary-store-cell summary-cheapest' : 'summary-store-cell';
        summaryHTML += '<td colspan="2" class="' + className + '">' + store.total.toLocaleString() + ' ‡∫Å‡∫µ‡∫ö</td>';
    });
    
    summaryHTML += '<td></td>';
    summaryHTML += '</tr>';
    
    tbody.insertAdjacentHTML('beforeend', summaryHTML);
    
    updateOrderTotal();
}

/**
 * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó updateOrderTable() ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
 */
// ‚≠ê ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô updateOrderTable() ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ
function updateOrderTable() {
    const tbody = document.getElementById('orderTableBody');
    const comparePriceBtn = document.getElementById('comparePriceBtn');
    const decisionBuyBtn = document.getElementById('decisionBuyBtn');
    
    if (!tbody) return;
    
    if (orderItems.length === 0) {
        tbody.innerHTML = '<tr><td colspan="9" style="text-align: center; padding: 40px; color: #999;">‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ<br>‡∫Å‡∫ª‡∫î‡∫õ‡∫∏‡ªà‡∫° "üîî ‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫™‡∫∞‡∫ï‡∫±‡∫≠‡∫Å" ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤</td></tr>';
        comparePriceBtn.disabled = true;
        decisionBuyBtn.disabled = true;
        updateOrderTotal();
        
        
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Header
const thead = document.querySelector('.order-table thead tr');
const table = document.querySelector('.order-table');
if (thead) {
    const existingStoreCols = thead.querySelectorAll('.store-column-header');
    existingStoreCols.forEach(col => col.remove());
}
// ‚≠ê ‡∏•‡∏ö class ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á
if (table) {
    table.classList.remove('with-stores');
}
        decisionTableVisible = false;
        selectedStoresForDecision = [];
        return;
    }
    
    comparePriceBtn.disabled = false;
    decisionBuyBtn.disabled = false;
    
    // ‚≠ê ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠ ‚Üí ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
    if (decisionTableVisible && selectedStoresForDecision.length > 0) {
        generateDecisionTable();
        return;
    }
    
    // ‚≠ê ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    let html = '';
    orderItems.forEach(function(item, index) {
        const highlightClass = selectedItemsForOrder.has(item.barcode) ? 'item-highlighted' : '';
        const imgHtml = item.image ? '<img src="' + item.image + '" class="order-table-img">' : '<div class="no-order-img">üì∑</div>';
        
        html += '<tr class="' + highlightClass + '">';
        html += '<td>' + (index + 1) + '</td>';
        html += '<td>' + item.barcode + '</td>';
        html += '<td>' + imgHtml + '</td>';
        html += '<td>' + item.itemName + '</td>';
        html += '<td>' + item.unit + '</td>';
        html += '<td><input type="number" class="order-quantity-input" value="' + item.quantity + '" min="1" onchange="updateOrderItemQuantity(' + index + ', this.value)"></td>';
        html += '<td>' + item.price.toLocaleString() + '</td>';
        html += '<td>' + (item.quantity * item.price).toLocaleString() + '</td>';
        html += '<td><button class="btn-delete-item" onclick="deleteOrderItem(' + index + ')">‚ùå</button></td>';
        html += '</tr>';
    });
    
    tbody.innerHTML = html;
    updateOrderTotal();
}
    </script>
</body>
</html>
