/**
 * ระบบสแกนขายสินค้า - Google Apps Script Backend
 */

// กำหนดชื่อ Spreadsheet และ Sheet
const SPREADSHEET_ID = '10SgCZ2H-4d37-3Slcj-riBK2SDgAbYpXW6SZvgSFUa8';
const ITEMS_SHEET = 'Items';
const PRICE_STUDY_SHEET = 'ສຶກສາລາຄາຕົ້ນທຶນ';
const ORDER_SHEET_ID = '1zk7v8iClQjGf7WseWld_hwix4upAr7KoGqn-eo01fgk';
const ORDER_SHEET = 'ສັ່ງຊື້ສິນຄ້າ';

const INITIAL_QUOTA = 20000;

/**
 * เปิดหน้าเว็บ HTML
 */
function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/**
 * ดึงข้อมูลจากตาราง Items
 */
function getItemsData() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(ITEMS_SHEET);
   
    if (!sheet) {
      Logger.log('Sheet "' + ITEMS_SHEET + '" not found');
      return [];
    }
   
    const data = sheet.getDataRange().getValues();
    if (!data || data.length <= 1) {
      Logger.log('No data in Items sheet');
      return [];
    }
    
    const headers = data[0];
    const rows = data.slice(1);
   
    const result = [];
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const item = {};
      for (let j = 0; j < headers.length; j++) {
        item['column' + String.fromCharCode(65 + j)] = row[j] || '';
      }
      result.push(item);
    }
    
    return result;
  } catch (error) {
    Logger.log('Error getting items data: ' + error.toString());
    return [];
  }
}

/**
 * ดึงข้อมูลจากตาราง ສຶກສາລາຄາຕົ້ນທຶນ
 */
function getPriceStudyData() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(PRICE_STUDY_SHEET);
   
    if (!sheet) {
      Logger.log('Sheet "' + PRICE_STUDY_SHEET + '" not found - returning empty array');
      return [];
    }
   
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      Logger.log('Sheet "' + PRICE_STUDY_SHEET + '" has no data - returning empty array');
      return [];
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const rows = data.slice(1);
   
    const result = [];
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const item = {};
      for (let j = 0; j < headers.length; j++) {
        item['column' + String.fromCharCode(65 + j)] = row[j] || '';
      }
      result.push(item);
    }
    
    Logger.log('getPriceStudyData returning ' + result.length + ' items');
    return result;
  } catch (error) {
    Logger.log('Error getting price study data: ' + error.toString());
    return [];
  }
}

/**
 * ดึงรายการร้านทั้งหมดจาก Column F
 */
function getStoreList() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(PRICE_STUDY_SHEET);
   
    if (!sheet) {
      Logger.log('Sheet "' + PRICE_STUDY_SHEET + '" not found');
      return [];
    }
   
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return [];
    }
    
    const data = sheet.getRange('F2:F' + lastRow).getValues();
    const storesSet = {};
    
    for (let i = 0; i < data.length; i++) {
      const store = data[i][0];
      if (store && store.toString().trim()) {
        storesSet[store.toString().trim()] = true;
      }
    }
    
    const stores = Object.keys(storesSet).sort();
    return stores;
  } catch (error) {
    Logger.log('Error getting store list: ' + error.toString());
    return [];
  }
}

/**
 * บันทึกใบสั่งซื้อ (แก้ไข: รองรับการลบและทับข้อมูลเดิม)
 */
function saveOrder(orderData) {
  try {
    const ss = SpreadsheetApp.openById(ORDER_SHEET_ID);
    let sheet = ss.getSheetByName(ORDER_SHEET);
    
    // ถ้ายังไม่มี sheet ให้สร้างใหม่
    if (!sheet) {
      sheet = ss.insertSheet(ORDER_SHEET);
      // สร้าง header
      sheet.appendRow(['ວັນທີ', 'ເລກທີໃບສັ່ງຊື້', 'ລະຫັດສິນຄ້າ', 'ຊື່ສິນຄ້າ', 'ຫົວໜ່ວຍ', 'ຈຳນວນ', 'ລາຄາ/ໜ່ວຍ', 'ລວມເງິນ', 'ວິທີການ']);
    }
    
    const orderNumber = orderData.orderNumber;
    const method = orderData.method;
    const isUpdate = orderData.isUpdate || false; // เพิ่ม flag สำหรับการอัพเดท
    
    // ถ้าเป็นการอัพเดท ให้ลบแถวเก่าก่อน
    if (isUpdate) {
      deleteOrderRows(sheet, orderNumber);
    }
    
    const timestamp = new Date();
    
    // เพิ่มข้อมูลแต่ละรายการ
    const items = orderData.items;
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      sheet.appendRow([
        timestamp,
        orderNumber,
        item.barcode,
        item.itemName,
        item.unit,
        item.quantity,
        item.price,
        item.total,
        method
      ]);
    }
    
    return { success: true, orderNumber: orderNumber };
  } catch (error) {
    Logger.log('Error saving order: ' + error.toString());
    return { success: false, error: error.toString() };
  }
}

/**
 * ดึงข้อมูลใบสั่งซื้อเดิม
 */
function loadOrder(orderNumber) {
  try {
    const ss = SpreadsheetApp.openById(ORDER_SHEET_ID);
    const sheet = ss.getSheetByName(ORDER_SHEET);
    
    if (!sheet) {
      return { success: false, items: [] };
    }
    
    const data = sheet.getDataRange().getValues();
    if (!data || data.length <= 1) {
      return { success: false, items: [] };
    }
    
    const headers = data[0];
    const rows = data.slice(1);
    
    // เปิด Items sheet เพื่อดึงรูปภาพ
    const itemsSS = SpreadsheetApp.openById(SPREADSHEET_ID);
    const itemsSheet = itemsSS.getSheetByName(ITEMS_SHEET);
    const itemsData = itemsSheet ? itemsSheet.getDataRange().getValues() : [];
    
    // สร้าง Map สำหรับค้นหารูปภาพจาก barcode
    const itemsImageMap = {};
    if (itemsData.length > 1) {
      for (let i = 1; i < itemsData.length; i++) {
        const barcode = itemsData[i][0]; // Column A
        const image = itemsData[i][10]; // Column K (index 10)
        if (barcode) {
          itemsImageMap[barcode.toString().trim()] = image || '';
        }
      }
    }
    
    const orderItems = [];
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      if (row[1] === orderNumber) {
        const barcode = row[2];
        const image = itemsImageMap[barcode.toString().trim()] || ''; // ดึงรูปจาก Items sheet
        
        orderItems.push({
          barcode: barcode,
          itemName: row[3],
          unit: row[4],
          quantity: row[5],
          price: row[6],
          total: row[7],
          image: image // เพิ่มรูปภาพ
        });
      }
    }
    
    return { success: true, items: orderItems };
  } catch (error) {
    Logger.log('Error loading order: ' + error.toString());
    return { success: false, items: [] };
  }
}

/**
 * สร้างเลขที่ใบสั่งซื้อใหม่
 */
function generateOrderNumber() {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const time = String(now.getHours()).padStart(2, '0') + String(now.getMinutes()).padStart(2, '0');
  
  return 'PO-' + year + month + day + '-' + time;
}

function debugPriceStudy() {
  try {
    const ss = SpreadsheetApp.openById('10SgCZ2H-4d37-3Slcj-riBK2SDgAbYpXW6SZvgSFUa8');
    Logger.log('Spreadsheet opened: ' + ss.getName());
    
    const sheet = ss.getSheetByName('ສຶກສາລາຄາຕົ້ນທຶນ');
    Logger.log('Sheet found: ' + (sheet ? 'YES' : 'NO'));
    
    if (sheet) {
      Logger.log('Last Row: ' + sheet.getLastRow());
      Logger.log('Last Column: ' + sheet.getLastColumn());
      
      const data = sheet.getDataRange().getValues();
      Logger.log('Data rows: ' + data.length);
      Logger.log('First row: ' + JSON.stringify(data[0]));
    }
    
    const result = getPriceStudyData();
    Logger.log('getPriceStudyData result length: ' + result.length);
    Logger.log('First item: ' + JSON.stringify(result[0]));
    
  } catch (error) {
    Logger.log('ERROR: ' + error.toString());
  }
}
/**
 * ลบแถวข้อมูลของใบสั่งซื้อเดิมทั้งหมด
 * ฟังก์ชันใหม่
 */
function deleteOrderRows(sheet, orderNumber) {
  try {
    const data = sheet.getDataRange().getValues();
    const rowsToDelete = [];
    
    // หาแถวที่ตรงกับ orderNumber (เริ่มจากแถวที่ 2 เพราะแถว 1 เป็น header)
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] === orderNumber) { // Column B (index 1) คือเลขที่ใบสั่งซื้อ
        rowsToDelete.push(i + 1); // +1 เพราะ array เริ่มที่ 0 แต่ row เริ่มที่ 1
      }
    }
    
    // ลบแถวจากหลังไปหน้า เพื่อไม่ให้ index เลื่อน
    for (let i = rowsToDelete.length - 1; i >= 0; i--) {
      sheet.deleteRow(rowsToDelete[i]);
    }
    
    Logger.log('Deleted ' + rowsToDelete.length + ' rows for order: ' + orderNumber);
  } catch (error) {
    Logger.log('Error deleting order rows: ' + error.toString());
  }
}
/**
 * ดึงรายการใบสั่งซื้อทั้งหมด (วันที่ + เลขที่)
 * ฟังก์ชันใหม่
 */
function getOrderList() {
  try {
    const ss = SpreadsheetApp.openById(ORDER_SHEET_ID);
    const sheet = ss.getSheetByName(ORDER_SHEET);
    
    if (!sheet) {
      return [];
    }
    
    const data = sheet.getDataRange().getValues();
    if (!data || data.length <= 1) {
      return [];
    }
    
    const ordersMap = {};
    
    // เริ่มจากแถว 2 (ข้าม header)
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const date = row[0]; // Column A - วันที่
      const orderNumber = row[1]; // Column B - เลขที่ใบสั่งซื้อ
      
      if (orderNumber) {
        // ถ้ายังไม่มีในแผนที่ ให้เพิ่มเข้าไป
        if (!ordersMap[orderNumber]) {
          const dateStr = Utilities.formatDate(new Date(date), Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm');
          ordersMap[orderNumber] = {
            orderNumber: orderNumber,
            date: dateStr,
            displayText: dateStr + ' - ' + orderNumber
          };
        }
      }
    }
    
    // แปลงเป็น array และเรียงลำดับจากใหม่ไปเก่า
    const orderList = Object.values(ordersMap).sort(function(a, b) {
      return b.orderNumber.localeCompare(a.orderNumber);
    });
    
    return orderList;
  } catch (error) {
    Logger.log('Error getting order list: ' + error.toString());
    return [];
  }
}
/**
 * สร้าง PDF และอัปโหลดไปยัง Google Drive
 * ฟังก์ชันใหม่
 */
/**
 * สร้าง PDF และอัปโหลดไปยัง Google Drive (แก้ไข: ใช้ Google Docs)
 * ฟังก์ชันใหม่
 */
function createPDFAndUploadToDrive(htmlContent, orderNumber) {
  try {
    // สร้าง Google Doc ชั่วคราว
    const tempDoc = DocumentApp.create('Temp_' + orderNumber);
    const docId = tempDoc.getId();
    const doc = DocumentApp.openById(docId);
    const body = doc.getBody();
    
    // ล้างเนื้อหาเดิม
    body.clear();
    
    // เพิ่ม Header
    const header = body.appendParagraph('ໃບສັ່ງຊື້ສິນຄ້າ');
    header.setHeading(DocumentApp.ParagraphHeading.HEADING1);
    header.setAlignment(DocumentApp.HorizontalAlignment.CENTER);
    
    // เพิ่มข้อมูลใบสั่งซื้อ
    body.appendParagraph('ເລກທີໃບສັ່ງຊື້: ' + orderNumber);
    body.appendParagraph('ວັນທີ: ' + Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm:ss'));
    body.appendParagraph(''); // บรรทัดว่าง
    
    // สร้างตาราง (ต้องดึงข้อมูลจาก orderItems)
    // หมายเหตุ: ต้องส่ง orderItems มาด้วย
    
    doc.saveAndClose();
    
    // แปลง Google Doc เป็น PDF
    const docFile = DriveApp.getFileById(docId);
    const pdfBlob = docFile.getAs('application/pdf');
    
    // ตั้งชื่อไฟล์
    const fileName = 'ໃບສັ່ງຊື້_' + orderNumber + '_' + Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'yyyyMMdd_HHmmss') + '.pdf';
    
    // เข้าถึง Google Drive folder
    const folder = DriveApp.getFolderById('1jmglJOSJFAD-1eQbtpY2Etu69fA9jtLv');
    
    // สร้างไฟล์ PDF ใน Drive
    const file = folder.createFile(pdfBlob);
    file.setName(fileName);
    
    // ตั้งค่าให้ใครก็เข้าถึงได้
    file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
    
    // ลบ Google Doc ชั่วคราว
    docFile.setTrashed(true);
    
    // ดึง URL ของไฟล์
    const fileId = file.getId();
    const directUrl = 'https://drive.google.com/file/d/' + fileId + '/view?usp=sharing';
    
    return {
      success: true,
      fileName: fileName,
      fileUrl: directUrl,
      fileId: fileId
    };
  } catch (error) {
    Logger.log('Error creating PDF: ' + error.toString());
    return {
      success: false,
      error: error.toString()
    };
  }
}
function createPDFFromOrderData(orderData) {
  try {
    // สร้าง Google Sheet ชั่วคราว
    const ss = SpreadsheetApp.create('Temp_Order_' + orderData.orderNumber);
    const sheet = ss.getActiveSheet();
    const ssId = ss.getId();

    // ตั้งค่าฟอนต์ภาษาลาว
    sheet.getRange('A:Z').setFontFamily('Noto Sans Lao');
    sheet.getRange('A:Z').setFontSize(12);

    // ตั้งค่าความกว้างคอลัมน์
    sheet.setColumnWidth(1, 50);  // ລຳດັບ
    sheet.setColumnWidth(2, 120); // ລະຫັດສິນຄ້າ
    sheet.setColumnWidth(3, 80);  // ຮູບ
    sheet.setColumnWidth(4, 200); // ຊື່ສິນຄ້າ
    sheet.setColumnWidth(5, 80);  // ຫົວໜ່ວຍ
    sheet.setColumnWidth(6, 80);  // ຈຳນວນ
    sheet.setColumnWidth(7, 100); // ລາຄາ/ໜ່ວຍ
    sheet.setColumnWidth(8, 120); // ລວມເງິນ

    let currentRow = 1;

    // === Header ===
    sheet.getRange(currentRow, 1, 1, 8).merge();
    const headerCell = sheet.getRange(currentRow, 1);
    headerCell.setValue('ໃບສັ່ງຊື້ສິນຄ້າ');
    headerCell.setFontSize(20);
    headerCell.setFontWeight('bold');
    headerCell.setHorizontalAlignment('center');
    headerCell.setVerticalAlignment('middle');
    headerCell.setBackground('#25d366');
    headerCell.setFontColor('#ffffff');
    sheet.setRowHeight(currentRow, 40);
    currentRow++;

    // บรรทัดว่าง
    sheet.setRowHeight(currentRow, 10);
    currentRow++;

    // === ข้อมูลใบสั่งซื้อ ===
    sheet.getRange(currentRow, 1).setValue('ເລກທີໃບສັ່ງຊື້:').setFontWeight('bold');
    sheet.getRange(currentRow, 2, 1, 3).merge().setValue(orderData.orderNumber);
    sheet.setRowHeight(currentRow, 25);
    currentRow++;

    sheet.getRange(currentRow, 1).setValue('ວັນທີ:').setFontWeight('bold');
    sheet.getRange(currentRow, 2, 1, 3).merge().setValue(orderData.date);
    sheet.setRowHeight(currentRow, 25);
    currentRow++;

    // บรรทัดว่าง
    sheet.setRowHeight(currentRow, 10);
    currentRow++;

    // === Header ตาราง ===
    const headerRow = currentRow;
    const headers = ['ລຳດັບ', 'ລະຫັດສິນຄ້າ', 'ຮູບ', 'ຊື່ສິນຄ້າ', 'ຫົວໜ່ວຍ', 'ຈຳນວນ', 'ລາຄາ/ໜ່ວຍ', 'ລວມເງິນ'];

    for (let i = 0; i < headers.length; i++) {
      const cell = sheet.getRange(headerRow, i + 1);
      cell.setValue(headers[i]);
      cell.setFontWeight('bold');
      cell.setBackground('#2c3e50');
      cell.setFontColor('#ffffff');
      cell.setHorizontalAlignment('center');
      cell.setVerticalAlignment('middle');
    }
    sheet.setRowHeight(headerRow, 35);
    currentRow++;

    // === ข้อมูลสินค้า ===
    const startDataRow = currentRow;

    orderData.items.forEach(function(item, index) {
      sheet.setRowHeight(currentRow, 70);

      const rowRange = sheet.getRange(currentRow, 1, 1, 8);
      rowRange.setVerticalAlignment('middle');
      rowRange.setWrap(true);

      // ລຳດັບ
      sheet.getRange(currentRow, 1)
        .setValue(index + 1)
        .setHorizontalAlignment('center');

      // ລະຫັດສິນຄ້າ
      sheet.getRange(currentRow, 2).setValue(item.barcode || '-');

      // === แทรกรูปภาพโดยตรง ===
      try {
        if (item.image && item.image.trim() !== '') {
          const response = UrlFetchApp.fetch(item.image, {
            muteHttpExceptions: true,
            validateHttpsCertificates: false
          });

          if (response.getResponseCode() === 200) {
            const blob = response.getBlob();
            const img = sheet.insertImage(blob, 3, currentRow);
            img.setAnchorCell(sheet.getRange(currentRow, 3));
            img.setAltTextTitle("image");
          } else {
            sheet.getRange(currentRow, 3).setValue('📷');
          }
        } else {
          sheet.getRange(currentRow, 3).setValue('📷');
        }
      } catch (err) {
        sheet.getRange(currentRow, 3).setValue('📷');
      }

      // ຊື່ສິນຄ້າ
      sheet.getRange(currentRow, 4).setValue(item.itemName || '-');

      // ຫົວໜ່ວຍ
      sheet.getRange(currentRow, 5)
        .setValue(item.unit || '-')
        .setHorizontalAlignment('center');

      // ຈຳນວນ
      sheet.getRange(currentRow, 6)
        .setValue(item.quantity || '-')
        .setHorizontalAlignment('center');

      // ລາຄາ/ໜ່ວຍ
      sheet.getRange(currentRow, 7)
        .setValue(item.price ? item.price.toLocaleString() : '-')
        .setHorizontalAlignment('right');

      // ລວມເງິນ
      sheet.getRange(currentRow, 8)
        .setValue(item.total ? item.total.toLocaleString() : '-')
        .setHorizontalAlignment('right');

      currentRow++;
    });

    const lastDataRow = currentRow - 1;

    // === รวมยอดทั้งหมด ===
    sheet.setRowHeight(currentRow, 35);
    sheet.getRange(currentRow, 1, 1, 7).merge();
    const totalLabelCell = sheet.getRange(currentRow, 1);
    totalLabelCell.setValue('ລວມທັງໝົດ:').setFontWeight('bold').setHorizontalAlignment('right');
    sheet.getRange(currentRow, 8)
      .setValue(orderData.total ? orderData.total.toLocaleString() + ' ກີບ' : '-')
      .setFontWeight('bold')
      .setHorizontalAlignment('right');
    const totalRow = currentRow;
    currentRow++;

    // === ลายเซ็น ===
    sheet.setRowHeight(currentRow, 30);
    sheet.getRange(currentRow, 1, 1, 4).merge()
      .setValue('ລາຍເຊັນຜູ້ສັ່ງຊື້: _________________')
      .setHorizontalAlignment('center');
    sheet.getRange(currentRow, 5, 1, 4).merge()
      .setValue('ລາຍເຊັນຜູ້ອະນຸມັດ: _________________')
      .setHorizontalAlignment('center');

    // === เส้นกรอบรอบตาราง ===
    const dataRange = sheet.getRange(headerRow, 1, totalRow - headerRow + 1, 8);
    dataRange.setBorder(true, true, true, true, true, true, '#000000', SpreadsheetApp.BorderStyle.SOLID);

    SpreadsheetApp.flush();

    // === แปลงเป็น PDF ===
    const spreadsheetFile = DriveApp.getFileById(ssId);
    const pdfBlob = spreadsheetFile.getAs('application/pdf');

    const fileName = 'ໃບສັ່ງຊື້_' + orderData.orderNumber + '_' +
      Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'yyyyMMdd_HHmmss') + '.pdf';

    const folder = DriveApp.getFolderById('1jmglJOSJFAD-1eQbtpY2Etu69fA9jtLv');
    const pdfFile = folder.createFile(pdfBlob);
    pdfFile.setName(fileName);
    pdfFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);

    // ลบชีตชั่วคราว
    spreadsheetFile.setTrashed(true);

    const fileId = pdfFile.getId();
    const directUrl = 'https://drive.google.com/file/d/' + fileId + '/view?usp=sharing';

    return {
      success: true,
      fileName: fileName,
      fileUrl: directUrl,
      fileId: fileId
    };

  } catch (error) {
    Logger.log('Error creating PDF: ' + error.toString());
    return {
      success: false,
      error: error.toString()
    };
  }
}
