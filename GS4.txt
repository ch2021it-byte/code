

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - Google Apps Script Backend
 */

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ Spreadsheet ‡πÅ‡∏•‡∏∞ Sheet
const SPREADSHEET_ID = '10SgCZ2H-4d37-3Slcj-riBK2SDgAbYpXW6SZvgSFUa8';
const ITEMS_SHEET = 'Items';
const PRICE_STUDY_SHEET = '‡∫™‡∫∂‡∫Å‡∫™‡∫≤‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô';
const ORDER_SHEET_ID = '1zk7v8iClQjGf7WseWld_hwix4upAr7KoGqn-eo01fgk';
const ORDER_SHEET = '‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤';

const INITIAL_QUOTA = 20000;

/**
 * ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö HTML
 */
function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Items
 */
function getItemsData() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(ITEMS_SHEET);
   
    if (!sheet) {
      Logger.log('Sheet "' + ITEMS_SHEET + '" not found');
      return [];
    }
   
    const data = sheet.getDataRange().getValues();
    if (!data || data.length <= 1) {
      Logger.log('No data in Items sheet');
      return [];
    }
    
    const headers = data[0];
    const rows = data.slice(1);
   
    const result = [];
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const item = {};
      for (let j = 0; j < headers.length; j++) {
        item['column' + String.fromCharCode(65 + j)] = row[j] || '';
      }
      result.push(item);
    }
    
    return result;
  } catch (error) {
    Logger.log('Error getting items data: ' + error.toString());
    return [];
  }
}
/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∫™‡∫∂‡∫Å‡∫™‡∫≤‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Debug ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
 */
function getPriceStudyData() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(PRICE_STUDY_SHEET);
   
    if (!sheet) {
      Logger.log('‚ùå Sheet "' + PRICE_STUDY_SHEET + '" not found');
      return [];
    }
   
    const lastRow = sheet.getLastRow();
    const lastCol = sheet.getLastColumn();
    
    Logger.log('üìä Sheet: ' + PRICE_STUDY_SHEET);
    Logger.log('üìè Last Row: ' + lastRow);
    Logger.log('üìè Last Column: ' + lastCol);
    
    if (lastRow <= 1) {
      Logger.log('‚ö†Ô∏è No data rows found');
      return [];
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const data = sheet.getRange(1, 1, lastRow, lastCol).getValues();
    const headers = data[0];
    
    Logger.log('üìã Headers: ' + JSON.stringify(headers));
    
    const rows = data.slice(1);
    const result = [];
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Column B (index 1) ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!row[1] || row[1].toString().trim() === '') {
        continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á
      }
      
      const item = {
        columnA: row[0] ? row[0].toString().trim() : '',
        columnB: row[1] ? row[1].toString().trim() : '', // Barcode (KEY)
        columnC: row[2] ? row[2].toString().trim() : '',
        columnD: row[3] ? row[3].toString().trim() : '',
        columnE: row[4] ? row[4].toString().trim() : '',
        columnF: row[5] ? row[5].toString().trim() : '', // ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô
        columnG: row[6] ? row[6].toString() : '',
        columnH: row[7] ? parseFloat(row[7]) : 0,        // ‡∏£‡∏≤‡∏Ñ‡∏≤
        columnI: row[8] ? row[8].toString() : '',
        columnJ: row[9] ? row[9].toString() : ''
      };
      
      result.push(item);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
      if (i < 3) {
        Logger.log('Sample Row ' + (i + 1) + ':');
        Logger.log('  Barcode (B): ' + item.columnB);
        Logger.log('  Store (F): ' + item.columnF);
        Logger.log('  Price (H): ' + item.columnH);
      }
    }
    
    Logger.log('‚úÖ Total items loaded: ' + result.length);
    return result;
    
  } catch (error) {
    Logger.log('‚ùå Error: ' + error.toString());
    Logger.log('Stack: ' + error.stack);
    return [];
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Column F
 */
function getStoreList() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(PRICE_STUDY_SHEET);
   
    if (!sheet) {
      Logger.log('Sheet "' + PRICE_STUDY_SHEET + '" not found');
      return [];
    }
   
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return [];
    }
    
    const data = sheet.getRange('F2:F' + lastRow).getValues();
    const storesSet = {};
    
    for (let i = 0; i < data.length; i++) {
      const store = data[i][0];
      if (store && store.toString().trim()) {
        storesSet[store.toString().trim()] = true;
      }
    }
    
    const stores = Object.keys(storesSet).sort();
    return stores;
  } catch (error) {
    Logger.log('Error getting store list: ' + error.toString());
    return [];
  }
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°)
 */
function saveOrder(orderData) {
  try {
    const ss = SpreadsheetApp.openById(ORDER_SHEET_ID);
    let sheet = ss.getSheetByName(ORDER_SHEET);
    
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ sheet ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (!sheet) {
      sheet = ss.insertSheet(ORDER_SHEET);
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á header
      sheet.appendRow(['‡∫ß‡∫±‡∫ô‡∫ó‡∫µ', '‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ', '‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤', '‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤', '‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç', '‡∫à‡∫≥‡∫ô‡∫ß‡∫ô', '‡∫•‡∫≤‡∫Ñ‡∫≤/‡ªú‡ªà‡∫ß‡∫ç', '‡∫•‡∫ß‡∫°‡ªÄ‡∫á‡∫¥‡∫ô', '‡∫ß‡∫¥‡∫ó‡∫µ‡∫Å‡∫≤‡∫ô']);
    }
    
    const orderNumber = orderData.orderNumber;
    const method = orderData.method;
    const isUpdate = orderData.isUpdate || false; // ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    if (isUpdate) {
      deleteOrderRows(sheet, orderNumber);
    }
    
    const timestamp = new Date();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    const items = orderData.items;
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      sheet.appendRow([
        timestamp,
        orderNumber,
        item.barcode,
        item.itemName,
        item.unit,
        item.quantity,
        item.price,
        item.total,
        method
      ]);
    }
    
    return { success: true, orderNumber: orderNumber };
  } catch (error) {
    Logger.log('Error saving order: ' + error.toString());
    return { success: false, error: error.toString() };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏î‡∏¥‡∏°
 */
function loadOrder(orderNumber) {
  try {
    const ss = SpreadsheetApp.openById(ORDER_SHEET_ID);
    const sheet = ss.getSheetByName(ORDER_SHEET);
    
    if (!sheet) {
      return { success: false, items: [] };
    }
    
    const data = sheet.getDataRange().getValues();
    if (!data || data.length <= 1) {
      return { success: false, items: [] };
    }
    
    const headers = data[0];
    const rows = data.slice(1);
    
    // ‡πÄ‡∏õ‡∏¥‡∏î Items sheet ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const itemsSS = SpreadsheetApp.openById(SPREADSHEET_ID);
    const itemsSheet = itemsSS.getSheetByName(ITEMS_SHEET);
    const itemsData = itemsSheet ? itemsSheet.getDataRange().getValues() : [];
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å barcode
    const itemsImageMap = {};
    if (itemsData.length > 1) {
      for (let i = 1; i < itemsData.length; i++) {
        const barcode = itemsData[i][0]; // Column A
        const image = itemsData[i][10]; // Column K (index 10)
        if (barcode) {
          itemsImageMap[barcode.toString().trim()] = image || '';
        }
      }
    }
    
    const orderItems = [];
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      if (row[1] === orderNumber) {
        const barcode = row[2];
        const image = itemsImageMap[barcode.toString().trim()] || ''; // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Items sheet
        
       orderItems.push({
    barcode: barcode || '',
    itemName: row[3] || '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ä‡∫∑‡ªà',
    unit: row[4] || '‡∫ä‡∫¥‡ªâ‡∫ô',
    quantity: parseFloat(row[5]) || 0,
    price: parseFloat(row[6]) || 0,
    total: parseFloat(row[7]) || 0,
    image: image || ''
});
      }
    }
    
    return { success: true, items: orderItems };
  } catch (error) {
    Logger.log('Error loading order: ' + error.toString());
    return { success: false, items: [] };
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
 */
function generateOrderNumber() {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const time = String(now.getHours()).padStart(2, '0') + String(now.getMinutes()).padStart(2, '0');
  
  return 'PO-' + year + month + day + '-' + time;
}

function debugPriceStudy() {
  try {
    const ss = SpreadsheetApp.openById('10SgCZ2H-4d37-3Slcj-riBK2SDgAbYpXW6SZvgSFUa8');
    Logger.log('Spreadsheet opened: ' + ss.getName());
    
    const sheet = ss.getSheetByName('‡∫™‡∫∂‡∫Å‡∫™‡∫≤‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô');
    Logger.log('Sheet found: ' + (sheet ? 'YES' : 'NO'));
    
    if (sheet) {
      Logger.log('Last Row: ' + sheet.getLastRow());
      Logger.log('Last Column: ' + sheet.getLastColumn());
      
      const data = sheet.getDataRange().getValues();
      Logger.log('Data rows: ' + data.length);
      Logger.log('First row: ' + JSON.stringify(data[0]));
    }
    
    const result = getPriceStudyData();
    Logger.log('getPriceStudyData result length: ' + result.length);
    Logger.log('First item: ' + JSON.stringify(result[0]));
    
  } catch (error) {
    Logger.log('ERROR: ' + error.toString());
  }
}
/**
 * ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function deleteOrderRows(sheet, orderNumber) {
  try {
    const data = sheet.getDataRange().getValues();
    const rowsToDelete = [];
    
    // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö orderNumber (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß 1 ‡πÄ‡∏õ‡πá‡∏ô header)
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] === orderNumber) { // Column B (index 1) ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        rowsToDelete.push(i + 1); // +1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ array ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0 ‡πÅ‡∏ï‡πà row ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 1
      }
    }
    
    // ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ index ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    for (let i = rowsToDelete.length - 1; i >= 0; i--) {
      sheet.deleteRow(rowsToDelete[i]);
    }
    
    Logger.log('Deleted ' + rowsToDelete.length + ' rows for order: ' + orderNumber);
  } catch (error) {
    Logger.log('Error deleting order rows: ' + error.toString());
  }
}
/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà)
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà + ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 */
function getOrderList() {
  try {
    const ss = SpreadsheetApp.openById(ORDER_SHEET_ID);
    const sheet = ss.getSheetByName(ORDER_SHEET);
    
    if (!sheet) {
      return [];
    }
    
    const data = sheet.getDataRange().getValues();
    if (!data || data.length <= 1) {
      return [];
    }
    
    const ordersMap = {};
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß 2 (‡∏Ç‡πâ‡∏≤‡∏° header)
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const date = row[0]; // Column A - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      const orderNumber = row[1]; // Column B - ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
      
      if (orderNumber) {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        if (!ordersMap[orderNumber]) {
          const dateStr = Utilities.formatDate(new Date(date), Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm');
          ordersMap[orderNumber] = {
            orderNumber: orderNumber,
            date: dateStr,
            itemCount: 0, // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            displayText: '' // ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
          };
        }
        
        // ‚≠ê ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        ordersMap[orderNumber].itemCount++;
      }
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á displayText
    const orderList = Object.values(ordersMap).map(function(order) {
      // ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà - ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà - X ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô
      order.displayText = order.date + ' - ' + order.orderNumber + ' - ' + order.itemCount + ' ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô';
      return order;
    });
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
    orderList.sort(function(a, b) {
      return b.orderNumber.localeCompare(a.orderNumber);
    });
    
    return orderList;
  } catch (error) {
    Logger.log('Error getting order list: ' + error.toString());
    return [];
  }
}
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ Google Docs)
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function createPDFAndUploadToDrive(htmlContent, orderNumber) {
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Google Doc ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    const tempDoc = DocumentApp.create('Temp_' + orderNumber);
    const docId = tempDoc.getId();
    const doc = DocumentApp.openById(docId);
    const body = doc.getBody();
    
    // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    body.clear();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Header
    const header = body.appendParagraph('‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤');
    header.setHeading(DocumentApp.ParagraphHeading.HEADING1);
    header.setAlignment(DocumentApp.HorizontalAlignment.CENTER);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    body.appendParagraph('‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ: ' + orderNumber);
    body.appendParagraph('‡∫ß‡∫±‡∫ô‡∫ó‡∫µ: ' + Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm:ss'));
    body.appendParagraph(''); // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å orderItems)
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á orderItems ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
    
    doc.saveAndClose();
    
    // ‡πÅ‡∏õ‡∏•‡∏á Google Doc ‡πÄ‡∏õ‡πá‡∏ô PDF
    const docFile = DriveApp.getFileById(docId);
    const pdfBlob = docFile.getAs('application/pdf');
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    const fileName = '‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ_' + orderNumber + '_' + Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'yyyyMMdd_HHmmss') + '.pdf';
    
    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Drive folder
    const folder = DriveApp.getFolderById('1jmglJOSJFAD-1eQbtpY2Etu69fA9jtLv');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô Drive
    const file = folder.createFile(pdfBlob);
    file.setName(fileName);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
    file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
    
    // ‡∏•‡∏ö Google Doc ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    docFile.setTrashed(true);
    
    // ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
    const fileId = file.getId();
    const directUrl = 'https://drive.google.com/file/d/' + fileId + '/view?usp=sharing';
    
    return {
      success: true,
      fileName: fileName,
      fileUrl: directUrl,
      fileId: fileId
    };
  } catch (error) {
    Logger.log('Error creating PDF: ' + error.toString());
    return {
      success: false,
      error: error.toString()
    };
  }
}
function createPDFFromOrderData(orderData) {
  try {
    const ss = SpreadsheetApp.create('Temp_Order_' + orderData.orderNumber);
    const sheet = ss.getActiveSheet();
    const ssId = ss.getId();

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î
    sheet.getRange('A:Z').setFontFamily('Noto Sans Lao').setFontSize(12);

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    sheet.setColumnWidth(1, 50);
    sheet.setColumnWidth(2, 120);
    sheet.setColumnWidth(3, 80);
    sheet.setColumnWidth(4, 200);
    sheet.setColumnWidth(5, 80);
    sheet.setColumnWidth(6, 80);
    sheet.setColumnWidth(7, 100);
    sheet.setColumnWidth(8, 120);

    let currentRow = 1;

    // Header
    sheet.getRange(currentRow, 1, 1, 8).merge();
    const headerCell = sheet.getRange(currentRow, 1);
    headerCell.setValue('‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤')
      .setFontSize(20).setFontWeight('bold')
      .setHorizontalAlignment('center').setVerticalAlignment('middle')
      .setBackground('#25d366').setFontColor('#ffffff');
    sheet.setRowHeight(currentRow, 40);
    currentRow++;

    sheet.setRowHeight(currentRow, 10);
    currentRow++;

    sheet.getRange(currentRow, 1).setValue('‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ:').setFontWeight('bold');
    sheet.getRange(currentRow, 2, 1, 3).merge().setValue(orderData.orderNumber);
    sheet.setRowHeight(currentRow, 25);
    currentRow++;

    sheet.getRange(currentRow, 1).setValue('‡∫ß‡∫±‡∫ô‡∫ó‡∫µ:').setFontWeight('bold');
    sheet.getRange(currentRow, 2, 1, 3).merge().setValue(orderData.date);
    sheet.setRowHeight(currentRow, 25);
    currentRow++;

    sheet.setRowHeight(currentRow, 10);
    currentRow++;

    const headerRow = currentRow;
    const headers = ['‡∫•‡∫≥‡∫î‡∫±‡∫ö','‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤','‡∫Æ‡∫π‡∫ö','‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤','‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç','‡∫à‡∫≥‡∫ô‡∫ß‡∫ô','‡∫•‡∫≤‡∫Ñ‡∫≤/‡ªú‡ªà‡∫ß‡∫ç','‡∫•‡∫ß‡∫°‡ªÄ‡∫á‡∫¥‡∫ô'];
    for (let i = 0; i < headers.length; i++) {
      const cell = sheet.getRange(headerRow, i+1);
      cell.setValue(headers[i]).setFontWeight('bold')
        .setBackground('#2c3e50').setFontColor('#ffffff')
        .setHorizontalAlignment('center').setVerticalAlignment('middle');
    }
    sheet.setRowHeight(headerRow, 35);
    currentRow++;

    orderData.items.forEach(function(item, index){
      sheet.setRowHeight(currentRow, 70);
      const rowRange = sheet.getRange(currentRow,1,1,8);
      rowRange.setVerticalAlignment('middle').setWrap(true);

      sheet.getRange(currentRow,1).setValue(index+1).setHorizontalAlignment('center');
      sheet.getRange(currentRow,2).setValue(item.barcode || '-');

      try {
        const imageCell = sheet.getRange(currentRow, 3);
        if(item.image && item.image.trim()!==''){
          const match = item.image.match(/id=([a-zA-Z0-9_-]+)/);
          if(match){
            const fileId = match[1];
            const file = DriveApp.getFileById(fileId);
            const blob = file.getBlob();

            const images = sheet.getImages();
            images.forEach(img => {
              const pos = img.getAnchorCell();
              if(pos.getRow()===currentRow && pos.getColumn()===3) img.remove();
            });

            const cellWidth = sheet.getColumnWidth(3);
            const cellHeight = sheet.getRowHeight(currentRow);
            const imgInserted = sheet.insertImage(blob, 3, currentRow);
            imgInserted.setAnchorCell(imageCell);
            imgInserted.setWidth(cellWidth);
            imgInserted.setHeight(cellHeight);
          } else {
            imageCell.setValue('');
          }
        } else {
          imageCell.setValue('');
        }
      } catch(e){
        sheet.getRange(currentRow,3).setValue('');
        Logger.log('Error inserting image row '+currentRow+': '+e.toString());
      }

      sheet.getRange(currentRow,4).setValue(item.itemName || '-');
      sheet.getRange(currentRow,5).setValue(item.unit || '-').setHorizontalAlignment('center');
      sheet.getRange(currentRow,6).setValue(item.quantity || '-').setHorizontalAlignment('center');
      sheet.getRange(currentRow,7).setValue(item.price ? item.price.toLocaleString() : '-').setHorizontalAlignment('right');
      sheet.getRange(currentRow,8).setValue(item.total ? item.total.toLocaleString() : '-').setHorizontalAlignment('right');

      currentRow++;
    });

    const lastDataRow = currentRow-1;

    sheet.setRowHeight(currentRow,35);
    sheet.getRange(currentRow,1,1,7).merge();
    const totalLabelCell = sheet.getRange(currentRow,1);
    totalLabelCell.setValue('‡∫•‡∫ß‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î:').setFontWeight('bold')
      .setHorizontalAlignment('right').setVerticalAlignment('middle').setBackground('#f0f0f0');

    const totalValueCell = sheet.getRange(currentRow,8);
    totalValueCell.setValue(orderData.total ? orderData.total.toLocaleString()+' ‡∫Å‡∫µ‡∫ö':'-')
      .setFontWeight('bold').setHorizontalAlignment('right').setVerticalAlignment('middle').setBackground('#f0f0f0');

    const totalRow = currentRow;
    currentRow++;

    const maxRows = sheet.getMaxRows();
    if(maxRows>currentRow+5) sheet.deleteRows(currentRow+5,maxRows-currentRow-4);

    currentRow+=2;
    sheet.setRowHeight(currentRow,30);
    sheet.getRange(currentRow,1,1,4).merge()
      .setValue('‡∫•‡∫≤‡∫ç‡ªÄ‡∫ä‡∫±‡∫ô‡∫ú‡∫π‡ªâ‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ: _________________')
      .setHorizontalAlignment('center').setVerticalAlignment('middle');
    sheet.getRange(currentRow,5,1,4).merge()
      .setValue('‡∫•‡∫≤‡∫ç‡ªÄ‡∫ä‡∫±‡∫ô‡∫ú‡∫π‡ªâ‡∫≠‡∫∞‡∫ô‡∫∏‡∫°‡∫±‡∫î: _________________')
      .setHorizontalAlignment('center').setVerticalAlignment('middle');

    const dataRange = sheet.getRange(headerRow,1,totalRow-headerRow+1,8);
    dataRange.setBorder(true,true,true,true,true,true,'#000000',SpreadsheetApp.BorderStyle.SOLID);

    SpreadsheetApp.flush();
    Utilities.sleep(2000);

    const spreadsheetFile = DriveApp.getFileById(ssId);
    const pdfBlob = spreadsheetFile.getAs('application/pdf');

    const fileName = '‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ_'+orderData.orderNumber+'_'+Utilities.formatDate(new Date(), Session.getScriptTimeZone(),'yyyyMMdd_HHmmss')+'.pdf';

    const folder = DriveApp.getFolderById('1jmglJOSJFAD-1eQbtpY2Etu69fA9jtLv');

    // ‚≠ê ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ Order Number ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    const orderNumber = orderData.orderNumber;
    const searchPattern = '‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ_' + orderNumber + '_';
    const allFiles = folder.getFiles();

    while (allFiles.hasNext()) {
      const file = allFiles.next();
      const name = file.getName();
      
      if (name.indexOf(searchPattern) === 0) {
        Logger.log('Deleting old WhatsApp PDF: ' + name);
        file.setTrashed(true);
      }
    }

    const pdfFile = folder.createFile(pdfBlob);
    pdfFile.setName(fileName);
    pdfFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK,DriveApp.Permission.VIEW);

    spreadsheetFile.setTrashed(true);

    const fileId = pdfFile.getId();
    const directUrl = 'https://drive.google.com/file/d/'+fileId+'/view?usp=sharing';

    Logger.log('PDF created successfully: '+directUrl);

    return {success:true,fileName:fileName,fileUrl:directUrl,fileId:fileId};

  } catch (error) {
    Logger.log('Error creating PDF: '+error.toString());
    Logger.log('Stack trace: '+error.stack);
    return {success:false,error:error.toString()};
  }
}
/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Column F ‡πÅ‡∏•‡∏∞ I
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function getPhoneNumberList() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(PRICE_STUDY_SHEET);
    
    if (!sheet) {
      Logger.log('Sheet "' + PRICE_STUDY_SHEET + '" not found');
      return [];
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return [];
    }
    
    // ‡∏î‡∏∂‡∏á Column F (‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô) ‡πÅ‡∏•‡∏∞ Column I (‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)
    const dataF = sheet.getRange('F2:F' + lastRow).getValues();
    const dataI = sheet.getRange('I2:I' + lastRow).getValues();
    
    const phoneMap = {};
    
    for (let i = 0; i < dataF.length; i++) {
      const storeName = dataF[i][0];
      const phoneNumber = dataI[i][0];
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå
      if (storeName && phoneNumber) {
        const phoneStr = phoneNumber.toString().trim();
        const storeStr = storeName.toString().trim();
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏°‡∏µ 8-10 ‡∏´‡∏•‡∏±‡∏Å
        if (/^\d{8,10}$/.test(phoneStr)) {
          const key = phoneStr + '|' + storeStr;
          phoneMap[key] = {
            phone: phoneStr,
            store: storeStr
          };
        }
      }
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô
    const phoneList = Object.values(phoneMap).sort(function(a, b) {
      return a.store.localeCompare(b.store);
    });
    
    Logger.log('Phone list loaded: ' + phoneList.length + ' entries');
    return phoneList;
    
  } catch (error) {
    Logger.log('Error getting phone number list: ' + error.toString());
    return [];
  }
}
/**
 * ‡∏£‡∏±‡∏ö PDF ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Base64 ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Google Drive
 * (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
 */
function uploadPDFBase64(base64Data, fileName) {
  try {
    // ‡πÅ‡∏õ‡∏•‡∏á Base64 ‡πÄ‡∏õ‡πá‡∏ô Blob
    const blob = Utilities.newBlob(
      Utilities.base64Decode(base64Data),
      'application/pdf',
      fileName
    );
    
    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Drive folder
    const folder = DriveApp.getFolderById('1jmglJOSJFAD-1eQbtpY2Etu69fA9jtLv');
    
    // ‚≠ê ‡∏î‡∏∂‡∏á Order Number ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ_PO-20250110-1430_1736486723456.pdf"
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤ "PO-20250110-1430"
    const orderNumberMatch = fileName.match(/_([A-Z]+-\d{8}-\d{4})_/);
    const orderNumber = orderNumberMatch ? orderNumberMatch[1] : null;
    
    if (orderNumber) {
      Logger.log('Order Number detected: ' + orderNumber);
      
      // ‚≠ê ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ Order Number ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
      const existingFiles = folder.getFilesByName(fileName);
      
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå
      while (existingFiles.hasNext()) {
        const oldFile = existingFiles.next();
        Logger.log('Deleting old file: ' + oldFile.getName());
        oldFile.setTrashed(true); // ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
      }
      
      // ‚≠ê ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ Order Number ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡πÅ‡∏°‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á)
      const searchPattern = '‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ_' + orderNumber + '_';
      const allFiles = folder.getFiles();
      
      while (allFiles.hasNext()) {
        const file = allFiles.next();
        const name = file.getName();
        
        // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ Order Number ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        if (name.indexOf(searchPattern) === 0) {
          Logger.log('Deleting related old file: ' + name);
          file.setTrashed(true); // ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
        }
      }
    }
    
    // ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏´‡∏°‡πà
    const file = folder.createFile(blob);
    file.setName(fileName);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
    file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
    
    // ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
    const fileId = file.getId();
    const directUrl = 'https://drive.google.com/file/d/' + fileId + '/view?usp=sharing';
    
    Logger.log('New PDF uploaded successfully: ' + directUrl);
    
    return {
      success: true,
      fileName: fileName,
      fileUrl: directUrl,
      fileId: fileId
    };
  } catch (error) {
    Logger.log('Error uploading PDF: ' + error.toString());
    return {
      success: false,
      error: error.toString()
    };
  }
}
/**
 * ========================================
 * ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Google Drive ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Base64
 * ========================================
 */

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Google Drive ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Base64
 * @param {Array} imageUrls - Array ‡∏Ç‡∏≠‡∏á URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
 * @return {Array} - Array ‡∏Ç‡∏≠‡∏á Base64 strings
 */
function getImagesAsBase64(imageUrls) {
  try {
    const results = [];
    
    imageUrls.forEach(function(url) {
      if (!url || url.trim() === '') {
        results.push(null);
        return;
      }
      
      try {
        // ‡∏î‡∏∂‡∏á File ID ‡∏à‡∏≤‡∏Å URL
        const match = url.match(/id=([a-zA-Z0-9_-]+)/);
        if (!match) {
          results.push(null);
          return;
        }
        
        const fileId = match[1];
        const file = DriveApp.getFileById(fileId);
        const blob = file.getBlob();
        
        // ‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        const contentType = blob.getContentType();
        let imageBlob = blob;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 500KB ‡πÉ‡∏´‡πâ‡∏¢‡πà‡∏≠‡∏•‡∏á
        if (blob.getBytes().length > 500000) {
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏ç‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Thumbnail ‡πÅ‡∏ó‡∏ô
          const thumbnail = Drive.Files.get(fileId, { 
            supportsAllDrives: true,
            fields: 'thumbnailLink'
          });
          
          if (thumbnail.thumbnailLink) {
            // ‡∏î‡∏∂‡∏á Thumbnail (‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤)
            const thumbUrl = thumbnail.thumbnailLink.replace('=s220', '=s400');
            const thumbResponse = UrlFetchApp.fetch(thumbUrl, {
              headers: { 'Authorization': 'Bearer ' + ScriptApp.getOAuthToken() }
            });
            imageBlob = thumbResponse.getBlob();
          }
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Base64
        const base64 = Utilities.base64Encode(imageBlob.getBytes());
        const dataUrl = 'data:' + contentType + ';base64,' + base64;
        
        results.push(dataUrl);
        
      } catch (e) {
        Logger.log('Error processing image: ' + url + ' - ' + e.toString());
        results.push(null);
      }
    });
    
    return results;
    
  } catch (error) {
    Logger.log('Error in getImagesAsBase64: ' + error.toString());
    return [];
  }
}
/**
 * ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏à‡∏≤‡∏Å Google Drive ‡∏ï‡∏≤‡∏° Order Number
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function getPDFUrlByOrderNumber(orderNumber) {
  try {
    const folder = DriveApp.getFolderById('1jmglJOSJFAD-1eQbtpY2Etu69fA9jtLv');
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ Order Number ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    const searchPattern = '‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ_' + orderNumber + '_';
    const files = folder.getFiles();
    
    while (files.hasNext()) {
      const file = files.next();
      const fileName = file.getName();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Order Number
      if (fileName.indexOf(searchPattern) === 0 && fileName.endsWith('.pdf')) {
        const fileId = file.getId();
        const fileUrl = 'https://drive.google.com/file/d/' + fileId + '/view?usp=sharing';
        
        return {
          success: true,
          fileName: fileName,
          fileUrl: fileUrl,
          fileId: fileId
        };
      }
    }
    
    // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå
    return {
      success: false,
      error: '‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡ªÑ‡∫ü‡∫•‡ªå PDF ‡∫™‡∫≥‡∫•‡∫±‡∫ö‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ‡ªÉ‡∫ö‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ‡∫ô‡∫µ‡ªâ'
    };
    
  } catch (error) {
    Logger.log('Error getting PDF URL: ' + error.toString());
    return {
      success: false,
      error: error.toString()
    };
  }
}
function testGetPriceStudyData() {
  const data = getPriceStudyData();
  Logger.log('Total items: ' + data.length);
  
  if (data.length > 0) {
    Logger.log('First 3 items:');
    for (let i = 0; i < Math.min(3, data.length); i++) {
      Logger.log(JSON.stringify(data[i]));
    }
  }
}



/**
 * ========================================
 * ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 * ========================================
 */

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dropdown)
 */
function getUniqueColumnValues(columnLetter) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(ITEMS_SHEET);
    
    if (!sheet) {
      Logger.log('Sheet not found');
      return [];
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return [];
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (A=1, B=2, ...)
    const columnIndex = columnLetter.charCodeAt(0) - 64;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    const data = sheet.getRange(2, columnIndex, lastRow - 1, 1).getValues();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    const uniqueValues = {};
    
    data.forEach(function(row) {
      const value = row[0];
      if (value && value.toString().trim() !== '') {
        uniqueValues[value.toString().trim()] = true;
      }
    });
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    const result = Object.keys(uniqueValues).sort();
    
    Logger.log('Column ' + columnLetter + ': ' + result.length + ' unique values');
    return result;
    
  } catch (error) {
    Logger.log('Error getting unique values: ' + error.toString());
    return [];
  }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ñ‡∏ß
 */
function updateMultipleItems(updates) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(ITEMS_SHEET);
    
    if (!sheet) {
      return { success: false, error: 'Sheet not found' };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    let updatedCount = 0;
    
    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞ update
    updates.forEach(function(update) {
      const barcode = update.barcode;
      
      // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Barcode
      for (let i = 1; i < data.length; i++) {
        if (data[i][0].toString().trim() === barcode) {
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          if (update.columnB !== undefined) sheet.getRange(i + 1, 2).setValue(update.columnB);
          if (update.columnC !== undefined) sheet.getRange(i + 1, 3).setValue(update.columnC);
          if (update.columnD !== undefined) sheet.getRange(i + 1, 4).setValue(update.columnD);
          if (update.columnF !== undefined) sheet.getRange(i + 1, 6).setValue(update.columnF);
          if (update.columnH !== undefined) sheet.getRange(i + 1, 8).setValue(update.columnH);
          if (update.columnI !== undefined) sheet.getRange(i + 1, 9).setValue(update.columnI);
          if (update.columnK !== undefined) sheet.getRange(i + 1, 11).setValue(update.columnK);
          if (update.columnL !== undefined) sheet.getRange(i + 1, 12).setValue(update.columnL);
          if (update.columnM !== undefined) sheet.getRange(i + 1, 13).setValue(update.columnM);
          if (update.columnN !== undefined) sheet.getRange(i + 1, 14).setValue(update.columnN);
          
          updatedCount++;
          break;
        }
      }
    });
    
    Logger.log('Updated ' + updatedCount + ' items');
    
    return { 
      success: true, 
      updatedCount: updatedCount 
    };
    
  } catch (error) {
    Logger.log('Error updating items: ' + error.toString());
    return { 
      success: false, 
      error: error.toString() 
    };
  }
}
/**
 * ========================================
 * ‚≠ê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Thumbnail URL ‡πÄ‡∏õ‡πá‡∏ô Base64
 * ========================================
 */

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Google Drive Thumbnail URL ‡πÄ‡∏õ‡πá‡∏ô Base64
 * @param {Array} thumbnailUrls - Array ‡∏Ç‡∏≠‡∏á Thumbnail URLs
 * @return {Array} - Array ‡∏Ç‡∏≠‡∏á Base64 strings
 */
function convertThumbnailUrlsToBase64(thumbnailUrls) {
  try {
    const results = [];
    
    Logger.log('üì∏ Converting ' + thumbnailUrls.length + ' thumbnail URLs...');
    
    thumbnailUrls.forEach(function(url, index) {
      if (!url || url.toString().trim() === '') {
        results.push(null);
        return;
      }
      
      try {
        // ‚≠ê ‡∏î‡∏∂‡∏á File ID ‡∏à‡∏≤‡∏Å Thumbnail URL
        // Format: https://drive.google.com/thumbnail?id=FILE_ID&sz=w400
        const match = url.match(/id=([a-zA-Z0-9_-]+)/);
        
        if (!match) {
          Logger.log('‚ö†Ô∏è Cannot extract file ID from URL: ' + url);
          results.push(null);
          return;
        }
        
        const fileId = match[1];
        
        // ‚≠ê ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Drive
        const file = DriveApp.getFileById(fileId);
        const blob = file.getBlob();
        const contentType = blob.getContentType();
        
        // ‚≠ê ‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 300KB
        let imageBlob = blob;
        
        if (blob.getBytes().length > 300000) {
          try {
            const thumbnail = Drive.Files.get(fileId, { 
              supportsAllDrives: true,
              fields: 'thumbnailLink'
            });
            
            if (thumbnail.thumbnailLink) {
              const thumbUrl = thumbnail.thumbnailLink.replace('=s220', '=s300');
              const thumbResponse = UrlFetchApp.fetch(thumbUrl, {
                headers: { 'Authorization': 'Bearer ' + ScriptApp.getOAuthToken() }
              });
              imageBlob = thumbResponse.getBlob();
            }
          } catch (e) {
            Logger.log('‚ö†Ô∏è Cannot get thumbnail, using original: ' + e.toString());
          }
        }
        
        // ‚≠ê ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Base64
        const base64 = Utilities.base64Encode(imageBlob.getBytes());
        const dataUrl = 'data:' + contentType + ';base64,' + base64;
        
        results.push(dataUrl);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡πÜ 10 ‡∏£‡∏π‡∏õ
        if ((index + 1) % 10 === 0) {
          Logger.log('‚úÖ Processed ' + (index + 1) + '/' + thumbnailUrls.length);
        }
        
      } catch (e) {
        Logger.log('‚ùå Error converting URL ' + url + ': ' + e.toString());
        results.push(null);
      }
    });
    
    Logger.log('‚úÖ Conversion complete: ' + results.length + ' results');
    return results;
    
  } catch (error) {
    Logger.log('‚ùå Error in convertThumbnailUrlsToBase64: ' + error.toString());
    return [];
  }
}
