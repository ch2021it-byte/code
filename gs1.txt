/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - Google Apps Script Backend
 */

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ Spreadsheet ‡πÅ‡∏•‡∏∞ Sheet
const SPREADSHEET_ID = '10SgCZ2H-4d37-3Slcj-riBK2SDgAbYpXW6SZvgSFUa8'; // ‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á Google Sheets ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const ITEMS_SHEET = 'Items';
const SALES_SHEET = '‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫Ç‡∫≤‡∫ç‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤';
const COST_SHEET = '‡∫™‡∫∂‡∫Å‡∫™‡∫≤‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô';
const QUOTA_SHEET = 'API Quota'; // ‡∏ä‡∏µ‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ API

const INITIAL_QUOTA = 20000;

/**
 * ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö HTML
 */
function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}


/**
 * ‡∏£‡∏ß‡∏° CSS ‡πÅ‡∏•‡∏∞ JS ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö HTML
 */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}


/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Items
 */
function getItemsData() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(ITEMS_SHEET);
   
    if (!sheet) {
      throw new Error(`Sheet "${ITEMS_SHEET}" not found`);
    }
   
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const rows = data.slice(1);
   
    return rows.map(row => {
      const item = {};
      headers.forEach((header, index) => {
        item[`column${String.fromCharCode(65 + index)}`] = row[index] || '';
      });
      return item;
    });
  } catch (error) {
    console.error('Error getting items data:', error);
    return [];
  }
}
function getCostData() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    var sheet = ss.getSheetByName(COST_SHEET);
   
    if (!sheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${COST_SHEET}`);
    }
   
    var data = sheet.getDataRange().getValues();
    var result = [];
   
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    for (var i = 1; i < data.length; i++) { // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß 2 (‡∏Ç‡πâ‡∏≤‡∏° header)
      if (data[i][0] || data[i][1]) { // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡∏´‡∏£‡∏∑‡∏≠ B
        result.push({
          columnA: data[i][0],
          columnB: data[i][1],
          columnN: data[i][13], // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå N = index 13
          columnP: data[i][15] // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå P = index 15
        });
      }
    }
   
    return result;
  } catch (error) {
    console.error('Error in getCostData:', error);
    throw error;
  }
}


/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÅ‡∏ö‡∏ö Random
 */
function generateRandomId(length = 10) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}


/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 */
function generateOrderNumber() {
  const now = new Date();
  const timestamp = now.getTime().toString().slice(-8);
  const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
  return `ORD${timestamp}${random}`;
}

/**
 * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ API
 */
function getApiQuota() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName(QUOTA_SHEET);
    if (!sheet) {
      throw new Error(`Sheet "${QUOTA_SHEET}" not found`);
    }

    const lastRow = sheet.getLastRow();
    if (lastRow === 0) {
      sheet.appendRow([INITIAL_QUOTA, new Date()]);
      return { remaining: INITIAL_QUOTA, initial: INITIAL_QUOTA };
    }

    const data = sheet.getRange(lastRow, 1, 1, 2).getValues()[0];
    const lastDate = data[1];
    const today = new Date();

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
    if (today.getDate() !== lastDate.getDate() || today.getMonth() !== lastDate.getMonth() || today.getFullYear() !== lastDate.getFullYear()) {
      sheet.appendRow([INITIAL_QUOTA, today]);
      return { remaining: INITIAL_QUOTA, initial: INITIAL_QUOTA };
    }

    return { remaining: data[0], initial: INITIAL_QUOTA };
  } catch (error) {
    console.error('Error getting API quota:', error);
    throw error;
  }
}
/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏•‡∏á‡πÉ‡∏ô Google Sheets ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡∏±‡∏ö API Quota
 */
function saveSalesData(salesItems) {
  let apiCalls = 0;
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const salesSheet = ss.getSheetByName(SALES_SHEET);
    const itemsSheet = ss.getSheetByName(ITEMS_SHEET);
    const costSheet = ss.getSheetByName(COST_SHEET);
    const quotaSheet = ss.getSheetByName(QUOTA_SHEET);
    apiCalls += 5; // openById, getSheetByName x4

    if (!salesSheet || !itemsSheet || !costSheet || !quotaSheet) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô');
    }

    // ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    let currentQuota = INITIAL_QUOTA;
    const lastRow = quotaSheet.getLastRow();
    apiCalls++; // getLastRow
    
    if (lastRow > 0) {
      const quotaData = quotaSheet.getRange(lastRow, 1, 1, 2).getValues()[0];
      apiCalls++; // getValues
      
      const lastDate = quotaData[1];
      const today = new Date();
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
      if (today.getDate() !== lastDate.getDate() || 
          today.getMonth() !== lastDate.getMonth() || 
          today.getFullYear() !== lastDate.getFullYear()) {
        quotaSheet.appendRow([INITIAL_QUOTA, today]);
        apiCalls++; // appendRow
        currentQuota = INITIAL_QUOTA;
      } else {
        currentQuota = quotaData[0];
      }
    } else {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      quotaSheet.appendRow([INITIAL_QUOTA, new Date()]);
      apiCalls++; // appendRow
      currentQuota = INITIAL_QUOTA;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (currentQuota <= apiCalls) {
      throw new Error(`API Quota ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠! ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${currentQuota} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${apiCalls} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    const itemsDataRaw = itemsSheet.getDataRange().getValues();
    const costDataRaw = costSheet.getDataRange().getValues();
    apiCalls += 2; // getDataRange x2

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const itemsMap = new Map();
    const costMap = new Map();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á itemsMap ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Items
    itemsDataRaw.slice(1).forEach(row => {
      if (row[0]) {
        itemsMap.set(row[0].toString().trim(), {
          columnA: row[0], columnB: row[1], columnC: row[2], columnH: row[7],
          columnI: row[8], columnJ: row[9], columnK: row[10], columnF: row[5]
        });
      }
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á costMap ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cost Study
    costDataRaw.slice(1).forEach(row => {
      let barcode = row[1] || row[0];
      if (barcode) {
        costMap.set(barcode.toString().trim(), {
          columnA: row[0], columnB: row[1], columnN: row[13], columnP: row[15]
        });
      }
    });

    const currentDate = new Date();
    const formattedDate = Utilities.formatDate(currentDate, Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm:ss');
    const orderNumber = generateOrderNumber();

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£)
    const estimatedApiCalls = apiCalls + salesItems.length + 3; // +3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö operations ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    const newQuota = currentQuota - estimatedApiCalls;

 
// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
const dataToSave = salesItems.map(item => {
    const itemData = itemsMap.get(item.barcode.toString().trim());
    const costData_item = costMap.get(item.barcode.toString().trim());

    // üîß FIX: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• quantityPerPack ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    let quantityPerPack = 1; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (‡∏à‡∏≤‡∏Å frontend)
    if (item.quantityPerPack && !isNaN(parseFloat(item.quantityPerPack))) {
        quantityPerPack = parseFloat(item.quantityPerPack);
    }
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å itemData (‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Items)
    else if (itemData && itemData.columnI && !isNaN(parseFloat(itemData.columnI))) {
        quantityPerPack = parseFloat(itemData.columnI);
    }

    const totalPerPack = (parseFloat(item.quantity) || 1) * quantityPerPack;

    // üîß FIX: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ null
    const finalData = [
        generateRandomId() || `ID_${Date.now()}_${Math.floor(Math.random() * 1000)}`, // columnA: ID Number
        orderNumber || 'UNKNOWN_ORDER', // columnB: ‡πÄ‡∏•‡∏Å‡∏•‡∫∞‡∫´‡∫±‡∫î‡∫™‡∫±‡ªà‡∫á‡∫ä‡∫∑‡ªâ
        (item.barcode || '').toString().trim(), // columnC: ID Barcode
        item.name || (itemData ? (itemData.columnB || '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ä‡∫∑‡ªà') : '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ä‡∫∑‡ªà'), // columnD: ‡∫ä‡∫∑‡ªà‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô
        parseFloat(item.price) || (itemData ? (parseFloat(itemData.columnC) || 0) : 0), // columnE: ‡∫•‡∫≤‡∫Ñ‡∫≤‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤
        totalPerPack || 1, // columnF: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ï‡ªç‡ªà‡ªú‡ªà‡∫ß‡∫ç
        item.image || (itemData ? (itemData.columnK || '') : ''), // columnG: ‡∫Æ‡∫π‡∫ö
        formattedDate || new Date().toLocaleString(), // columnH: ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫Ç‡∫≤‡∫ç‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤
        '‡∫™‡ªç‡∫≤‡ªÄ‡∫•‡∫±‡∫î', // columnI: ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞ ‚≠ê ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
        item.unit || (itemData ? (itemData.columnH || '‡∫ä‡∫¥‡ªâ‡∫ô') : '‡∫ä‡∫¥‡ªâ‡∫ô'), // columnJ: ‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç
        costData_item ? (parseFloat(costData_item.columnP) || 0) : 0, // columnK: ‡∫Å‡ªç‡∫≤‡ªÑ‡∫•‡ªÄ‡∫Æ‡∫ª‡∫≤‡∫ï‡ªç‡ªà‡∫≠‡∫±‡∫ô
        costData_item ? (parseFloat(costData_item.columnN) || 0) : 0, // columnL: ‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡∫ª‡ªâ‡∫ô‡∫ó‡∫∂‡∫ô‡∫ï‡ªç‡ªà‡∫≠‡∫±‡∫ô
        itemData ? (itemData.columnJ || '') : '', // columnM: ‡∫ö‡∫≤‡ªÇ‡∫Ñ‡∫î‡∫Å‡ªã‡∫≠‡∫á‡ªÅ‡∫•‡∫∞‡ªÅ‡∫û‡∫±‡∫Å
        parseFloat(item.quantity) || 1, // columnN: ‡∫ä‡ªà‡∫≠‡∫á‡∫û‡∫¥‡∫°‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô
        parseFloat(item.totalPrice) || 0, // columnO: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô
        newQuota || 0 // columnP: ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    ];

    // üîß FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ log ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
    console.log(`üíæ ‡∫Å‡∫Ω‡∫°‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô ${item.name}:`, {
        barcode: item.barcode,
        quantity: item.quantity,
        price: item.price,
        totalPrice: item.totalPrice,
        quantityPerPack: quantityPerPack,
        totalPerPack: totalPerPack,
        status: '‡∫™‡ªç‡∫≤‡ªÄ‡∫•‡∫±‡∫î'
    });

    return finalData;
});
// üîß FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
console.log(`üìã ‡∫•‡∫ß‡∫°‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫ó‡∫µ‡ªà‡∫Å‡∫Ω‡∫°‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å: ${dataToSave.length} ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô`);
if (dataToSave.length === 0) {
    throw new Error('‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å');
}


    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    const itemsDataToUpdate = itemsSheet.getDataRange();
    const itemsValues = itemsDataToUpdate.getValues();
    apiCalls++; // getValues
    
    salesItems.forEach(soldItem => {
      for (let i = 1; i < itemsValues.length; i++) {
        if (itemsValues[i][0].toString().trim() === soldItem.barcode.toString().trim()) {
          const currentQuantity = parseFloat(itemsValues[i][5]) || 0; // columnF
          const newQuantity = currentQuantity - (parseFloat(soldItem.quantity) || 0);
          itemsSheet.getRange(i + 1, 6).setValue(newQuantity);
          apiCalls++; // setValue per item
          break;
        }
      }
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏•‡∏á Sheet
    if (dataToSave.length > 0) {
      const lastRowSales = salesSheet.getLastRow();
      salesSheet.getRange(lastRowSales + 1, 1, dataToSave.length, 16).setValues(dataToSave);
      apiCalls++; // setValues
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ API ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Quota
    const finalQuota = currentQuota - apiCalls;
    quotaSheet.appendRow([finalQuota, new Date(), `Used ${apiCalls} calls for order ${orderNumber}`]);
    apiCalls++; // appendRow ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

    console.log(`‚úÖ Saved ${dataToSave.length} items. Used ${apiCalls} API calls. Quota remaining: ${finalQuota}`);

    return {
      success: true,
      message: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${dataToSave.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      orderNumber: orderNumber,
      remainingQuota: finalQuota,
      apiCallsUsed: apiCalls,
      initialQuota: INITIAL_QUOTA
    };

  } catch (error) {
    console.error('Error saving sales data:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + error.message,
      apiCallsUsed: apiCalls
    };
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
function testConnection() {
  try {
    const itemsData = getItemsData();
    const costData = getCostData();
   
    return {
      success: true,
      itemsCount: itemsData.length,
      costCount: costData.length,
      message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    };
  } catch (error) {
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ' + error.message
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */
function getQuotaStats() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const quotaSheet = ss.getSheetByName(QUOTA_SHEET);
    
    if (!quotaSheet) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ï QUOTA_SHEET ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      const newSheet = ss.insertSheet(QUOTA_SHEET);
      newSheet.getRange(1, 1, 1, 3).setValues([['Remaining Quota', 'Date', 'Notes']]);
      newSheet.appendRow([INITIAL_QUOTA, new Date(), 'Initial quota']);
      
      return {
        remaining: INITIAL_QUOTA,
        initial: INITIAL_QUOTA,
        used: 0,
        percentage: 0
      };
    }

    const lastRow = quotaSheet.getLastRow();
    if (lastRow <= 1) {
      quotaSheet.appendRow([INITIAL_QUOTA, new Date(), 'Initial quota']);
      return {
        remaining: INITIAL_QUOTA,
        initial: INITIAL_QUOTA,
        used: 0,
        percentage: 0
      };
    }

    const data = quotaSheet.getRange(lastRow, 1, 1, 3).getValues()[0];
    const remaining = data[0] || 0;
    const used = INITIAL_QUOTA - remaining;
    const percentage = ((used / INITIAL_QUOTA) * 100).toFixed(1);

    return {
      remaining: remaining,
      initial: INITIAL_QUOTA,
      used: used,
      percentage: parseFloat(percentage)
    };
  } catch (error) {
    console.error('Error getting quota stats:', error);
    return {
      remaining: 0,
      initial: INITIAL_QUOTA,
      used: INITIAL_QUOTA,
      percentage: 100,
      error: error.message
    };
  }
}

/**
 * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ API (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏°‡∏ô‡∏ô‡∏ß‡∏•)
 */
function resetApiQuota() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const quotaSheet = ss.getSheetByName(QUOTA_SHEET);
    
    if (!quotaSheet) {
      throw new Error('Quota sheet not found');
    }

    quotaSheet.appendRow([INITIAL_QUOTA, new Date(), 'Manual reset']);
    
    return {
      success: true,
      message: 'API Quota has been reset to ' + INITIAL_QUOTA,
      newQuota: INITIAL_QUOTA
    };
  } catch (error) {
    return {
      success: false,
      message: 'Failed to reset quota: ' + error.message
    };
  }
}

// ==============================================
// üè∑Ô∏è DEBT TRACKING SYSTEM - Global Variables
// ==============================================
const DEBT_TRACKING_SPREADSHEET_ID = '1zk7v8iClQjGf7WseWld_hwix4upAr7KoGqn-eo01fgk';
const DEBT_TRACKING_SHEET_NAME = '‡∫Ñ‡∫ª‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ';
const DEBT_DRIVE_FOLDER_ID = '1rCQqeWk419rHVrspy8HdMjX7FZajywO6';

// ==============================================
// üè∑Ô∏è PAYMENT TRACKING SYSTEM - Global Variables  
// ==============================================
const PAYMENT_TRACKING_SPREADSHEET_ID = '1zk7v8iClQjGf7WseWld_hwix4upAr7KoGqn-eo01fgk';
const PAYMENT_DEBT_SHEET_NAME = '‡∫Ñ‡∫ª‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ';
const PAYMENT_HISTORY_SHEET_NAME = '‡∫Ñ‡∫ª‡∫ô‡∫à‡ªà‡∫≤‡∫ç‡ªú‡∫µ‡ªâ';

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á "‡∫•‡∫≤‡∫ç‡∫ä‡∫∑‡ªà‡∫Ñ‡∫ª‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ"
const CUSTOMER_LIST_SPREADSHEET_ID = '1zk7v8iClQjGf7WseWld_hwix4upAr7KoGqn-eo01fgk';
const CUSTOMER_LIST_SHEET_NAME = '‡∫•‡∫≤‡∫ç‡∫ä‡∫∑‡ªà‡∫Ñ‡∫ª‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ';

// ==============================================
// üîß DEBT TRACKING SYSTEM - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ
// ==============================================

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ)
 */
function getDebtCustomerList() {
  try {
    const ss = SpreadsheetApp.openById(DEBT_TRACKING_SPREADSHEET_ID);
    const sheet = ss.getSheetByName(DEBT_TRACKING_SHEET_NAME);
    
    if (!sheet) {
      return { customers: [], phones: [], customerPhoneMap: {} };
    }
    
    const data = sheet.getDataRange().getValues();
    const customers = new Set();
    const phones = new Set();
    const customerPhoneMap = new Map();
    
    for (let i = 1; i < data.length; i++) {
      const customerName = data[i][15]; // Column P
      const phoneNumber = data[i][16];  // Column Q
      
      if (customerName && customerName.toString().trim()) {
        customers.add(customerName.toString().trim());
      }
      
      if (phoneNumber && phoneNumber.toString().trim()) {
        phones.add(phoneNumber.toString().trim());
        
        if (customerName && customerName.toString().trim()) {
          customerPhoneMap.set(customerName.toString().trim(), phoneNumber.toString().trim());
        }
      }
    }
    
    return {
      customers: Array.from(customers),
      phones: Array.from(phones),
      customerPhoneMap: Object.fromEntries(customerPhoneMap)
    };
    
  } catch (error) {
    console.error('Error getting debt customer list:', error);
    return { customers: [], phones: [], customerPhoneMap: {} };
  }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ Google Drive (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ)
 */
function uploadDebtImageToGoogleDrive(base64Data, fileName, mimeType) {
  try {
    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ:', fileName);
    
    if (!base64Data || !base64Data.includes(',')) {
      throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• base64 ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    
    const base64String = base64Data.split(',')[1];
    if (!base64String) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• base64 ‡πÑ‡∏î‡πâ');
    }
    
    const bytes = Utilities.base64Decode(base64String);
    const blob = Utilities.newBlob(bytes, mimeType, fileName);
    
    let folder = null;
    let file = null;
    
    try {
      folder = DriveApp.getFolderById(DEBT_DRIVE_FOLDER_ID);
      file = folder.createFile(blob);
    } catch (accessError) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ:', accessError.message);
      file = DriveApp.createFile(blob);
      
      try {
        folder = DriveApp.getFolderById(DEBT_DRIVE_FOLDER_ID);
        folder.addFile(file);
        DriveApp.getRootFolder().removeFile(file);
      } catch (moveError) {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ:', moveError.message);
      }
    }
    
    if (!file) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
    }
    
    try {
      file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
    } catch (shareError) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ:', shareError.message);
    }
    
    const fileId = file.getId();
    const result = {
      success: true,
      fileId: fileId,
      fileName: fileName,
      fileUrl: file.getUrl(),
      viewUrl: `https://drive.google.com/file/d/${fileId}/view`,
      directUrl: `https://drive.google.com/uc?export=view&id=${fileId}`,
      downloadUrl: `https://drive.google.com/uc?export=download&id=${fileId}`,
      thumbnailUrl: `https://drive.google.com/thumbnail?id=${fileId}&sz=w400-h300`,
      folderLocation: folder ? `‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: ${folder.getName()}` : 'Root Folder'
    };
    
    return result;
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: ' + error.message,
      error: error.toString()
    };
  }
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ (‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å)
 */
function saveDebtTrackingData(debtItems, customerInfo, extraAmount, imageUrl) {
  try {
    const ss = SpreadsheetApp.openById(DEBT_TRACKING_SPREADSHEET_ID);
    let sheet = ss.getSheetByName(DEBT_TRACKING_SHEET_NAME);
    
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ...');
    
    if (!sheet) {
      sheet = ss.insertSheet(DEBT_TRACKING_SHEET_NAME);
      const headers = [
        'ID Number', '‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ö‡∫≤‡ªÇ‡∫Ñ‡∫î', '‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤', '‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç', '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ï‡ªç‡ªà‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç',
        '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô', '‡∫•‡∫≤‡∫Ñ‡∫≤‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô', '‡∫•‡∫≤‡∫Ñ‡∫≤‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç', '‡∫Æ‡∫π‡∫ö‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤', '‡∫•‡∫ß‡∫°‡∫•‡∫≤‡∫Ñ‡∫≤‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô',
        '‡∫•‡∫ß‡∫°‡∫•‡∫≤‡∫Ñ‡∫≤‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç', '‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô', '‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç', '‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ö‡∫¥‡∫ô',
        '‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫ï‡∫¥‡∫î', '‡∫ä‡∫∑‡ªà‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ï‡∫¥‡∫î', '‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó', '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ß‡∫±‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ', '‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫à‡ªà‡∫≤‡∫ç‡ªÄ‡∫á‡∫¥‡∫ô‡∫ä‡ªç‡∫≤‡∫•‡∫∞‡ªú‡∫µ‡ªâ',
        '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ä‡ªç‡∫≤‡∫•‡∫∞‡ªú‡∫µ‡ªâ', '‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ', '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ô‡∫≠‡∫Å‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô', '‡∫Æ‡∫π‡∫ö‡ªÄ‡∫≠‡∫Å‡∫∞‡∫™‡∫≤‡∫ô'
      ];
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    }
    
    const currentDate = new Date();
    const formattedDate = Utilities.formatDate(currentDate, Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm:ss');
    
    const totalShopPrice = debtItems.reduce((sum, item) => sum + (item.totalShopPrice || 0), 0);
    const totalCustomerPrice = debtItems.reduce((sum, item) => sum + (item.totalCustomerPrice || 0), 0);
    const extraAmountNum = parseFloat(extraAmount) || 0;
    const finalShopTotal = totalShopPrice + extraAmountNum;
    const finalCustomerTotal = totalCustomerPrice + extraAmountNum;
    
    const debtOrderNumber = generateOrderNumber() + '_DEBT';
    
    const dataToSave = debtItems.map((item, index) => {
      const lastRow = sheet.getLastRow();
      const targetRow = lastRow + index + 1;
      const uniqueId = `DEBT_${Date.now()}_${index + 1}`;
      
      return [
        uniqueId,                         // A: ID Number
        item.barcode || '',               // B: ‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ö‡∫≤‡ªÇ‡∫Ñ‡∫î
        item.itemName || '',              // C: ‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤
        item.unit || '',                  // D: ‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç
        item.quantityPerUnit || 1,        // E: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ï‡ªç‡ªà‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç
        item.quantity || 0,               // F: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô
        item.shopPrice || 0,              // G: ‡∫•‡∫≤‡∫Ñ‡∫≤‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô
        item.customerPrice || 0,          // H: ‡∫•‡∫≤‡∫Ñ‡∫≤‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç
        item.image || '',                 // I: ‡∫Æ‡∫π‡∫ö‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤
        item.totalShopPrice || 0,         // J: ‡∫•‡∫ß‡∫°‡∫•‡∫≤‡∫Ñ‡∫≤‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô
        item.totalCustomerPrice || 0,     // K: ‡∫•‡∫ß‡∫°‡∫•‡∫≤‡∫Ñ‡∫≤‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç
        finalShopTotal,                   // L: ‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô
        finalCustomerTotal,               // M: ‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç
        debtOrderNumber,                  // N: ‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ö‡∫¥‡∫ô
        formattedDate,                    // O: ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫ï‡∫¥‡∫î
        customerInfo.customerName || '',  // P: ‡∫ä‡∫∑‡ªà‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ï‡∫¥‡∫î
        customerInfo.phoneNumber || '',   // Q: ‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó
        `=TODAY()-O${targetRow}`,         // R: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ß‡∫±‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ
        '',                               // S: ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫à‡ªà‡∫≤‡∫ç‡ªÄ‡∫á‡∫¥‡∫ô‡∫ä‡ªç‡∫≤‡∫•‡∫∞‡ªú‡∫µ‡ªâ
        '',                               // T: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ä‡ªç‡∫≤‡∫•‡∫∞‡ªú‡∫µ‡ªâ
        '‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ',                         // U: ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ
        extraAmountNum,                   // V: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ô‡∫≠‡∫Å‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô
        imageUrl || ''                    // W: ‡∫Æ‡∫π‡∫ö‡ªÄ‡∫≠‡∫Å‡∫∞‡∫™‡∫≤‡∫ô
      ];
    });
    
    if (dataToSave.length > 0) {
      const lastRow = sheet.getLastRow();
      const targetRange = sheet.getRange(lastRow + 1, 1, dataToSave.length, 23);
      targetRange.setValues(dataToSave);
      
      if (imageUrl) {
        const imageCell = sheet.getRange(lastRow + 1, 23);
        const actualValue = imageCell.getValue();
        if (!actualValue || actualValue !== imageUrl) {
          imageCell.setValue(imageUrl);
          SpreadsheetApp.flush();
        }
      }
    }
    
    return {
      success: true,
      message: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${dataToSave.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      orderNumber: debtOrderNumber,
      totalShopPrice: finalShopTotal,
      totalCustomerPrice: finalCustomerTotal,
      imageUrl: imageUrl,
      savedToSheet: DEBT_TRACKING_SHEET_NAME,
      rowsAffected: dataToSave.length
    };
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ: ' + error.message,
      error: error.toString()
    };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ
 */
function testDebtDriveAccess() {
  try {
    const folder = DriveApp.getFolderById(DEBT_DRIVE_FOLDER_ID);
    return {
      success: true,
      folderName: folder.getName(),
      folderId: folder.getId(),
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    };
  } catch (error) {
    return {
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: ' + error.message
    };
  }
}




// ==============================================
// üîß PAYMENT TRACKING SYSTEM - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ
// ==============================================

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô)
 */
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getPaymentDebtorsList ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
function getPaymentDebtorsList() {
  try {
    const ss = SpreadsheetApp.openById(PAYMENT_TRACKING_SPREADSHEET_ID);
    const sheet = ss.getSheetByName(PAYMENT_DEBT_SHEET_NAME);
    
    if (!sheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${PAYMENT_DEBT_SHEET_NAME}`);
    }
    
    const data = sheet.getDataRange().getValues();
    const result = [];
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      if (row[15] || row[13]) { // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå P (‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤) ‡∏´‡∏£‡∏∑‡∏≠ N (‡πÄ‡∏•‡∏Ç‡∏ö‡∏¥‡∏•)
        const debtRecord = {
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ
          idNumber: row[0] || '',
          barcode: row[1] || '',
          itemName: row[2] || '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
          unit: row[3] || '‡∏ä‡∏¥‡πâ‡∏ô',
          quantityPerUnit: parseFloat(row[4]) || 1,
          quantity: parseFloat(row[5]) || 1,
          shopPrice: parseFloat(row[6]) || 0,
          customerPrice: parseFloat(row[7]) || 0,
          image: row[8] || '',
          totalShopPrice: parseFloat(row[9]) || 0,
          totalCustomerPrice: parseFloat(row[10]) || 0,
          
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
          shopAmount: parseFloat(row[11]) || 0,        // L: ‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô
          payAmount: parseFloat(row[12]) || 0,         // M: ‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç
          billNumber: row[13] || '',                   // N: ‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ö‡∫¥‡∫ô
          customerName: row[15] || '',                 // P: ‡∫ä‡∫∑‡ªà‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ï‡∫¥‡∫î
          phoneNumber: row[16] || '',                  // Q: ‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó
          debtDays: parseInt(row[17]) || 0,            // R: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ß‡∫±‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ
          status: row[20] || '',                       // U: ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ
          rowIndex: i + 1
        };
        
        result.push(debtRecord);
      }
    }
    
    return result;
    
  } catch (error) {
    console.error('Error in getPaymentDebtorsList:', error);
    throw error;
  }
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô)
 */
function savePaymentTrackingData(paymentData) {
  try {
    const ss = SpreadsheetApp.openById(PAYMENT_TRACKING_SPREADSHEET_ID);
    const debtSheet = ss.getSheetByName(PAYMENT_DEBT_SHEET_NAME);
    let paymentSheet = ss.getSheetByName(PAYMENT_HISTORY_SHEET_NAME);
    
    if (!debtSheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${PAYMENT_DEBT_SHEET_NAME}`);
    }
    
    if (!paymentSheet) {
      paymentSheet = ss.insertSheet(PAYMENT_HISTORY_SHEET_NAME);
      
      const headers = [
        'ID Number', '‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô', '‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç', '‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ö‡∫¥‡∫ô', '‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫à‡ªà‡∫≤‡∫ç‡ªÄ‡∫á‡∫¥‡∫ô‡∫ä‡ªç‡∫≤‡∫•‡∫∞‡ªú‡∫µ‡ªâ',
        '‡∫ä‡∫∑‡ªà‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ï‡∫¥‡∫î', '‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó', '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ß‡∫±‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ', '‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ä‡ªç‡∫≤‡∫•‡∫∞‡ªú‡∫µ‡ªâ', '‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞'
      ];
      
      paymentSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    }
    
    const paymentId = generateRandomId(12);
    
    const paymentRowData = [
      paymentId,
      paymentData.shopTotalAmount,
      paymentData.customerTotalAmount,
      paymentData.billNumber,
      paymentData.paymentDate,
      paymentData.customerName,
      paymentData.phoneNumber,
      paymentData.debtDays,
      paymentData.paymentAmount,
      paymentData.status
    ];
    
    const lastRow = paymentSheet.getLastRow();
    paymentSheet.getRange(lastRow + 1, 1, 1, paymentRowData.length).setValues([paymentRowData]);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ
    const debtData = debtSheet.getDataRange().getValues();
    let updatedCount = 0;
    
    for (let i = 1; i < debtData.length; i++) {
      const row = debtData[i];
      const billNumber = row[13]; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå N
      
      if (billNumber && billNumber.toString().trim() === paymentData.billNumber.toString().trim()) {
        debtSheet.getRange(i + 1, 21).setValue('‡∫à‡ªà‡∫≤‡∫ç‡ªÅ‡∫•‡ªâ‡∫ß');     // U: ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞
        debtSheet.getRange(i + 1, 19).setValue(paymentData.paymentDate); // S: ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫à‡ªà‡∫≤‡∫ç
        debtSheet.getRange(i + 1, 20).setValue(paymentData.paymentAmount); // T: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô
        updatedCount++;
      }
    }
    
    return {
      success: true,
      message: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï ${updatedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      paymentId: paymentId,
      billNumber: paymentData.billNumber,
      paymentAmount: paymentData.paymentAmount,
      customerName: paymentData.customerName,
      updatedItemsCount: updatedCount
    };
    
  } catch (error) {
    console.error('Error in savePaymentTrackingData:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢: ' + error.message,
      error: error.toString()
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô)
 */
function getPaymentTrackingHistory(customerName = null, billNumber = null) {
  try {
    const ss = SpreadsheetApp.openById(PAYMENT_TRACKING_SPREADSHEET_ID);
    const paymentSheet = ss.getSheetByName(PAYMENT_HISTORY_SHEET_NAME);
    
    if (!paymentSheet) {
      return [];
    }
    
    const data = paymentSheet.getDataRange().getValues();
    const result = [];
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      const paymentRecord = {
        id: row[0],
        shopTotalAmount: row[1],
        customerTotalAmount: row[2],
        billNumber: row[3],
        paymentDate: row[4],
        customerName: row[5],
        phoneNumber: row[6],
        debtDays: row[7],
        paymentAmount: row[8],
        status: row[9]
      };
      
      let includeRecord = true;
      
      if (customerName && paymentRecord.customerName !== customerName) {
        includeRecord = false;
      }
      
      if (billNumber && paymentRecord.billNumber !== billNumber) {
        includeRecord = false;
      }
      
      if (includeRecord) {
        result.push(paymentRecord);
      }
    }
    
    return result;
    
  } catch (error) {
    console.error('Error in getPaymentTrackingHistory:', error);
    return [];
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô)
 */
function getPaymentTrackingStats() {
  try {
    const debtorsList = getPaymentDebtorsList();
    const paymentHistory = getPaymentTrackingHistory();
    
    const stats = {
      totalDebtors: debtorsList.length,
      unpaidDebtors: debtorsList.filter(d => d.status === '‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ').length,
      paidDebtors: debtorsList.filter(d => d.status === '‡∫à‡ªà‡∫≤‡∫ç‡ªÅ‡∫•‡ªâ‡∫ß').length,
      totalUnpaidAmount: debtorsList
        .filter(d => d.status === '‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ')
        .reduce((sum, d) => sum + d.payAmount, 0),
      totalPaidAmount: paymentHistory
        .reduce((sum, p) => sum + (parseFloat(p.paymentAmount) || 0), 0),
      totalPayments: paymentHistory.length
    };
    
    return stats;
    
  } catch (error) {
    console.error('Error in getPaymentTrackingStats:', error);
    return {
      totalDebtors: 0,
      unpaidDebtors: 0,
      paidDebtors: 0,
      totalUnpaidAmount: 0,
      totalPaidAmount: 0,
      totalPayments: 0
    };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
 */
function testPaymentTrackingConnection() {
  try {
    const debtorsList = getPaymentDebtorsList();
    const paymentStats = getPaymentTrackingStats();
    
    return {
      success: true,
      debtorsCount: debtorsList.length,
      unpaidCount: paymentStats.unpaidDebtors,
      paidCount: paymentStats.paidDebtors,
      totalUnpaidAmount: paymentStats.totalUnpaidAmount,
      message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    };
    
  } catch (error) {
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ: ' + error.message
    };
  }
}



/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á "‡∫•‡∫≤‡∫ç‡∫ä‡∫∑‡ªà‡∫Ñ‡∫ª‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ"
 */
function getCustomerListData() {
  try {
    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á:', CUSTOMER_LIST_SHEET_NAME);
    
    const ss = SpreadsheetApp.openById(CUSTOMER_LIST_SPREADSHEET_ID);
    const sheet = ss.getSheetByName(CUSTOMER_LIST_SHEET_NAME);
    
    if (!sheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${CUSTOMER_LIST_SHEET_NAME}"`);
    }
    
    const data = sheet.getDataRange().getValues();
    const customers = [];
    const customerPhoneMap = {};
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 (‡∏Ç‡πâ‡∏≤‡∏° header)
    for (let i = 1; i < data.length; i++) {
      const customerName = data[i][1]; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B
      const phoneNumber = data[i][2];  // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B
      if (customerName && customerName.toString().trim()) {
        const cleanName = customerName.toString().trim();
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
        if (!customers.includes(cleanName)) {
          customers.push(cleanName);
        }
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        if (phoneNumber && phoneNumber.toString().trim()) {
          customerPhoneMap[cleanName] = phoneNumber.toString().trim();
        }
      }
    }
    
    console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${customers.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    return {
      success: true,
      customers: customers.sort(), // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
      customerPhoneMap: customerPhoneMap,
      totalRecords: customers.length
    };
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:', error);
    return {
      success: false,
      customers: [],
      customerPhoneMap: {},
      totalRecords: 0,
      error: error.message
    };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á "‡∫•‡∫≤‡∫ç‡∫ä‡∫∑‡ªà‡∫Ñ‡∫ª‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ"
 */
function testCustomerListConnection() {
  try {
    const result = getCustomerListData();
    
    if (result.success) {
      return {
        success: true,
        message: `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${result.totalRecords} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
        sampleData: result.customers.slice(0, 5), // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
        totalRecords: result.totalRecords
      };
    } else {
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: ' + result.error
      };
    }
    
  } catch (error) {
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ' + error.message
    };
  }
}
/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)
 */
function saveDebtDataUpdated(debtItems, customerInfo, extraAmount, imageUrl) {
  try {
    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ...');
    console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', {
      itemCount: debtItems.length,
      customerInfo: customerInfo,
      extraAmount: extraAmount,
      hasImage: !!imageUrl
    });
    
    const result = saveDebtTrackingData(debtItems, customerInfo, extraAmount, imageUrl);
    console.log('‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:', result);
    
    return result;
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô saveDebtDataUpdated:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function getDebtorsList() {
  try {
    return getPaymentDebtorsList();
  } catch (error) {
    console.error('Error in getDebtorsList:', error);
    return [];
  }
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏¥‡∏•
 */
function savePaymentDataWithBillUpdate(paymentData) {
  try {
    console.log('üîÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏•:', paymentData);
    
    const result = savePaymentTrackingData(paymentData);
    console.log('‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢:', result);
    
    return result;
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô savePaymentDataWithBillUpdate:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message
    };
  }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ Google Drive (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ)
 */
function uploadImageToGoogleDrive(base64Data, fileName, mimeType) {
  try {
    return uploadDebtImageToGoogleDrive(base64Data, fileName, mimeType);
  } catch (error) {
    console.error('Error in uploadImageToGoogleDrive:', error);
    return {
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ: ' + error.message
    };
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö autocomplete)
 */
function getCustomerList() {
  try {
    return getCustomerListData();
  } catch (error) {
    console.error('Error in getCustomerList:', error);
    return {
      success: false,
      customers: [],
      customerPhoneMap: {}
    };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏ô Google Drive
 */
function testAndCreateBackupFolder() {
  try {
    const messages = [];
    let backupFolderId = null;
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
    try {
      const mainFolder = DriveApp.getFolderById(DEBT_DRIVE_FOLDER_ID);
      messages.push(`‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ: ${mainFolder.getName()}`);
    } catch (error) {
      messages.push(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ: ${error.message}`);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏ô Root
      try {
        const backupFolder = DriveApp.createFolder('Debt_Images_Backup_' + Date.now());
        backupFolderId = backupFolder.getId();
        messages.push(`üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏ô Root: ${backupFolder.getName()}`);
      } catch (createError) {
        messages.push(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ: ${createError.message}`);
      }
    }
    
    return {
      success: true,
      message: messages,
      backupFolderId: backupFolderId
    };
  } catch (error) {
    return {
      success: false,
      message: ['‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message]
    };
  }
}
/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á "‡∫Ñ‡∫ª‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
 */
function saveRemainingDebtData(remainingDebtData) {
  try {
    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:', remainingDebtData);
    
    const ss = SpreadsheetApp.openById(DEBT_TRACKING_SPREADSHEET_ID);
    const sheet = ss.getSheetByName(DEBT_TRACKING_SHEET_NAME);
    
    if (!sheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${DEBT_TRACKING_SHEET_NAME}"`);
    }
    
    const currentDate = new Date();
    const formattedDate = Utilities.formatDate(currentDate, Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm:ss');
    const uniqueId = generateRandomId(12);
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà
    const newRowData = [
      uniqueId,                                    // A: ID Number
      '',                                          // B: ‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ö‡∫≤‡ªÇ‡∫Ñ‡∫î (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      '‡∫à‡ªà‡∫≤‡∫ç‡ªÄ‡∫á‡∫¥‡∫ô‡∫ö‡ªç‡ªà‡ªù‡∫ª‡∫î',                          // C: ‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤
      '',                                          // D: ‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      '',                                          // E: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ï‡ªç‡ªà‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç (‡πÄ‡∏ß‡ªâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      '',                                          // F: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      '',                                          // G: ‡∫•‡∫≤‡∫Ñ‡∫≤‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      '',                                          // H: ‡∫•‡∫≤‡∫Ñ‡∫≤‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      '',                                          // I: ‡∫Æ‡∫π‡∫ö‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤ (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      '',                                          // J: ‡∫•‡∫ß‡∫°‡∫•‡∫≤‡∫Ñ‡∫≤‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      '',                                          // K: ‡∫•‡∫ß‡∫°‡∫•‡∫≤‡∫Ñ‡∫≤‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      remainingDebtData.remainingAmount,           // L: ‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô
      remainingDebtData.remainingAmount,           // M: ‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç
      remainingDebtData.originalBillNumber,        // N: ‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ö‡∫¥‡∫ô
      formattedDate,                               // O: ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫ï‡∫¥‡∫î
      remainingDebtData.customerName,              // P: ‡∫ä‡∫∑‡ªà‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ï‡∫¥‡∫î
      remainingDebtData.phoneNumber,               // Q: ‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó
      `=TODAY()-O${sheet.getLastRow() + 1}`,       // R: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ß‡∫±‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ
      '',                                          // S: ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫à‡ªà‡∫≤‡∫ç‡ªÄ‡∫á‡∫¥‡∫ô‡∫ä‡ªç‡∫≤‡∫•‡∫∞‡ªú‡∫µ‡ªâ (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      '',                                          // T: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ä‡ªç‡∫≤‡∫•‡∫∞‡ªú‡∫µ‡ªâ (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
      '‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ',                                   // U: ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ
      0,                                           // V: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ô‡∫≠‡∫Å‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô
      ''                                           // W: ‡∫Æ‡∫π‡∫ö‡ªÄ‡∫≠‡∫Å‡∫∞‡∫™‡∫≤‡∫ô (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)
    ];
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const lastRow = sheet.getLastRow();
    const targetRange = sheet.getRange(lastRow + 1, 1, 1, newRowData.length);
    targetRange.setValues([newRowData]);
    
    console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÅ‡∏ñ‡∏ß ${lastRow + 1}`);
    
    return {
      success: true,
      message: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remainingDebtData.remainingAmount} ‚Ç≠ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      remainingAmount: remainingDebtData.remainingAmount,
      billNumber: remainingDebtData.originalBillNumber,
      customerName: remainingDebtData.customerName,
      rowNumber: lastRow + 1
    };
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ' + error.message,
      error: error.toString()
    };
  }
}


/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ô‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ
 */
/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ô‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
 */
function saveEditedDebtorData(editData) {
  try {
    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ô‡∏ï‡∏¥‡∏î‡∏´‡∏ô‡∏µ‡πâ:', editData);
    console.log('üìä ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L ‡πÅ‡∏•‡∏∞ M:', editData.finalGrandTotal);
    
    const ss = SpreadsheetApp.openById(DEBT_TRACKING_SPREADSHEET_ID);
    const sheet = ss.getSheetByName(DEBT_TRACKING_SHEET_NAME);
    
    if (!sheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${DEBT_TRACKING_SHEET_NAME}"`);
    }
    
    const currentDate = new Date();
    const formattedDate = Utilities.formatDate(currentDate, Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm:ss');
    
    // ‡πÉ‡∏ä‡πâ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å frontend (‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÄ‡∏î‡∏¥‡∏° + ‡∏¢‡∏≠‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà)
    const finalTotalAmount = editData.finalGrandTotal; // 9
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const newRows = editData.newItems.map(item => {
      const uniqueId = generateRandomId(12);
      const lastRow = sheet.getLastRow();
      
      return [
        uniqueId,                                    // A: ID Number
        item.barcode,                                // B: ‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ö‡∫≤‡ªÇ‡∫Ñ‡∫î
        item.itemName,                               // C: ‡∫ä‡∫∑‡ªà‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤
        item.unit,                                   // D: ‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç
        1,                                           // E: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ï‡ªç‡ªà‡∫´‡∫ª‡∫ß‡ªú‡ªà‡∫ß‡∫ç
        item.quantity,                               // F: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô
        item.shopPrice,                              // G: ‡∫•‡∫≤‡∫Ñ‡∫≤‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô
        item.customerPrice,                          // H: ‡∫•‡∫≤‡∫Ñ‡∫≤‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç
        item.image,                                  // I: ‡∫Æ‡∫π‡∫ö‡∫™‡∫¥‡∫ô‡∫Ñ‡ªâ‡∫≤
        item.totalShopPrice,                         // J: ‡∫•‡∫ß‡∫°‡∫•‡∫≤‡∫Ñ‡∫≤‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô
        item.totalCustomerPrice,                     // K: ‡∫•‡∫ß‡∫°‡∫•‡∫≤‡∫Ñ‡∫≤‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç
        finalTotalAmount,                            // L: ‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡ªú‡ªâ‡∫≤‡∫Æ‡ªâ‡∫≤‡∫ô = 9
        finalTotalAmount,                            // M: ‡∫ç‡∫≠‡∫î‡∫•‡∫ß‡∫°‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ä‡∫∑‡ªâ‡ªÑ‡∫õ‡∫Ç‡∫≤‡∫ç = 9
        editData.originalBillNumber,                 // N: ‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ö‡∫¥‡∫ô
        formattedDate,                               // O: ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫ï‡∫¥‡∫î
        editData.customerName,                       // P: ‡∫ä‡∫∑‡ªà‡∫•‡∫π‡∫Å‡∫Ñ‡ªâ‡∫≤‡∫ï‡∫¥‡∫î
        editData.phoneNumber,                        // Q: ‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó
        `=TODAY()-O${lastRow + 1}`,                  // R: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡∫ß‡∫±‡∫ô‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ
        '',                                          // S: ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡∫à‡ªà‡∫≤‡∫ç‡ªÄ‡∫á‡∫¥‡∫ô‡∫ä‡ªç‡∫≤‡∫•‡∫∞‡ªú‡∫µ‡ªâ
        '',                                          // T: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ä‡ªç‡∫≤‡∫•‡∫∞‡ªú‡∫µ‡ªâ
        '‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ',                                   // U: ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ
        0,                                           // V: ‡∫à‡ªç‡∫≤‡∫ô‡∫ß‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô‡∫ô‡∫≠‡∫Å‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô
        ''                                           // W: ‡∫Æ‡∫π‡∫ö‡ªÄ‡∫≠‡∫Å‡∫∞‡∫™‡∫≤‡∫ô
      ];
    });
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
    if (newRows.length > 0) {
      const lastRow = sheet.getLastRow();
      const targetRange = sheet.getRange(lastRow + 1, 1, newRows.length, newRows[0].length);
      targetRange.setValues(newRows);
      console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà ${newRows.length} ‡πÅ‡∏ñ‡∏ß`);
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L ‡πÅ‡∏•‡∏∞ M ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ billNumber ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const allData = sheet.getDataRange().getValues();
    let updatedCount = 0;
    
    for (let i = 1; i < allData.length; i++) {
      const row = allData[i];
      const billNumber = row[13]; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå N
      const status = row[20];     // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå U
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ö‡∏¥‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ"
      if (billNumber === editData.originalBillNumber && status === '‡∫ï‡∫¥‡∫î‡ªú‡∫µ‡ªâ') {
        sheet.getRange(i + 1, 12).setValue(finalTotalAmount); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L = 9
        sheet.getRange(i + 1, 13).setValue(finalTotalAmount); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå M = 9
        updatedCount++;
      }
    }
    
    console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ${finalTotalAmount} ‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L ‡πÅ‡∏•‡∏∞ M ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${updatedCount} ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏¥‡∏• ${editData.originalBillNumber}`);
    console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÄ‡∏û‡∏¥‡πà‡∏° ${newRows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà`);
    
    return {
      success: true,
      message: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ${newRows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô ${finalTotalAmount}`,
      originalBillNumber: editData.originalBillNumber,
      newItemsCount: newRows.length,
      newTotalAmount: finalTotalAmount,
      addedAmount: editData.newItemsAmount,
      updatedRowsCount: updatedCount
    };
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ' + error.message,
      error: error.toString()
    };
  }
}



/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Items (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)
 * @param {Array} updatedItems - ‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤
 * @returns {Object} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
function updateItemPrices(updatedItems) {
  try {
    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:', updatedItems.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const itemsSheet = ss.getSheetByName(ITEMS_SHEET);
    
    if (!itemsSheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${ITEMS_SHEET}"`);
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Items
    const itemsData = itemsSheet.getDataRange().getValues();
    let updatedCount = 0;
    const updateResults = [];
    
    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    updatedItems.forEach(item => {
      const barcode = item.barcode.toString().trim();
      const newPrice = parseFloat(item.newPrice) || 0;
      const oldPrice = parseFloat(item.oldPrice) || 0;
      
      // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö barcode ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A
      for (let i = 1; i < itemsData.length; i++) {
        const cellValue = itemsData[i][0]; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A
        
        if (cellValue && cellValue.toString().trim() === barcode) {
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C (index 2)
          itemsSheet.getRange(i + 1, 3).setValue(newPrice);
          
          updateResults.push({
            barcode: barcode,
            itemName: itemsData[i][1] || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠', // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B
            oldPrice: oldPrice,
            newPrice: newPrice,
            rowNumber: i + 1
          });
          
          updatedCount++;
          console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤: ${barcode} ‡∏à‡∏≤‡∏Å ${oldPrice} ‡πÄ‡∏õ‡πá‡∏ô ${newPrice}`);
          break;
        }
      }
    });
    
    console.log(`üéâ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${updatedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    return {
      success: true,
      message: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${updatedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      updatedCount: updatedCount,
      updateResults: updateResults,
      timestamp: new Date().toLocaleString()
    };
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤: ' + error.message,
      error: error.toString(),
      updatedCount: 0
    };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Items ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤
 */
function testPriceUpdateAccess() {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const itemsSheet = ss.getSheetByName(ITEMS_SHEET);
    
    if (!itemsSheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á "${ITEMS_SHEET}"`);
    }
    
    const lastRow = itemsSheet.getLastRow();
    const lastColumn = itemsSheet.getLastColumn();
    
    return {
      success: true,
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Items ‡πÑ‡∏î‡πâ',
      sheetName: ITEMS_SHEET,
      lastRow: lastRow,
      lastColumn: lastColumn,
      hasData: lastRow > 1
    };
    
  } catch (error) {
    return {
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Items ‡πÑ‡∏î‡πâ: ' + error.message
    };
  }
}
