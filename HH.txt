<!DOCTYPE html>
<html lang="lo">
<head>
  <!-- Cropper.js CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css" />
  
  <!-- Cropper.js JS -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"></script>
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  
  <!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ລະບົບຂໍ້ມູນປະຊາກອນ</title>
  <style>

    /* ===== MOBILE TYPE SELECTION ===== */
.mobile-type-option > div:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 20px rgba(0,0,0,0.15);
  border-color: #667eea !important;
}

.mobile-type-option.selected > div {
  border-color: #667eea !important;
  box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
}

/* ===== HOUSEHOLD SELECTOR ===== */
.household-card {
  padding: 15px;
  border: 2px solid #e0e0e0;
  border-radius: 10px;
  margin-bottom: 10px;
  cursor: pointer;
  transition: all 0.3s;
  background: white;
}

.household-card:hover {
  border-color: #4caf50;
  background: #f1f8f4;
  transform: translateX(5px);
}

.household-card.selected {
  border-color: #4caf50;
  background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%);
  box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
}

.household-card-header {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 10px;
}

.household-card-photo {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid #4caf50;
}

.household-card-photo.placeholder {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background: #e0e0e0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 32px;
  border: 3px solid #e0e0e0;
}

.household-card-info h4 {
  margin: 0 0 5px 0;
  font-size: 18px;
  color: #333;
}

.household-card-info p {
  margin: 0;
  font-size: 13px;
  color: #666;
}

.household-card-details {
  padding-left: 75px;
  font-size: 13px;
  color: #777;
}

.household-card-details span {
  display: inline-block;
  margin-right: 15px;
}

/* ===== MOBILE MEMBER SECTION ===== */
.mobile-member-section {
  background: linear-gradient(135deg, #f8f9ff 0%, #fff 100%);
  border: 2px solid #667eea;
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 20px;
  position: relative;
}

.mobile-member-section:nth-child(even) {
  background: linear-gradient(135deg, #fff9f0 0%, #fff 100%);
  border-left: 5px solid #ff9800;
}

.mobile-member-section h3::before {
  content: attr(data-member-number);
  position: absolute;
  left: -15px;
  top: 15px;
  width: 40px;
  height: 40px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  font-weight: bold;
  box-shadow: 0 3px 10px rgba(102, 126, 234, 0.4);
}

/* ===== RENTAL PERIODS (Dynamic Dates) ===== */
.rental-periods-container {
  border: 2px dashed #667eea;
  border-radius: 10px;
  padding: 15px;
  background: #f8f9ff;
  margin-top: 10px;
}

.rental-period-item {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 10px;
  padding: 10px;
  background: white;
  border-radius: 8px;
  border: 1px solid #e0e0e0;
}

.rental-period-item label {
  min-width: 80px;
  font-weight: 600;
  color: #667eea;
}

.rental-period-item input[type="text"],
.rental-period-item input[type="number"] {
  padding: 8px 12px;
  border: 2px solid #e0e0e0;
  border-radius: 5px;
  font-size: 14px;
}

.rental-period-item .date-input {
  flex: 1;
  max-width: 150px;
}

.rental-period-item .days-input {
  width: 100px;
}

.rental-period-item .end-date-display {
  flex: 1;
  padding: 8px 12px;
  background: #e8f5e9;
  border: 2px solid #4caf50;
  border-radius: 5px;
  font-weight: 600;
  color: #2e7d32;
}

.btn-add-period {
  width: 100%;
  padding: 10px;
  background: linear-gradient(135deg, #4caf50 0%, #66bb6a 100%);
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 600;
  transition: all 0.3s;
  margin-top: 10px;
}

.btn-add-period:hover {
  background: linear-gradient(135deg, #66bb6a 0%, #81c784 100%);
  transform: translateY(-2px);
}

.btn-remove-period {
  padding: 8px 12px;
  background: #f44336;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 12px;
  transition: all 0.3s;
}

.btn-remove-period:hover {
  background: #da190b;
  transform: scale(1.05);
}

    .loading-counter {
  color: white;
  font-size: 48px;
  font-weight: bold;
  margin-top: 20px;
  font-family: 'Courier New', monospace;
  text-shadow: 0 0 20px rgba(102, 126, 234, 0.8);
  animation: counterPulse 1s infinite;
}

.loading-message {
  color: white;
  font-size: 18px;
  margin-top: 10px;
  opacity: 0.9;
}

@keyframes counterPulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.1); }
}
    /* สีไล่ลำดับสำหรับฟอร์มสมาชิก */
.member-section:nth-child(odd) {
  background: linear-gradient(135deg, #f8f9ff 0%, #fff 100%) !important;
  border-left: 5px solid #667eea !important;
}

.member-section:nth-child(even) {
  background: linear-gradient(135deg, #fff9f0 0%, #fff 100%) !important;
  border-left: 5px solid #ff9800 !important;
}

.member-section:nth-child(3n) {
  background: linear-gradient(135deg, #f0fff4 0%, #fff 100%) !important;
  border-left: 5px solid #4caf50 !important;
}

.member-section:nth-child(4n) {
  background: linear-gradient(135deg, #fff0f5 0%, #fff 100%) !important;
  border-left: 5px solid #e91e63 !important;
}

.member-section:nth-child(5n) {
  background: linear-gradient(135deg, #f0f8ff 0%, #fff 100%) !important;
  border-left: 5px solid #2196f3 !important;
}

/* เพิ่มเงาให้ชัดเจนขึ้น */
.member-section {
  box-shadow: 0 3px 10px rgba(0,0,0,0.1) !important;
  transition: all 0.3s ease !important;
  position: relative;
  padding-left: 25px !important;
}

.member-section:hover {
  box-shadow: 0 5px 20px rgba(0,0,0,0.15) !important;
  transform: translateX(5px);
}

/* หมายเลขฟอร์ม */
.member-section h3::before {
  content: attr(data-member-number);
  position: absolute;
  left: -15px;
  top: 15px;
  width: 40px;
  height: 40px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  font-weight: bold;
  box-shadow: 0 3px 10px rgba(102, 126, 234, 0.4);
  z-index: 10;
}

.member-section:nth-child(even) h3::before {
  background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%);
}

.member-section:nth-child(3n) h3::before {
  background: linear-gradient(135deg, #4caf50 0%, #388e3c 100%);
}

.member-section:nth-child(4n) h3::before {
  background: linear-gradient(135deg, #e91e63 0%, #c2185b 100%);
}

.member-section:nth-child(5n) h3::before {
  background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);
}
/* Animation สำหรับ Disease Tags */
/* แก้ไขขนาดช่องวันที่ให้ใหญ่ขึ้น (ปัญหาข้อ 2 และ 3) */
input[type="date"] {
  min-width: 200px !important;
  width: 100% !important;
  padding: 12px !important;
  font-size: 16px !important;
}

.member-section input[type="date"] {
  min-width: 220px !important;
  width: 100% !important;
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateX(-20px) scale(0.8);
  }
  to {
    opacity: 1;
    transform: translateX(0) scale(1);
  }
}
    /* Validation Styles */
.required-field {
  position: relative;
}

.required-field.invalid {
  border-color: #f44336 !important;
  animation: shake 0.5s, blink 1s infinite;
  background: #ffebee !important;
}

@keyframes blink {
  0%, 100% { 
    box-shadow: 0 0 10px rgba(244, 67, 54, 0.5);
  }
  50% { 
    box-shadow: 0 0 20px rgba(244, 67, 54, 0.8);
  }
}

.validation-error-popup {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  border-radius: 15px;
  padding: 30px;
  max-width: 500px;
  width: 90%;
  box-shadow: 0 20px 60px rgba(0,0,0,0.3);
  z-index: 10001;
  animation: popupAppear 0.3s ease-out;
}

@keyframes popupAppear {
  from {
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.8);
  }
  to {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }
}

.validation-error-header {
  display: flex;
  align-items: center;
  gap: 10px;
  color: #f44336;
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 20px;
}

.validation-error-list {
  max-height: 300px;
  overflow-y: auto;
  margin-bottom: 20px;
}

.validation-error-item {
  padding: 10px;
  background: #ffebee;
  border-left: 4px solid #f44336;
  border-radius: 5px;
  margin-bottom: 10px;
  display: flex;
  align-items: center;
  gap: 10px;
}
    /* Hide photo upload by default for new members */
.member-section .photo-upload-wrapper {
  display: none;
  opacity: 0;
  transition: all 0.5s ease;
  margin-bottom: 20px;
}

.member-section .photo-upload-wrapper.show {
  display: block;
  opacity: 1;
  animation: slideDown 0.5s ease;
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Photo upload notice */
.photo-upload-notice {
  background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
  border: 2px solid #ffc107;
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 20px;
  display: flex;
  align-items: center;
  gap: 10px;
  font-size: 14px;
  color: #856404;
  box-shadow: 0 3px 10px rgba(255, 193, 7, 0.2);
}

.photo-upload-notice.hidden {
  display: none;
}

.photo-upload-notice .icon {
  font-size: 28px;
  animation: bounce 2s infinite;
}

@keyframes bounce {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-5px); }
}
    /* Beautiful custom marker styling */
.custom-beautiful-marker {
  z-index: 1000 !important;
}

.custom-map-marker {
  animation: markerBounce 0.5s ease-out;
  filter: drop-shadow(0 4px 8px rgba(244, 67, 54, 0.4));
  transition: all 0.3s ease;
}

.custom-map-marker:hover {
  filter: drop-shadow(0 6px 12px rgba(244, 67, 54, 0.6));
  transform: scale(1.1);
}

@keyframes markerBounce {
  0% {
    transform: translateY(-30px) scale(0.8);
    opacity: 0;
  }
  60% {
    transform: translateY(5px) scale(1.1);
  }
  100% {
    transform: translateY(0) scale(1);
    opacity: 1;
  }
}

/* Pulse animation for marker */
.custom-beautiful-marker .custom-map-marker {
  position: relative;
}

.custom-beautiful-marker .custom-map-marker::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 40px;
  height: 40px;
  margin: -20px 0 0 -20px;
  border-radius: 50%;
  background: rgba(244, 67, 54, 0.3);
  animation: markerPulse 2s infinite;
}

@keyframes markerPulse {
  0% {
    transform: scale(0.5);
    opacity: 1;
  }
  100% {
    transform: scale(2);
    opacity: 0;
  }
}

/* Marker drag state */
.leaflet-marker-draggable {
  cursor: move !important;
}

.leaflet-marker-draggable:active {
  cursor: grabbing !important;
}
    /* Disable interaction for auto-calculated fields */
#registryBookCount,
#registryNumber {
  pointer-events: none;
  user-select: none;
  cursor: not-allowed;
}

/* Make it visually clear these are auto-calculated */
#registryBookCount:focus,
#registryNumber:focus {
  outline: none;
  border-color: inherit;
  box-shadow: none;
}
/* Enhanced Registry Number Item Styling */
.registry-number-item {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 15px;
  padding: 15px;
  background: #f8f9ff;
  border-radius: 8px;
  border: 1px solid #e0e0e0;
  flex-wrap: wrap;
}

.registry-number-item label {
  min-width: 80px;
  font-weight: 600;
  color: #667eea;
}

.registry-input-group {
  display: flex;
  gap: 10px;
  flex: 1;
  align-items: center;
  flex-wrap: wrap;
  min-width: 500px;
}

.registry-input-group .number-input {
  flex: 1;
  min-width: 200px;
  padding: 10px;
  font-size: 16px;
}

.registry-number-item label {
  min-width: 70px;
  font-weight: 600;
  color: #667eea;
}

.registry-input-group {
  display: flex;
  gap: 10px;
  flex: 1;
  align-items: center;
}

.registry-input-group .number-input {
  flex: 1;
  max-width: 200px;
}

.registry-input-group .date-inputs {
  display: flex;
  gap: 5px;
  align-items: center;
}

.registry-input-group .date-inputs input {
  width: 80px;
  min-width: 80px;
  text-align: center;
  padding: 8px;
  font-size: 16px;
}

.registry-input-group .date-inputs input:last-child {
  width: 100px;
  min-width: 100px;
}

.registry-input-group .date-inputs span {
  color: #666;
  font-size: 14px;
}
    /* Participation Option Styling */
.participation-option > div:hover {
  border-color: #667eea !important;
  background: #f8f9ff;
  transform: translateY(-2px);
  box-shadow: 0 4px 10px rgba(0,0,0,0.1);
}

.participation-option.selected > div {
  border-color: #667eea !important;
  background: #f0f0ff;
  box-shadow: 0 4px 10px rgba(102, 126, 234, 0.3);
}

.participation-option input[type="radio"] {
  width: 20px;
  height: 20px;
  cursor: pointer;
}

/* Participation Display Styling */
#participationDisplay {
  font-size: 16px;
  font-weight: 600;
  text-align: center;
}

#participationDisplay.excellent {
  background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%) !important;
  color: #1b5e20;
  border: 2px solid #4caf50;
}

#participationDisplay.verygood {
  background: linear-gradient(135deg, #f1f8e9 0%, #dcedc8 100%) !important;
  color: #33691e;
  border: 2px solid #689f38;
}

#participationDisplay.moderate {
  background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%) !important;
  color: #f57f17;
  border: 2px solid #ffc107;
}

#participationDisplay.lacking {
  background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%) !important;
  color: #b71c1c;
  border: 2px solid #f44336;
}
    /* Beautiful marker */
.beautiful-marker {
  z-index: 1000 !important;
  animation: markerPulse 2s ease-out infinite;
}

@keyframes markerPulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

/* My location button special style */
#btnMyLocation {
  background: linear-gradient(135deg, #4285F4 0%, #1976D2 100%);
  color: white;
}

#btnMyLocation:hover {
  background: linear-gradient(135deg, #1976D2 0%, #0D47A1 100%);
}

#btnMyLocation.active {
  background: linear-gradient(135deg, #4285F4 0%, #1976D2 100%);
}
    /* Large marker styling */
.custom-marker-large {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.5));
  cursor: move;
  z-index: 1000 !important;
}

.custom-marker-large:hover {
  filter: drop-shadow(0 6px 12px rgba(0, 0, 0, 0.7));
}

/* Ensure marker is on top */
.leaflet-marker-pane {
  z-index: 700 !important;
}

.leaflet-marker-icon {
  z-index: 1000 !important;
}
/* Custom marker animation */
.custom-marker {
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.2);
  }
  100% {
    transform: scale(1);
  }
}
.registry-modal {
  max-width: 900px;
  width: 95%;
  max-height: 90vh;
  overflow-y: auto;
}

.registry-option {
  border: 2px solid #e0e0e0;
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 15px;
  transition: all 0.3s;
}

.registry-option.selected {
  border-color: #4caf50;
  background: #f1f8f4;
}

.registry-option-header {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 10px;
  cursor: pointer;
  user-select: none;
}

.registry-option-header input[type="checkbox"] {
  width: 20px;
  height: 20px;
  cursor: pointer;
}

.registry-option-header label {
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  flex: 1;
}

.registry-details {
  display: none;
  margin-top: 15px;
  padding-top: 15px;
  border-top: 1px solid #e0e0e0;
}

.registry-details.active {
  display: block;
}

.registry-count-input {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 15px;
}

.registry-count-input label {
  font-weight: 600;
  min-width: 80px;
}

.registry-count-input input {
  flex: 1;
  padding: 8px 12px;
  border: 2px solid #e0e0e0;
  border-radius: 5px;
  font-size: 16px;
  text-align: center;
}

.registry-numbers {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.registry-number-item {
  display: flex;
  align-items: center;
  gap: 10px;
}

.registry-number-item label {
  min-width: 60px;
  font-weight: 500;
}

.registry-number-item input {
  flex: 1;
  padding: 8px 12px;
  border: 2px solid #e0e0e0;
  border-radius: 5px;
  font-size: 14px;
}

.registry-summary {
  background: #e3f2fd;
  border: 2px solid #2196F3;
  border-radius: 10px;
  padding: 15px;
  margin-top: 20px;
}

.registry-summary h4 {
  color: #1565c0;
  margin-bottom: 10px;
}

.registry-summary-item {
  display: flex;
  justify-content: space-between;
  padding: 5px 0;
  border-bottom: 1px solid #90caf9;
}

.registry-summary-item:last-child {
  border-bottom: none;
  font-weight: 600;
  color: #1565c0;
}
/* ===== MAP LAYER SWITCHER ===== */
.map-layer-switcher {
  position: absolute;
  top: 10px;
  right: 10px;
  z-index: 1000;
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.3);
  overflow: hidden;
  display: flex;
}

.map-layer-btn {
  padding: 10px 20px;
  border: none;
  background: white;
  cursor: pointer;
  font-size: 14px;
  font-weight: 600;
  transition: all 0.3s;
  border-right: 1px solid #e0e0e0;
}

.map-layer-btn:last-child {
  border-right: none;
}

.map-layer-btn.active {
  background: linear-gradient(135deg, #4caf50 0%, #66bb6a 100%);
  color: white;
}

.map-layer-btn:hover {
  background: #f0f0f0;
}

.map-layer-btn.active:hover {
  background: linear-gradient(135deg, #66bb6a 0%, #81c784 100%);
}
    /* ===== IMAGE CROP MODAL ===== */
.crop-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.95);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 10002;
}

.crop-modal.active {
  display: flex;
}

.crop-modal-content {
  background: white;
  border-radius: 15px;
  padding: 20px;
  max-width: 95%;
  max-height: 95%;
  width: 1200px;
  display: flex;
  flex-direction: column;
}

.crop-modal h2 {
  margin-bottom: 15px;
  color: #667eea;
  text-align: center;
}

.crop-container {
  flex: 1;
  max-height: 500px;
  margin-bottom: 15px;
  background: #f5f5f5;
  border-radius: 10px;
  overflow: hidden;
}

.crop-container img {
  max-width: 100%;
  display: block;
}

.crop-tools {
  display: flex;
  justify-content: center;
  gap: 10px;
  margin-bottom: 15px;
  flex-wrap: wrap;
}

.crop-tool-btn {
  padding: 10px 20px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s;
  font-size: 16px;
  display: flex;
  align-items: center;
  gap: 5px;
}

.crop-tool-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
}

.crop-tool-btn:active {
  transform: translateY(0);
}

.crop-buttons {
  display: flex;
  gap: 10px;
}

.crop-buttons button {
  flex: 1;
}

.aspect-ratio-selector {
  display: flex;
  gap: 5px;
  margin-bottom: 15px;
  justify-content: center;
  flex-wrap: wrap;
}

.aspect-btn {
  padding: 8px 15px;
  background: #e0e0e0;
  border: 2px solid transparent;
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.3s;
}

.aspect-btn.active {
  background: #667eea;
  color: white;
  border-color: #764ba2;
}

.aspect-btn:hover {
  background: #d0d0d0;
}

.aspect-btn.active:hover {
  background: #5568d3;
}
    /* ===== LOCATION PICKER BUTTON ===== */
.btn-location {
  padding: 12px 20px;
  background: linear-gradient(135deg, #4caf50 0%, #66bb6a 100%);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 20px;
  cursor: pointer;
  transition: all 0.3s;
  box-shadow: 0 2px 5px rgba(76, 175, 80, 0.3);
}

.btn-location:hover {
  background: linear-gradient(135deg, #66bb6a 0%, #81c784 100%);
  transform: scale(1.1);
  box-shadow: 0 4px 10px rgba(76, 175, 80, 0.5);
}

/* ===== LOCATION PICKER MODAL ===== */
.location-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 10001;
}

.location-modal.active {
  display: flex;
}

.location-modal-content {
  background: white;
  border-radius: 15px;
  padding: 20px;
  max-width: 90%;
  max-height: 90%;
  width: 800px;
  height: 600px;
  display: flex;
  flex-direction: column;
}

.location-modal h2 {
  margin-bottom: 15px;
  color: #4caf50;
}

#map {
  flex: 1;
  border-radius: 10px;
  margin-bottom: 15px;
}

.location-info {
  background: #f5f5f5;
  padding: 10px;
  border-radius: 8px;
  margin-bottom: 15px;
  font-family: monospace;
}

.location-buttons {
  display: flex;
  gap: 10px;
}

.location-buttons button {
  flex: 1;
}
/* ===== FIX MAP DISPLAY ===== */
#map {
  width: 100%;
  height: 400px;
  z-index: 1;
}

.location-modal-content {
  display: flex;
  flex-direction: column;
}

.location-buttons button {
  padding: 12px 24px;
}

/* Fix for Leaflet controls */
.leaflet-control-layers,
.leaflet-control-zoom {
  margin: 10px !important;
}

.leaflet-container {
  font-size: 14px;
  font-family: 'Phetsarath OT', 'Noto Sans Lao', Arial, sans-serif;
}
    /* ===== MEMBER HIGHLIGHT ===== */
.member-editing {
  background: linear-gradient(135deg, #fff3cd 0%, #fff8e1 100%);
  border: 3px solid #ffc107;
  animation: highlightPulse 1.5s infinite;
  scroll-margin-top: 100px;
}

@keyframes highlightPulse {
  0%, 100% { 
    box-shadow: 0 0 0 0 rgba(255, 193, 7, 0.7);
  }
  50% { 
    box-shadow: 0 0 0 10px rgba(255, 193, 7, 0);
  }
}

/* ===== HOUSEHOLD SECTION STYLING ===== */
.form-section.household-section {
  background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
  border: 3px solid #667eea;
}

.form-section.member-section {
  background: #f8f9ff;
  border: 2px solid #e0e0e0;
}

/* ===== IMAGE PREVIEW MODAL ===== */
.image-preview-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.9);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 10000;
  cursor: zoom-out;
}

.image-preview-modal.active {
  display: flex;
}

.image-preview-modal img {
  max-width: 90%;
  max-height: 90%;
  object-fit: contain;
  border-radius: 10px;
  box-shadow: 0 10px 50px rgba(0, 0, 0, 0.5);
}

/* ===== PROFILE IMAGE CLICKABLE ===== */
.profile-img {
  cursor: pointer;
  transition: transform 0.3s;
}

.profile-img:hover {
  transform: scale(1.1);
}

/* ===== PAGINATION ===== */
.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
  margin: 20px 0;
  flex-wrap: wrap;
}

.pagination button {
  padding: 10px 15px;
  background: #667eea;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.3s;
  min-width: 40px;
}

.pagination button:hover:not(:disabled) {
  background: #5568d3;
  transform: translateY(-2px);
}

.pagination button:disabled {
  background: #ccc;
  cursor: not-allowed;
  opacity: 0.5;
}

.pagination .page-info {
  padding: 10px 20px;
  background: #f0f0f0;
  border-radius: 5px;
  font-weight: 600;
}
/* ===== WHATSAPP BUTTON ===== */
.btn-whatsapp {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  background: #25D366;
  color: white;
  border-radius: 50%;
  text-decoration: none;
  transition: all 0.3s;
  box-shadow: 0 2px 5px rgba(37, 211, 102, 0.3);
}

.btn-whatsapp:hover {
  background: #128C7E;
  transform: scale(1.1);
  box-shadow: 0 4px 10px rgba(37, 211, 102, 0.5);
}

.btn-whatsapp svg {
  width: 24px;
  height: 24px;
}
    /* ===== DATALIST STYLING ===== */
input[list] {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 12 12"><path fill="%23333" d="M6 9L1 4h10z"/></svg>');
  background-repeat: no-repeat;
  background-position: right 10px center;
  padding-right: 30px;
  cursor: pointer;
}

input[list]::-webkit-calendar-picker-indicator {
  opacity: 0;
  cursor: pointer;
}

input[list]:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

input[list]::placeholder {
  color: #999;
  font-size: 14px;
}

input[list]:disabled {
  background-color: #f5f5f5;
  cursor: not-allowed;
  opacity: 0.6;
}
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Phetsarath OT', 'Noto Sans Lao', Arial, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 20px;
    }

    .container {
      max-width: 1400px;
      width: 100%;
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      overflow: hidden;
      display: none;
    }

    .container.active {
      display: block;
    }

    /* ===== LOGIN MODAL ===== */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }

    .modal-overlay.active {
      opacity: 1;
      visibility: visible;
    }

    .modal {
      background: white;
      border-radius: 15px;
      padding: 40px;
      max-width: 500px;
      width: 90%;
      max-height: 90vh;
      overflow-y: auto;
      transform: scale(0.7);
      transition: transform 0.3s ease;
    }

    .modal-overlay.active .modal {
      transform: scale(1);
    }

    .modal h2 {
      text-align: center;
      color: #667eea;
      margin-bottom: 30px;
      font-size: 24px;
    }

    .form-group {
      margin-bottom: 20px;
      position: relative;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      color: #333;
      font-weight: 500;
    }

    .form-group input,
    .form-group select {
      width: 100%;
      padding: 12px 15px;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      font-size: 16px;
      transition: border-color 0.3s;
    }

    .form-group input:focus,
    .form-group select:focus {
      outline: none;
      border-color: #667eea;
    }

    .btn {
      width: 100%;
      padding: 14px;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
    }

    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }

    .btn-primary:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .btn-primary:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .btn-secondary {
      background: #e0e0e0;
      color: #333;
      margin-top: 10px;
    }

    .btn-secondary:hover {
      background: #d0d0d0;
    }

    /* ===== HEADER ===== */
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px 40px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .header h1 {
      font-size: 24px;
    }

    .user-info {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .user-name {
      font-size: 14px;
    }

    .btn-logout {
      padding: 8px 20px;
      background: rgba(255,255,255,0.2);
      border: 1px solid white;
      border-radius: 20px;
      color: white;
      cursor: pointer;
      transition: all 0.3s;
    }

    .btn-logout:hover {
      background: white;
      color: #667eea;
    }

    /* ===== MENU ===== */
    .menu {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      padding: 40px;
    }

    .menu-card {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 40px 30px;
      border-radius: 15px;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .menu-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
    }

    .menu-card .icon {
      font-size: 48px;
      margin-bottom: 15px;
    }

    .menu-card h3 {
      font-size: 20px;
    }

    /* ===== FORM MODAL ===== */
    .form-modal {
      max-width: 900px;
      max-height: 85vh;
    }

   /* ===== FORM SECTIONS ===== */
.form-section {
  border: 2px solid #667eea;
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 20px;
  background: #f8f9ff;
}

/* HOUSEHOLD MAIN SECTION - สีพิเศษสำหรับหัวหน้าครอบครัว */
.form-section.household-main-section {
  background: linear-gradient(135deg, #e8f5e9 0%, #fff9c4 50%, #ffe0b2 100%);
  border: 3px solid #4caf50;
  box-shadow: 0 5px 15px rgba(76, 175, 80, 0.3);
  position: relative;
}

.form-section.household-main-section::before {
  content: "👨‍👩‍👧‍👦 ຂໍ້ມູນຫົວໜ້າຄອບຄົວຫຼັກ";
  position: absolute;
  top: -15px;
  left: 20px;
  background: linear-gradient(135deg, #4caf50 0%, #66bb6a 100%);
  color: white;
  padding: 5px 15px;
  border-radius: 20px;
  font-weight: 600;
  font-size: 14px;
  box-shadow: 0 3px 10px rgba(76, 175, 80, 0.4);
}

.form-section.household-main-section h3 {
  color: #2e7d32;
  margin-top: 10px;
}

/* MEMBER SECTIONS - สีปกติสำหรับสมาชิก */
.form-section.member-section {
  background: linear-gradient(135deg, #f8f9ff 0%, #fff 100%);
  border: 2px solid #e0e0e0;
}

.form-section.member-section h3 {
  color: #667eea;
}


    .form-section h3 {
      color: #667eea;
      margin-bottom: 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .form-row {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin-bottom: 15px;
    }

    .photo-upload {
      text-align: center;
      padding: 20px;
      border: 2px dashed #667eea;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s;
    }

    .photo-upload:hover {
      background: #f0f0ff;
    }

    .photo-preview {
      width: 150px;
      height: 150px;
      margin: 0 auto 10px;
      border-radius: 10px;
      overflow: hidden;
      border: 2px solid #e0e0e0;
      display: flex;
      align-items: center;
      justify-content: center;
      background: #f5f5f5;
    }

    .photo-preview img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .photo-preview .placeholder {
      font-size: 60px;
      color: #ccc;
    }

    .btn-add-member {
      width: 100%;
      padding: 15px;
      background: #4caf50;
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      margin: 20px 0;
    }

    .btn-add-member:hover {
      background: #45a049;
      transform: translateY(-2px);
    }

    .btn-delete-member {
      padding: 5px 15px;
      background: #f44336;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
    }

    .btn-delete-member:hover {
      background: #da190b;
    }

    .form-buttons {
      display: flex;
      gap: 10px;
      margin-top: 20px;
    }

    .form-buttons button {
      flex: 1;
    }

    /* ===== DATA TABLE ===== */
    .data-container {
      padding: 40px;
      display: none;
    }

    .data-container.active {
      display: block;
    }

    .search-bar {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .search-bar input {
      flex: 1;
      min-width: 200px;
      padding: 12px 15px;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      font-size: 16px;
    }

    .search-bar button {
      padding: 12px 30px;
      background: #667eea;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      white-space: nowrap;
    }

    .data-table {
      width: 100%;
      border-collapse: collapse;
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .data-table th {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 15px;
      text-align: left;
      font-weight: 600;
    }

    .data-table td {
      padding: 15px;
      border-bottom: 1px solid #e0e0e0;
    }

    .data-table tr:hover {
      background: #f8f9ff;
    }

    .profile-img {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid #667eea;
    }

    .action-buttons {
      display: flex;
      gap: 5px;
      flex-wrap: wrap;
    }

    .action-buttons button {
      padding: 6px 12px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 13px;
      transition: all 0.2s;
      white-space: nowrap;
    }

    .btn-edit {
      background: #2196F3;
      color: white;
    }

    .btn-edit:hover {
      background: #0b7dda;
    }

    .btn-edit-family {
      background: #FF9800;
      color: white;
    }

    .btn-edit-family:hover {
      background: #e68900;
    }

    .btn-delete {
      background: #f44336;
      color: white;
    }

    .btn-delete:hover {
      background: #da190b;
    }

    .btn-delete-family {
      background: #9C27B0;
      color: white;
    }

    .btn-delete-family:hover {
      background: #7b1fa2;
    }

    .btn-back {
      margin-bottom: 20px;
      padding: 10px 20px;
      background: #607d8b;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }

    .btn-back:hover {
      background: #546e7a;
    }

    /* ===== DELETE REASON MODAL ===== */
    .reason-modal {
      max-width: 400px;
    }

    .reason-options {
      margin: 20px 0;
    }

    .reason-option {
      display: flex;
      align-items: center;
      padding: 12px;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      margin-bottom: 10px;
      cursor: pointer;
      transition: all 0.3s;
    }

    .reason-option:hover {
      border-color: #667eea;
      background: #f8f9ff;
    }

    .reason-option.selected {
      border-color: #667eea;
      background: #f0f0ff;
    }

    .reason-option input[type="radio"] {
      margin-right: 10px;
    }

    /* ===== LOADING ===== */
    .loading {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }

    .loading.active {
      display: flex;
    }

    .spinner {
      width: 50px;
      height: 50px;
      border: 5px solid #f3f3f3;
      border-top: 5px solid #667eea;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* ===== TOAST NOTIFICATION ===== */
    .toast {
      position: fixed;
      top: 20px;
      right: 20px;
      background: white;
      padding: 15px 20px;
      border-radius: 8px;
      box-shadow: 0 5px 20px rgba(0,0,0,0.3);
      z-index: 10000;
      display: none;
      animation: slideIn 0.3s ease;
    }

    .toast.active {
      display: block;
    }

    .toast.success {
      border-left: 4px solid #4caf50;
    }

    .toast.error {
      border-left: 4px solid #f44336;
    }

    @keyframes slideIn {
      from {
        transform: translateX(400px);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    /* ===== IDLE WARNING ===== */
    .idle-warning {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #ff9800;
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      box-shadow: 0 5px 20px rgba(0,0,0,0.3);
      z-index: 10000;
      display: none;
      animation: pulse 1s infinite;
    }

    .idle-warning.active {
      display: block;
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.05); }
    }

    /* ===== DATE INPUTS ===== */
   .date-inputs {
  display: flex;
  gap: 8px;
  align-items: center;
  width: 100%;
}

.date-inputs input {
  padding: 12px 8px;
  text-align: center;
  font-size: 16px;
  border: 2px solid #e0e0e0;
  border-radius: 8px;
  font-weight: 600;
}

.date-inputs input.birthDay {
  width: 80px;
  min-width: 80px;
}

.date-inputs input.birthMonth {
  width: 80px;
  min-width: 80px;
}

.date-inputs input.birthYear {
  width: 120px;
  min-width: 120px;
  flex: 1;
}

.date-inputs span {
  color: #666;
  font-size: 18px;
  font-weight: bold;
}


    /* ✅ ปัญหา 5: สีเขียวกระพริบสำหรับ Auto fields */
    @keyframes greenPulse {
      0%, 100% { 
        background: #c8e6c9 !important;
        box-shadow: 0 0 10px rgba(76, 175, 80, 0.3) !important;
      }
      50% { 
        background: #a5d6a7 !important;
        box-shadow: 0 0 20px rgba(76, 175, 80, 0.6) !important;
      }
    }
    
    .auto-calculate-field {
      animation: greenPulse 1.5s infinite !important;
      background: #c8e6c9 !important;
      color: #2e7d32 !important;
      font-weight: 600 !important;
      border: 2px solid #4caf50 !important;
    }
    
    /* ✅ ปัญหา 6: Marker pulse animation */
    @keyframes markerPulse {
      0%, 100% { 
        transform: scale(1);
        opacity: 1;
      }
      50% { 
        transform: scale(1.2);
        opacity: 0.7;
      }
    }
    
    .location-marker {
      display: inline-block;
      animation: markerPulse 1s infinite;
      font-size: 28px;
      cursor: pointer;
    }

    /* ===== RESPONSIVE ===== */
    @media (max-width: 768px) {
      .header {
        flex-direction: column;
        gap: 15px;
        text-align: center;
      }

      .menu {
        grid-template-columns: 1fr;
        padding: 20px;
      }

      .form-row {
        grid-template-columns: 1fr;
      }

      .data-table {
        font-size: 12px;
      }

      .data-table th,
      .data-table td {
        padding: 8px;
      }

      .action-buttons {
        flex-direction: column;
      }

      .search-bar {
        flex-direction: column;
      }

      .search-bar input,
      .search-bar button {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Spinner -->
  <div class="loading" id="loading">
  <div class="spinner"></div>
  <div class="loading-counter" id="loadingCounter">0</div>
  <div class="loading-message" id="loadingMessage">ກຳລັງໂຫລດຂໍ້ມູນ...</div>
</div>

  <!-- Toast Notification -->
  <div class="toast" id="toast"></div>

  <!-- Idle Warning -->
  <div class="idle-warning" id="idleWarning">
    ⚠️ ທ່ານຈະຖືກອອກຈາກລະບົບໃນອີກ <span id="idleTimer">5</span> ນາທີ
  </div>

  <!-- Login Modal -->
  <div class="modal-overlay active" id="loginModal">
    <div class="modal">
      <h2>🔐 ເຂົ້າສູ່ລະບົບ</h2>
      <form id="loginForm">
        <div class="form-group">
          <label>ລະຫັດ ອສບ *</label>
          <input type="text" id="loginCode" required>
        </div>
       <div class="form-group">
  <label>ຊື່ ແລະ ນາມສະກຸນ *</label>
  <input type="text" id="loginName" list="loginNameList" required autocomplete="off" placeholder="ພິມຊື່ຫຼືເລືອກຈາກລາຍການ">
  <datalist id="loginNameList"></datalist>
</div>
<div class="form-group">
  <label>ແຂວງ *</label>
  <input type="text" id="loginProvince" list="loginProvinceList" required autocomplete="off" placeholder="ພິມແຂວງຫຼືເລືອກຈາກລາຍການ">
  <datalist id="loginProvinceList"></datalist>
</div>
<div class="form-group">
  <label>ເມືອງ *</label>
  <input type="text" id="loginDistrict" list="loginDistrictList" required autocomplete="off" placeholder="ເລືອກແຂວງກ່ອນ" disabled>
  <datalist id="loginDistrictList"></datalist>
</div>
<div class="form-group">
  <label>ບ້ານ *</label>
  <input type="text" id="loginVillage" list="loginVillageList" required autocomplete="off" placeholder="ເລືອກເມືອງກ່ອນ" disabled>
  <datalist id="loginVillageList"></datalist>
</div>
        <button type="submit" class="btn btn-primary">ເຂົ້າສູ່ລະບົບ</button>

     
      </form>
    </div>
  </div>

  <!-- Main Container -->
  <div class="container" id="mainContainer">
    <!-- Header -->
    <div class="header">
      <h1>📊 ລະບົບຂໍ້ມູນປະຊາກອນ</h1>
      <div class="user-info">
        <div class="user-name">
          <div id="userName">👤 ...</div>
          <div style="font-size: 12px; opacity: 0.9;" id="userLocation">📍 ...</div>
        </div>
        <button class="btn-logout" onclick="logout()">ອອກຈາກລະບົບ</button>
      </div>
    </div>

    <!-- Menu -->
    <div class="menu" id="menu">
      <div class="menu-card" onclick="openPopulation()">
        <div class="icon">👥</div>
        <h3>ປະຊາກອນຄົງທີ່</h3>
      </div>
     <div class="menu-card" onclick="openMobilePopulation()">
  <div class="icon">🚶</div>
  <h3>ປະຊາກອນເຄື່ອນທີ່</h3>
</div>
      <div class="menu-card" onclick="showToast('ກຳລັງພັດທະນາ...', 'error')">
        <div class="icon">🏞️</div>
        <h3>ຂໍ້ມູນທີ່ດິນ</h3>
      </div>
      <div class="menu-card" onclick="showToast('ກຳລັງພັດທະນາ...', 'error')">
        <div class="icon">🚗</div>
        <h3>ຂໍ້ມູນຍານພາຫະນະ</h3>
      </div>
    </div>

    <!-- Data Container -->
    <div class="data-container" id="dataContainer">
      <button class="btn-back" onclick="backToMenu()">⬅️ ກັບຄືນເມນູ</button>
      
    <div class="search-bar">
  <input type="text" id="searchInput" placeholder="🔍 ຄົ້ນຫາຊື່, ເບີໂທ, ບ້ານ..." onkeypress="if(event.key==='Enter') searchData()">
  <button onclick="searchData()">🔍 ຄົ້ນຫາ</button>
  <button onclick="clearSearch()" style="background: #607d8b;">❌ ລ້າງ</button>
  <button class="btn-add-member" style="width: auto; margin: 0;" onclick="openHouseholdForm()">➕ ເພີ່ມຄອບຄົວໃໝ່</button>
</div>

      <div style="overflow-x: auto;">
      <table class="data-table" id="dataTable">
          <thead>
            <tr>
              <th>ຮູບ</th>
              <th>ຊື່-ນາມສະກຸນ</th>
              <th>ເພດ</th>
              <th>ສາຍພົວພັນ</th>
              <th>ໜ່ວຍ</th>
              <th>ຕິດຕໍ່</th>
              <th>ການຈັດການ</th>
            </tr>
          </thead>
          <tbody id="dataTableBody">
            <tr>
              <td colspan="7" style="text-align: center; padding: 40px;">
                <div style="font-size: 48px; margin-bottom: 10px;">📋</div>
                <div>ກຳລັງໂຫລດຂໍ້ມູນ...</div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div class="pagination" id="pagination">
        <button onclick="changePage('first')" id="btnFirst">⏮️ ໜ້າທຳອິດ</button>
        <button onclick="changePage('prev')" id="btnPrev">◀️ ກ່ອນໜ້າ</button>
        <span class="page-info">
          ໜ້າ <span id="currentPage">1</span> / <span id="totalPages">1</span>
        </span>
        <button onclick="changePage('next')" id="btnNext">▶️ ຕໍ່ໄປ</button>
        <button onclick="changePage('last')" id="btnLast">ໜ້າສຸດທ້າຍ ⏭️</button>
      </div>
      
    </div>
    <!-- Mobile Population Container -->
<div class="data-container" id="mobileContainer">
  <button class="btn-back" onclick="backToMenu()">⬅️ ກັບຄືນເມນູ</button>
  
  <div class="search-bar">
    <input type="text" id="searchMobileInput" placeholder="🔍 ຊື່, ເບີໂທ, ເລກຫ້ອງ..." onkeypress="if(event.key==='Enter') searchMobileData()">
    <button onclick="searchMobileData()">🔍 ຄົ້ນຫາ</button>
    <button onclick="clearMobileSearch()" style="background: #607d8b;">❌ ລ້າງ</button>
    <button class="btn-add-member" style="width: auto; margin: 0;" onclick="openMobileTypeModal()">➕ ເພີ່ມປະຊາກອນເຄື່ອນທີ່</button>
  </div>

  <div style="overflow-x: auto;">
    <table class="data-table" id="mobileTable">
      <thead>
        <tr>
          <th>ຮູບ</th>
          <th>ຊື່-ນາມສະກຸນ</th>
          <th>ເພດ</th>
          <th>ເລກຫ້ອງ</th>
          <th>ປະເພດ</th>
          <th>ຕິດຕໍ່</th>
          <th>ການຈັດການ</th>
        </tr>
      </thead>
      <tbody id="mobileTableBody">
        <tr>
          <td colspan="7" style="text-align: center; padding: 40px;">
            <div style="font-size: 48px; margin-bottom: 10px;">📋</div>
            <div>ກຳລັງໂຫລດຂໍ້ມູນ...</div>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div class="pagination" id="mobilePagination">
    <button onclick="changeMobilePage('first')" id="btnMobileFirst">⏮️ ໜ້າທຳອິດ</button>
    <button onclick="changeMobilePage('prev')" id="btnMobilePrev">◀️ ກ່ອນໜ້າ</button>
    <span class="page-info">
      ໜ້າ <span id="currentMobilePage">1</span> / <span id="totalMobilePages">1</span>
    </span>
    <button onclick="changeMobilePage('next')" id="btnMobileNext">▶️ ຕໍ່ໄປ</button>
    <button onclick="changeMobilePage('last')" id="btnMobileLast">ໜ້າສຸດທ້າຍ ⏭️</button>
  </div>
</div>

  <!-- Household Form Modal -->
  <div class="modal-overlay" id="householdFormModal">
    <div class="modal form-modal">
      <h2 id="formTitle">➕ ເພີ່ມຄອບຄົວໃໝ່</h2>
      <form id="householdForm">
        <!-- Household Section -->
       <div class="form-section household-main-section">
  <h3>👨‍👩‍👧‍👦 ຂໍ້ມູນຫົວໜ້າຄອບຄົວ</h3>
  <input type="hidden" id="householdCode">
  
  <div class="form-group">
    <div class="photo-upload" onclick="document.getElementById('householdPhoto').click()">
      <div class="photo-preview" id="householdPhotoPreview">
        <div class="placeholder">❓</div>
      </div>
      <p>📷 ອັບໂຫລດ/ຖ່າຍຮູບ</p>
      <p style="font-size: 12px; color: #666; margin-top: 5px;">💡 ຮູບນີ້ຈະຖືກກັອບປີໄປໃສ່ສະມາຊິກທີ່ເປັນ "ຫົວໜ້າຄອບຄົວ" ອັດຕະໂນມັດ</p>
      <input type="file" id="householdPhoto" accept="image/*" style="display: none" onchange="previewPhoto(this, 'householdPhotoPreview')">
    </div>
  </div>

  <!-- Row 1: Name, Phone, House Number -->
  <div class="form-row">
    <div class="form-group">
      <label>ຊື່ ແລະ ນາມສະກຸນ *</label>
      <input type="text" id="householdName" required>
    </div>
    <div class="form-group">
      <label>ເບີໂທລະສັບ</label>
      <input type="tel" id="householdPhone" placeholder="20XXXXXXXX">
    </div>
    <div class="form-group">
      <label>ເຮືອນເລກທີ</label>
      <input type="text" id="houseNumber">
    </div>
  </div>

  <!-- Row 2: Roof Count, Household Count, Family Count -->
  <div class="form-row">
    <div class="form-group">
      <label>ຈໍານວນຫຼັງຄາເຮືອນ *</label>
      <input type="number" id="roofCount" min="0" required>
    </div>
    <div class="form-group">
      <label>ຈຳນວນຄົວເຮືອນ *</label>
      <input type="number" id="householdCount" min="0" required>
    </div>
    <div class="form-group">
      <label>ຈຳນວນຄອບຄົວ *</label>
      <input type="number" id="familyCount" min="0" required>
    </div>
  </div>

  <!-- Row 3: Village, District, Province -->
  <div class="form-row">
    <div class="form-group">
      <label>ຊື່ບ້ານ</label>
      <input type="text" id="village" readonly>
    </div>
    <div class="form-group">
      <label>ເມືອງ</label>
      <input type="text" id="district" readonly>
    </div>
    <div class="form-group">
      <label>ແຂວງ</label>
      <input type="text" id="province" readonly>
    </div>
  </div>

  <!-- Row 4: Rental Location, Unit, House Position -->
  <div class="form-row">
    <div class="form-group">
      <label>ສະຖານທີ່ພັກເຊົ່າ *</label>
      <input type="text" id="rentalLocation" list="rentalLocationList" required>
      <datalist id="rentalLocationList"></datalist>
    </div>
    <div class="form-group">
      <label>ໜ່ວຍ *</label>
      <input type="text" id="unit" required>
    </div>
    <div class="form-group">
      <label>ຕໍາແໜ່ງເຮືອນ (Latitude, Longitude)</label>
      <div style="display: flex; gap: 5px;">
        <input type="text" id="housePosition" placeholder="例: 17.9757, 102.6331" style="flex: 1;">
        <button type="button" onclick="openLocationPicker()" class="btn-location" title="ເລືອກຈາກແຜນທີ່">
          📍
        </button>
      </div>
    </div>
  </div>

  <!-- Row 5: Registry Management -->
  <div class="form-row">
    <div class="form-group">
      <label>ຈັດການສໍາມະໂນຄົວ *</label>
      <button type="button" class="btn btn-primary" onclick="openRegistryModal()" style="width: 100%; padding: 12px;">
        ⚙️ ຈັດການສໍາມະໂນຄົວ
      </button>
    </div>
    <div class="form-group">
      <label>ຈໍານວນປື້ມສໍາມະໂນຄົວ 📚 (Auto)</label>
      <input type="number" id="registryBookCount" min="0" class="auto-calculate-field" readonly style="background: #e8f5e9; font-weight: 600; color: #2e7d32;">
    </div>
    <div class="form-group">
      <label>ເລກທີສໍາມະໂນຄົວ 🔢 (Auto)</label>
      <textarea id="registryNumber" rows="2" class="auto-calculate-field" readonly style="background: #e3f2fd; font-weight: 600; color: #1565c0; resize: vertical; width: 100%; padding: 10px; border: 2px solid #90caf9; border-radius: 5px;"></textarea>
    </div>
  </div>

  <!-- Row 6: Family Member Count, Page Count -->
  <div class="form-row">
    <div class="form-group">
      <label>ຈໍານວນຄົນໃນຄອບຄົວ 👥 (Auto)</label>
      <input type="number" id="familyMemberCount" min="0" class="auto-calculate-field" readonly style="background: #e8f5e9; font-weight: 600; color: #2e7d32;">
    </div>
    <div class="form-group">
      <label>ຈໍານວນມີໜ້າໃນສໍາມະໂນຄົວ 📋 (Auto)</label>
      <input type="number" id="pageCount" min="0" class="auto-calculate-field" readonly style="background: #e3f2fd; font-weight: 600; color: #1565c0;">
    </div>
  </div>

  <!-- Row 7: Village Participation -->
  <div class="form-row">
    <div class="form-group" style="grid-column: 1 / -1;">
      <label>ການມີສ່ວນຮ່ວມກັບການຈັດຕັ້ງບ້ານ *</label>
      <button type="button" class="btn btn-primary" onclick="openParticipationModal()" style="width: 100%; padding: 12px;">
        🤝 ເລືອກລະດັບການມີສ່ວນຮ່ວມ
      </button>
      <input type="hidden" id="villageParticipation" required>
      <div id="participationDisplay" style="margin-top: 10px; padding: 10px; background: #f5f5f5; border-radius: 5px; display: none;">
        <span id="participationText"></span>
      </div>
    </div>
  </div>

  <!-- Hidden field for old monthly income (removed from UI) -->
  <input type="hidden" id="monthlyIncome" value="0">
</div>

        <!-- Members Container -->
        <div id="membersContainer"></div>

        <button type="button" class="btn-add-member" onclick="addMemberForm()">➕ ເພີ່ມສະມາຊິກຄອບຄົວ</button>

        <div class="form-buttons">
          <button type="submit" class="btn btn-primary">💾 ບັນທຶກທັງໝົດ</button>
          <button type="button" class="btn btn-secondary" onclick="closeHouseholdForm()">❌ ຍົກເລີກ</button>
        </div>
      </form>
    </div>
  </div>

 <!-- Delete Reason Modal -->
  <div class="modal-overlay" id="deleteReasonModal">
    <div class="modal reason-modal">
      <h2 id="deleteModalTitle">⚠️ ກະລຸນາລະບຸເຫດຜົນການລົບ</h2>
      <div class="reason-options" id="deleteReasonOptions">
        <!-- Options will be dynamically added here -->
      </div>
      <div class="form-buttons">
        <button type="button" class="btn btn-primary" id="confirmDeleteBtn" onclick="confirmDelete()" disabled>✅ ຢືນຢັນລົບ</button>
        <button type="button" class="btn btn-secondary" onclick="closeDeleteModal()">❌ ຍົກເລີກ</button>
      </div>
    </div>
  </div>
  <!-- Mobile Type Selection Modal -->
<div class="modal-overlay" id="mobileTypeModal">
  <div class="modal" style="max-width: 500px;">
    <h2>🚶 ເລືອກປະເພດປະຊາກອນເຄື່ອນທີ່</h2>
    
    <div style="margin: 30px 0;">
      <div class="mobile-type-option" onclick="selectMobileType('ພັກເຊົາຄົງທີ່')" data-type="ພັກເຊົາຄົງທີ່">
        <div style="display: flex; align-items: center; padding: 20px; border: 3px solid #e0e0e0; border-radius: 15px; cursor: pointer; transition: all 0.3s; background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);">
          <div style="font-size: 48px; margin-right: 20px;">🏠</div>
          <div style="flex: 1;">
            <div style="font-size: 20px; font-weight: 600; color: #1976d2; margin-bottom: 5px;">ພັກເຊົາຄົງທີ່</div>
            <div style="font-size: 14px; color: #555;">ເລືອກຈາກຫົວໜ້າຄອບຄົວທີ່ມີຢູ່ແລ້ວ</div>
          </div>
        </div>
      </div>
      
      <div class="mobile-type-option" onclick="selectMobileType('ພັກເຊົາເຄື່ອນທີ່')" data-type="ພັກເຊົາເຄື່ອນທີ່" style="margin-top: 15px;">
        <div style="display: flex; align-items: center; padding: 20px; border: 3px solid #e0e0e0; border-radius: 15px; cursor: pointer; transition: all 0.3s; background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);">
          <div style="font-size: 48px; margin-right: 20px;">🚗</div>
          <div style="flex: 1;">
            <div style="font-size: 20px; font-weight: 600; color: #f57c00; margin-bottom: 5px;">ພັກເຊົາເຄື່ອນທີ່</div>
            <div style="font-size: 14px; color: #555;">ສ້າງຂໍ້ມູນໃໝ່ທັງໝົດ</div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="form-buttons">
      <button type="button" class="btn btn-secondary" onclick="closeMobileTypeModal()">❌ ຍົກເລີກ</button>
    </div>
  </div>
</div>

<!-- Household Selector Modal (for ພັກເຊົາຄົງທີ່) -->
<div class="modal-overlay" id="householdSelectorModal">
  <div class="modal" style="max-width: 600px;">
    <h2>🏠 ເລືອກຫົວໜ້າຄອບຄົວ</h2>
    
    <div class="form-group">
      <label>ຄົ້ນຫາຊື່ຫົວໜ້າຄອບຄົວ</label>
      <input type="text" id="householdSearchInput" list="householdNameList" placeholder="ພິມຊື່ເພື່ອຄົ້ນຫາ..." oninput="filterHouseholdList()">
      <datalist id="householdNameList"></datalist>
    </div>
    
    <div id="householdListContainer" style="max-height: 400px; overflow-y: auto; margin: 20px 0; border: 2px solid #e0e0e0; border-radius: 10px; padding: 10px;">
      <!-- Household cards will be inserted here -->
    </div>
    
    <div class="form-buttons">
      <button type="button" class="btn btn-secondary" onclick="closeHouseholdSelectorModal()">❌ ຍົກເລີກ</button>
    </div>
  </div>
</div>

<!-- Mobile Form Modal -->
<div class="modal-overlay" id="mobileFormModal">
  <div class="modal form-modal">
    <h2 id="mobileFormTitle">➕ ເພີ່ມປະຊາກອນເຄື່ອນທີ່</h2>
    <form id="mobileForm">
      <input type="hidden" id="mobileCode">
      <input type="hidden" id="mobileType">
      
      <!-- Main Section -->
      <div class="form-section" style="background: linear-gradient(135deg, #e8f5e9 0%, #fff9c4 50%, #ffe0b2 100%); border: 3px solid #4caf50;">
        <h3>📋 ຂໍ້ມູນຫຼັກ</h3>
        
        <!-- Row 1: Owner Name, Household Code, Room Number -->
        <div class="form-row">
          <div class="form-group">
            <label>ຊື່ເຈົ້າຂອງຫ້ອງແຖວ *</label>
            <input type="text" id="mobileOwnerName" list="ownerNameList" required>
            <datalist id="ownerNameList"></datalist>
          </div>
          <div class="form-group">
            <label>ລະຫັດຫ້ອງແຖວ</label>
            <input type="text" id="mobileHouseholdCode" readonly style="background: #e8f5e9;">
          </div>
          <div class="form-group">
            <label>ຫ້ອງເບີທີ *</label>
            <input type="number" id="mobileRoomNumber" required>
          </div>
        </div>
        
        <!-- Row 2: Province, District, Village -->
        <div class="form-row">
          <div class="form-group">
            <label>ແຂວງປະຈຸບັນ</label>
            <input type="text" id="mobileProvince" readonly style="background: #e8f5e9;">
          </div>
          <div class="form-group">
            <label>ເມືອງປະຈຸບັນ</label>
            <input type="text" id="mobileDistrict" readonly style="background: #e8f5e9;">
          </div>
          <div class="form-group">
            <label>ບ້ານຢູ່ປະຈຸບັນ</label>
            <input type="text" id="mobileVillage" readonly style="background: #e8f5e9;">
          </div>
        </div>
        
        <!-- Row 3: Unit, Position -->
        <div class="form-row">
          <div class="form-group">
            <label>ໜ່ວຍ *</label>
            <input type="text" id="mobileUnit" required>
          </div>
          <div class="form-group">
            <label>ຕໍາແໜ່ງບ່ອນພັກ (Latitude, Longitude)</label>
            <div style="display: flex; gap: 5px;">
              <input type="text" id="mobilePosition" placeholder="例: 17.9757, 102.6331" style="flex: 1;" readonly>
              <button type="button" onclick="openMobileLocationPicker()" class="btn-location" title="ເລືອກຈາກແຜນທີ່">📍</button>
            </div>
          </div>
          <div class="form-group">
            <label>ຈໍານວນຫ້ອງມີຄົນຢູ່ 👥 (Auto)</label>
            <input type="number" id="mobileRoomCount" readonly class="auto-calculate-field" style="background: #e8f5e9;">
          </div>
        </div>
      </div>
      
      <!-- Members Container -->
      <div id="mobileMembersContainer"></div>
      
      <button type="button" class="btn-add-member" onclick="addMobileMemberForm()">➕ ເພີ່ມສະມາຊິກ</button>
      
      <div class="form-buttons">
        <button type="submit" class="btn btn-primary">💾 ບັນທຶກທັງໝົດ</button>
        <button type="button" class="btn btn-secondary" onclick="closeMobileForm()">❌ ຍົກເລີກ</button>
      </div>
    </form>
  </div>
</div>
  
<!-- Village Participation Modal -->
<div class="modal-overlay" id="participationModal">
  <div class="modal" style="max-width: 500px;">
    <h2>🤝 ເລືອກລະດັບການມີສ່ວນຮ່ວມກັບການຈັດຕັ້ງບ້ານ</h2>
    
    <div class="participation-options" style="margin: 20px 0;">
      <div class="participation-option" onclick="selectParticipation('excellent')" data-value="excellent">
        <div style="display: flex; align-items: center; padding: 15px; border: 2px solid #e0e0e0; border-radius: 10px; margin-bottom: 10px; cursor: pointer; transition: all 0.3s;">
          <input type="radio" name="participation" value="excellent" style="margin-right: 15px;">
          <div>
            <div style="font-weight: 600; color: #2e7d32;">⭐⭐⭐⭐⭐ ມີສ່ວນຮ່ວມດີເລີດ</div>
            <div style="font-size: 14px; color: #666; margin-top: 5px;">ຮ່ວມກິດຈະກໍາທຸກຄັ້ງ, ເປັນຜູ້ນໍາໃນການຈັດຕັ້ງ</div>
          </div>
        </div>
      </div>
      
      <div class="participation-option" onclick="selectParticipation('verygood')" data-value="verygood">
        <div style="display: flex; align-items: center; padding: 15px; border: 2px solid #e0e0e0; border-radius: 10px; margin-bottom: 10px; cursor: pointer; transition: all 0.3s;">
          <input type="radio" name="participation" value="verygood" style="margin-right: 15px;">
          <div>
            <div style="font-weight: 600; color: #388e3c;">⭐⭐⭐⭐ ມີສ່ວນຮ່ວມດີຫຼາຍ</div>
            <div style="font-size: 14px; color: #666; margin-top: 5px;">ຮ່ວມກິດຈະກໍາເປັນສ່ວນໃຫຍ່, ໃຫ້ການສະໜັບສະໜູນດີ</div>
          </div>
        </div>
      </div>
      
      <div class="participation-option" onclick="selectParticipation('moderate')" data-value="moderate">
        <div style="display: flex; align-items: center; padding: 15px; border: 2px solid #e0e0e0; border-radius: 10px; margin-bottom: 10px; cursor: pointer; transition: all 0.3s;">
          <input type="radio" name="participation" value="moderate" style="margin-right: 15px;">
          <div>
            <div style="font-weight: 600; color: #f57c00;">⭐⭐⭐ ມີສ່ວນຮ່ວມປານກາງ</div>
            <div style="font-size: 14px; color: #666; margin-top: 5px;">ຮ່ວມກິດຈະກໍາບາງຄັ້ງ, ໃຫ້ການຮ່ວມມືພໍສົມຄວນ</div>
          </div>
        </div>
      </div>
      
      <div class="participation-option" onclick="selectParticipation('lacking')" data-value="lacking">
        <div style="display: flex; align-items: center; padding: 15px; border: 2px solid #e0e0e0; border-radius: 10px; margin-bottom: 10px; cursor: pointer; transition: all 0.3s;">
          <input type="radio" name="participation" value="lacking" style="margin-right: 15px;">
          <div>
            <div style="font-weight: 600; color: #d32f2f;">⭐ ຂາດການມີສ່ວນຮ່ວມ</div>
            <div style="font-size: 14px; color: #666; margin-top: 5px;">ບໍ່ຄ່ອຍຮ່ວມກິດຈະກໍາ, ຕ້ອງການການຊຸກຍູ້</div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="form-buttons">
      <button type="button" class="btn btn-primary" onclick="confirmParticipation()" disabled id="confirmParticipationBtn">✅ ຢືນຢັນ</button>
      <button type="button" class="btn btn-secondary" onclick="closeParticipationModal()">❌ ຍົກເລີກ</button>
    </div>
  </div>
</div>
  <!-- Registry Management Modal -->
  <div class="modal-overlay" id="registryModal">
  <div class="modal registry-modal">
    <h2>⚙️ ຈັດການສໍາມະໂນຄົວ</h2>
    
    <!-- Option 1: Old Registry -->
    <div class="registry-option" id="oldRegistryOption">
      <div class="registry-option-header" onclick="toggleRegistryOption('old')">
        <input type="checkbox" id="chkOldRegistry" onchange="toggleRegistryOption('old')">
        <label for="chkOldRegistry">📕 ສໍາມະໂນຄົວເກົ່າ</label>
      </div>
      <div class="registry-details" id="oldRegistryDetails">
        <div class="registry-count-input">
          <label>ຈໍານວນ:</label>
          <input type="number" id="oldRegistryCount" min="0" value="0" oninput="updateOldRegistryNumbers()">
          <span>ປື້ມ</span>
        </div>
        <div class="registry-numbers" id="oldRegistryNumbers"></div>
      </div>
    </div>
    
    <!-- Option 2: New Registry -->
    <div class="registry-option" id="newRegistryOption">
      <div class="registry-option-header" onclick="toggleRegistryOption('new')">
        <input type="checkbox" id="chkNewRegistry" onchange="toggleRegistryOption('new')">
        <label for="chkNewRegistry">📗 ສໍາມະໂນຄົວໃໝ່</label>
      </div>
      <div class="registry-details" id="newRegistryDetails">
        <div class="registry-count-input">
          <label>ຈໍານວນ:</label>
          <input type="number" id="newRegistryCount" min="0" value="0" oninput="updateNewRegistryNumbers()">
          <span>ປື້ມ</span>
        </div>
        <div class="registry-numbers" id="newRegistryNumbers"></div>
      </div>
    </div>
    
    <!-- Option 3: No Registry -->
    <div class="registry-option" id="noRegistryOption">
      <div class="registry-option-header" onclick="toggleRegistryOption('none')">
        <input type="checkbox" id="chkNoRegistry" onchange="toggleRegistryOption('none')">
        <label for="chkNoRegistry">❌ ບໍ່ມີສໍາມະໂນຄົວ</label>
      </div>
    </div>
    
    <!-- Summary -->
    <div class="registry-summary">
      <h4>📊 ສະຫຼຸບ</h4>
      <div class="registry-summary-item">
        <span>ສໍາມະໂນຄົວເກົ່າ:</span>
        <span id="summaryOldCount">0 ປື້ມ</span>
      </div>
      <div class="registry-summary-item">
        <span>ສໍາມະໂນຄົວໃໝ່:</span>
        <span id="summaryNewCount">0 ປື້ມ</span>
      </div>
      <div class="registry-summary-item">
        <span>ລວມທັງໝົດ:</span>
        <span id="summaryTotalCount">0 ປື້ມ</span>
      </div>
    </div>
    
    <!-- Buttons -->
    <div class="form-buttons">
      <button type="button" class="btn btn-primary" onclick="confirmRegistry()">✅ ຢືນຢັນ</button>
      <button type="button" class="btn btn-secondary" onclick="closeRegistryModal()">❌ ຍົກເລີກ</button>
    </div>
  </div>
</div>
  <!-- Image Crop Modal -->
  <div class="crop-modal" id="cropModal">
    <div class="crop-modal-content">
      <h2>✂️ ຕັດ ແລະ ປັບແຕ່ງຮູບພາບ</h2>
      
      <!-- Aspect Ratio Selector -->
      <div class="aspect-ratio-selector">
        <button class="aspect-btn active" data-ratio="1" onclick="setAspectRatio(1)">⬛ 1:1</button>
        <button class="aspect-btn" data-ratio="0.75" onclick="setAspectRatio(0.75)">📱 3:4</button>
        <button class="aspect-btn" data-ratio="1.33" onclick="setAspectRatio(1.33)">🖼️ 4:3</button>
        <button class="aspect-btn" data-ratio="NaN" onclick="setAspectRatio(NaN)">🆓 Free</button>
      </div>
      
      <!-- Crop Container -->
      <div class="crop-container">
        <img id="cropImage" src="" alt="Crop">
      </div>
      
      <!-- Crop Tools -->
      <div class="crop-tools">
        <button class="crop-tool-btn" onclick="rotateCropImage(-90)" title="ໝຸນຊ້າຍ 90°">
          ↺ ໝຸນຊ້າຍ
        </button>
        <button class="crop-tool-btn" onclick="rotateCropImage(90)" title="ໝຸນຂວາ 90°">
          ↻ ໝຸນຂວາ
        </button>
        <button class="crop-tool-btn" onclick="flipCropImage('horizontal')" title="ພິດລວງນອນ">
          ⇄ ພິດນອນ
        </button>
        <button class="crop-tool-btn" onclick="flipCropImage('vertical')" title="ພິດລວງຕັ້ງ">
          ⇅ ພິດຕັ້ງ
        </button>
        <button class="crop-tool-btn" onclick="zoomCropImage(0.1)" title="ຂະຫຍາຍ">
          🔍+ ຂະຫຍາຍ
        </button>
        <button class="crop-tool-btn" onclick="zoomCropImage(-0.1)" title="ຫຍໍ້">
          🔍- ຫຍໍ້
        </button>
        <button class="crop-tool-btn" onclick="resetCrop()" title="ຣີເຊັດ">
          🔄 ຣີເຊັດ
        </button>
      </div>
      
      <!-- Action Buttons -->
      <div class="crop-buttons">
        <button type="button" class="btn btn-primary" onclick="confirmCrop()">✅ ຢືນຢັນ</button>
        <button type="button" class="btn btn-secondary" onclick="closeCropModal()">❌ ຍົກເລີກ</button>
      </div>
    </div>
  </div>
 <!-- Location Picker Modal -->
<div class="location-modal" id="locationModal">
  <div class="location-modal-content">
    <h2>📍 ເລືອກຕໍາແໜ່ງເຮືອນ</h2>
    <div class="location-info">
      <div><strong>📌 ຕໍາແໜ່ງທີ່ເລືອກ:</strong></div>
      <div id="selectedLocation">ກະລຸນາກົດເທິງແຜນທີ່ເພື່ອເລືອກຕໍາແໜ່ງ</div>
    </div>
    <div style="position: relative;">
      <div id="map"></div>
      <div class="map-layer-switcher">
  <button class="map-layer-btn" id="btnStreetMap" onclick="switchMapLayer('street')">
    🗺️ ແຜນທີ່
  </button>
  <button class="map-layer-btn active" id="btnSatellite" onclick="switchMapLayer('satellite')">
    🛰️ ດາວທຽມ
  </button>
  <button class="map-layer-btn" id="btnMyLocation" onclick="goToMyLocation()">
    📍 ຕຳແໜ່ງຂອງຂ້ອຍ
  </button>
</div>
    </div>
    <div class="location-buttons">
      <button type="button" class="btn btn-primary" onclick="confirmLocation()">✅ ຢືນຢັນຕໍາແໜ່ງ</button>
      <button type="button" class="btn btn-secondary" onclick="closeLocationPicker()">❌ ຍົກເລີກ</button>
    </div>
  </div>
</div>
  <!-- Image Preview Modal -->
  <div class="image-preview-modal" id="imagePreviewModal" onclick="closeImagePreview()">
    <img src="" alt="Preview" id="imagePreviewImg">
  </div>

  <!-- Datalists for options -->
  <datalist id="genderList"></datalist>
  <datalist id="occupationList"></datalist>
  <datalist id="insuranceList"></datalist>
  <datalist id="educationList"></datalist>
  <datalist id="maritalStatusList"></datalist>
  <datalist id="diseaseList"></datalist>
  <datalist id="ethnicityList"></datalist>
  <datalist id="relationshipList"></datalist>
  <datalist id="religionList"></datalist>
  <datalist id="bodyCompleteList"></datalist>
  <datalist id="actualResidentList"></datalist>
  <datalist id="inRegistryList"></datalist>

  <script>
    // ===================================
    // GLOBAL VARIABLES
    // ===================================
    let currentUser = null;
    let loginData = null;
    let optionsData = null;
    let householdsData = [];
    let mobilesData = [];
let currentMobileType = null; // 'ພັກເຊົາຄົງທີ່' or 'ພັກເຊົາເຄື່ອນທີ່'
let mobileMemberCounter = 0;
let currentMobilePage = 1;
const mobileRowsPerPage = 30;
let totalMobileRows = 0;
let selectedHouseholdForMobile = null;
    let idleTimer = null;
    let idleWarningTimer = null;
    let memberCounter = 0;
    let deleteTarget = null;
    let selectedReason = null;
    let villageSheetId = null; // เพิ่มตัวแปรเก็บ Sheet ID ของบ้าน
    // Image Crop variables
    let cropper = null;
    let currentCropTarget = null;
    let currentCropPreviewId = null;
    // Registry management
    let registryData = {
      old: { enabled: false, count: 0, numbers: [] },
      new: { enabled: false, count: 0, numbers: [] },
      none: false
    };
      // เพิ่มบรรทัดเหล่านี้
    let currentPage = 1;
    const rowsPerPage = 30;
    let totalRows = 0;

    // IndexedDB
    let db = null;
    const DB_NAME = 'PopulationDB';
    const DB_VERSION = 1;

    // ===================================
    // INITIALIZE
    // ===================================
 window.onload = function() {
  console.log('=== Initializing App ===');
  
  try {
    // Initialize IndexedDB
    initIndexedDB();
    console.log('✅ IndexedDB initialized');
  } catch (e) {
    console.error('❌ IndexedDB error:', e);
  }
  
  try {
    // Setup idle timer
    resetIdleTimer();
    
    // ✅ ใช้ passive listeners เพื่อประสิทธิภาพ
    document.addEventListener('click', resetIdleTimer, { passive: true });
    document.addEventListener('keypress', resetIdleTimer, { passive: true });
    
    // ✅ Throttle mousemove (ไม่เรียกทุกครั้ง)
    let mouseMoveTimeout;
    document.addEventListener('mousemove', function() {
      if (mouseMoveTimeout) return;
      mouseMoveTimeout = setTimeout(function() {
        resetIdleTimer();
        mouseMoveTimeout = null;
      }, 1000); // เรียกทุก 1 วินาที
    }, { passive: true });
    
    console.log('✅ Idle timer setup');
  } catch (e) {
    console.error('❌ Idle timer error:', e);
  }
};

    // ===================================
    // INDEXEDDB SETUP
    // ===================================
    function initIndexedDB() {
      const request = indexedDB.open(DB_NAME, DB_VERSION);
      
      request.onerror = function() {
        console.error('IndexedDB error:', request.error);
        showToast('ເກີດຂໍ້ຜິດພາດໃນການເປີດຖານຂໍ້ມູນ', 'error');
      };
      
      request.onsuccess = function() {
        db = request.result;
        loadInitialData();
      };
      
      request.onupgradeneeded = function(e) {
        db = e.target.result;
        
        if (!db.objectStoreNames.contains('loginData')) {
          db.createObjectStore('loginData', { keyPath: 'id' });
        }
        if (!db.objectStoreNames.contains('optionsData')) {
          db.createObjectStore('optionsData', { keyPath: 'id' });
        }
        if (!db.objectStoreNames.contains('households')) {
          db.createObjectStore('households', { keyPath: 'householdCode' });
        }
        if (!db.objectStoreNames.contains('mobiles')) {
  db.createObjectStore('mobiles', { keyPath: 'mobileCode' });
}
        if (!db.objectStoreNames.contains('syncQueue')) {
          const syncStore = db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true });
          syncStore.createIndex('timestamp', 'timestamp', { unique: false });
        }
      };
    }

    // ===================================
// LOAD INITIAL DATA
// ===================================
function loadInitialData() {
  console.log('=== Loading Initial Data ===');
  
  // ✅ โหลด Login Data ก่อน (สำคัญที่สุด)
  fetchLoginData();
  
  // ✅ โหลด Options (ไม่รอ login data)
  setTimeout(function() {
    loadFromIndexedDB('optionsData', 'optionsData').then(function(data) {
      if (data) {
        console.log('✅ Options loaded from IndexedDB');
        optionsData = data;
      } else {
        console.log('📥 Fetching options from server...');
        fetchOptionsData();
      }
    });
  }, 500);
  
  // ✅ ไม่โหลด Households ตอนนี้ (รอจน login แล้ว)
  console.log('⏸️ Households will load after login');
}
function fetchLoginData() {
  console.log('=== Fetching login data ===');
  const startTime = new Date().getTime();
  
  showLoading(0, 'ກຳລັງໂຫລດຂໍ້ມູນເຂົ້າສູ່ລະບົບ...');
  
  // ✅ ตั้ง timeout (ถ้าเกิน 30 วินาทีให้แจ้งเตือน)
  const timeoutId = setTimeout(function() {
    console.warn('⚠️ Login data loading is taking longer than expected...');
    const messageDiv = document.getElementById('loadingMessage');
    if (messageDiv) {
      messageDiv.textContent = '⏳ ກຳລັງໂຫລດ... ກະລຸນາລໍຖ້າ';
      messageDiv.style.color = '#ffc107';
    }
  }, 30000); // 30 วินาที
  
  google.script.run
    .withSuccessHandler(function(data) {
      clearTimeout(timeoutId);
      
      const endTime = new Date().getTime();
      const timeTaken = ((endTime - startTime) / 1000).toFixed(2);
      console.log('✅ Login data received in ' + timeTaken + ' seconds');
      
      hideLoading();
      
      if (!data) {
        console.error('❌ ERROR: Data is null or undefined');
        showToast('ບໍ່ສາມາດໂຫລດຂໍ້ມູນໄດ້', 'error');
        return;
      }
      
      if (!data.provinces || !Array.isArray(data.provinces)) {
        console.error('❌ ERROR: Invalid data structure');
        showToast('ຂໍ້ມູນບໍ່ຖືກຕ້ອງ', 'error');
        return;
      }
      
      if (data.provinces.length === 0) {
        console.error('❌ ERROR: No provinces data');
        showToast('ບໍ່ມີຂໍ້ມູນແຂວງໃນລະບົບ', 'error');
        return;
      }
      
      console.log('✅ Provinces:', data.provinces.length);
      console.log('✅ Users:', data.users ? data.users.length : 0);
      
      loginData = data;
      
      // ✅ บันทึกลง IndexedDB (async)
      saveToIndexedDB('loginData', { id: 'loginData', data: data })
        .then(function() {
          console.log('✅ Login data saved to IndexedDB');
        })
        .catch(function(err) {
          console.error('⚠️ Failed to save to IndexedDB:', err);
        });
      
      // ✅ Populate form
      populateLoginForm();
      
      showToast('ໂຫລດຂໍ້ມູນສຳເລັດ (' + timeTaken + 's)', 'success');
    })
    .withFailureHandler(function(error) {
      clearTimeout(timeoutId);
      
      const endTime = new Date().getTime();
      const timeTaken = ((endTime - startTime) / 1000).toFixed(2);
      
      console.error('❌ ERROR fetching login data:', error);
      console.error('Time taken:', timeTaken + 's');
      
      hideLoading();
      showToast('ເກີດຂໍ້ຜິດພາດ: ' + error.message, 'error');
      
      // ✅ ลองโหลดจาก IndexedDB
      console.log('📦 Trying to load from IndexedDB...');
      loadFromIndexedDB('loginData', 'loginData').then(function(data) {
        if (data) {
          console.log('✅ Loaded login data from IndexedDB');
          loginData = data;
          populateLoginForm();
          showToast('ໂຫລດຈາກຂໍ້ມູນເກົ່າ (Offline)', 'success');
        } else {
          console.error('❌ No data in IndexedDB either');
          showToast('ບໍ່ມີຂໍ້ມູນທັງໃນເຊີບເວີແລະ Offline', 'error');
        }
      });
    })
    .getLoginData();
}
// ✅ Retry mechanism สำหรับกรณีโหลดล้มเหลว
function retryFetchLoginData(retryCount) {
  retryCount = retryCount || 0;
  const maxRetries = 3;
  
  if (retryCount >= maxRetries) {
    console.error('❌ Max retries reached');
    showToast('ບໍ່ສາມາດເຊື່ອມຕໍ່ເຊີບເວີໄດ້', 'error');
    hideLoading();
    return;
  }
  
  console.log('🔄 Retry attempt: ' + (retryCount + 1) + '/' + maxRetries);
  
  const messageDiv = document.getElementById('loadingMessage');
  if (messageDiv) {
    messageDiv.textContent = '🔄 ລອງໃໝ່... ຄັ້ງທີ່ ' + (retryCount + 1);
  }
  
  setTimeout(function() {
    google.script.run
      .withSuccessHandler(function(data) {
        hideLoading();
        if (data && data.provinces) {
          loginData = data;
          populateLoginForm();
          showToast('ໂຫລດສຳເລັດ!', 'success');
        } else {
          retryFetchLoginData(retryCount + 1);
        }
      })
      .withFailureHandler(function(error) {
        console.error('Retry failed:', error);
        retryFetchLoginData(retryCount + 1);
      })
      .getLoginData();
  }, 2000 * (retryCount + 1)); // เพิ่มเวลารอทุกครั้ง
}

    function fetchOptionsData() {
      google.script.run
        .withSuccessHandler(function(data) {
          optionsData = data;
          saveToIndexedDB('optionsData', { id: 'optionsData', data: data });
        })
        .withFailureHandler(function(error) {
          console.error('Error fetching options:', error);
        })
        .getOptionsData();
    }
function fetchHouseholdsData() {
  console.log('>>> Fetching households and mobile data from server...');
  console.log('>>> Using villageSheetId:', villageSheetId);
  
  if (!villageSheetId) {
    console.error('ERROR: villageSheetId is null or undefined!');
    showToast('ບໍ່ມີ Sheet ID ຂອງບ້ານ', 'error');
    hideLoading();
    return;
  }
  
  // แสดง Loading พร้อมข้อความ
  showLoading(0, 'ກຳລັງດຶງຂໍ້ມູນທັງໝົດ...');
  
  // ===== ດຶງຂໍ້ມູນຄອບຄົວ (Household) =====
  google.script.run
    .withSuccessHandler(function(data) {
      console.log('>>> Households data received:', data);
      console.log('>>> Data type:', typeof data);
      console.log('>>> Is array:', Array.isArray(data));
      
      // ตรวจสอบว่า data เป็น null หรือ undefined
      if (!data) {
        console.error('>>> ERROR: Data is null or undefined');
        householdsData = [];
      } else if (!Array.isArray(data)) {
        console.error('>>> ERROR: Data is not an array, type:', typeof data);
        householdsData = [];
      } else {
        console.log('>>> Households count:', data.length);
        
        if (data.length > 0) {
          console.log('>>> First household:', data[0]);
        }
        
        // เก็บข้อมูลใน global variable
        householdsData = data;
        
        // บันทึกลง IndexedDB
        if (data.length > 0) {
          data.forEach(household => {
            saveToIndexedDB('households', household)
              .catch(err => console.error('Failed to save household:', err));
          });
          console.log('>>> Households data saved to IndexedDB');
        }
      }
      
      // ✅ หลังโหลด Household เสร็จ → โหลด Mobile ต่อ
      loadMobileDataAfterHousehold();
    })
    .withFailureHandler(function(error) {
      console.error('>>> ERROR fetching households:', error);
      console.error('>>> Error message:', error.message);
      
      householdsData = [];
      
      // ลองโหลดจาก IndexedDB
      loadFromIndexedDB('households', null).then(data => {
        if (data && data.length > 0) {
          console.log('>>> Loaded households from IndexedDB:', data.length);
          householdsData = data;
        } else {
          console.log('>>> No households in IndexedDB');
        }
        
        // ✅ แม้ล้มเหลว ก็ยังต้องโหลด Mobile ต่อ
        loadMobileDataAfterHousehold();
      });
    })
    .getHouseholdData(villageSheetId);
  
  // ===== ฟังก์ชันโหลด Mobile หลัง Household =====
  function loadMobileDataAfterHousehold() {
    console.log('>>> Now fetching mobile data...');
    
    google.script.run
      .withSuccessHandler(function(data) {
        console.log('>>> Mobile data received:', data);
        console.log('>>> Mobile count:', data ? data.length : 0);
        
        if (!data) {
          console.error('>>> ERROR: Mobile data is null');
          mobilesData = [];
        } else if (!Array.isArray(data)) {
          console.error('>>> ERROR: Mobile data is not array');
          mobilesData = [];
        } else {
          mobilesData = data;
          
          // บันทึกลง IndexedDB
          if (data.length > 0) {
            data.forEach(mobile => {
              saveToIndexedDB('mobiles', mobile)
                .catch(err => console.error('Failed to save mobile:', err));
            });
            console.log('>>> Mobile data saved to IndexedDB');
          }
        }
        
        // ✅ โหลดเสร็จทั้งคู่แล้ว → แสดงผล
        finishLoadingAllData();
      })
      .withFailureHandler(function(error) {
        console.error('>>> ERROR fetching mobile:', error);
        mobilesData = [];
        
        // ลองโหลดจาก IndexedDB
        loadFromIndexedDB('mobiles', null).then(data => {
          if (data && data.length > 0) {
            console.log('>>> Loaded mobile from IndexedDB:', data.length);
            mobilesData = data;
          }
          
          // ✅ โหลดเสร็จทั้งคู่แล้ว → แสดงผล
          finishLoadingAllData();
        });
      })
      .getMobileData(villageSheetId);
  }
  
  // ===== ฟังก์ชันแสดงผลหลังโหลดเสร็จ =====
  function finishLoadingAllData() {
    console.log('>>> All data loaded!');
    console.log('>>> Households:', householdsData.length);
    console.log('>>> Mobiles:', mobilesData.length);
    
    // นับจำนวนคนทั้งหมด
    let totalPeople = householdsData.length; // หัวครอบครัว
    householdsData.forEach(household => {
      if (household.members && Array.isArray(household.members)) {
        totalPeople += household.members.length;
      }
    });
    totalPeople += mobilesData.length; // ประชากรเคลื่อนที่
    
    console.log('>>> Total people (all):', totalPeople);
    
    // แสดง Counter Animation
    const counterDiv = document.getElementById('loadingCounter');
    const messageDiv = document.getElementById('loadingMessage');
    
    if (counterDiv && messageDiv && totalPeople > 0) {
      messageDiv.textContent = `ກຳລັງໂຫລດ ${totalPeople} ຄົນ...`;
      
      let current = 0;
      const duration = 1500; // 1.5 วินาที
      const increment = totalPeople / (duration / 30);
      
      const timer = setInterval(() => {
        current += increment;
        if (current >= totalPeople) {
          current = totalPeople;
          clearInterval(timer);
          
          // เปลี่ยนข้อความเป็น "ສຳເລັດ"
          messageDiv.textContent = `✅ ໂຫລດສຳເລັດ ${totalPeople} ຄົນ`;
          
          // รอ 0.5 วินาที แล้วค่อยซ่อน loading
          setTimeout(() => {
            hideLoading();
          }, 500);
        }
        counterDiv.textContent = Math.floor(current);
      }, 30);
    } else {
      // ถ้าไม่มีข้อมูล ซ่อน loading ทันที
      hideLoading();
    }
    
    // ถ้าอยู่ในหน้า population ให้โหลดตาราง
    if (document.getElementById('dataContainer').classList.contains('active')) {
      console.log('>>> Reloading population data table...');
      loadPopulationData();
    }
    
    // ✅ ถ้าอยู่ในหน้า mobile ให้โหลดตาราง
    if (document.getElementById('mobileContainer') && 
        document.getElementById('mobileContainer').classList.contains('active')) {
      console.log('>>> Reloading mobile data table...');
      loadMobileData();
    }
    
    // แสดง Toast สำเร็จ
    if (householdsData.length > 0 || mobilesData.length > 0) {
      showToast(
        `ໂຫລດຂໍ້ມູນສຳເລັດ: ${householdsData.length} ຄອບຄົວ, ${mobilesData.length} ປະຊາກອນເຄື່ອນທີ່`, 
        'success'
      );
    } else {
      showToast('ບໍ່ມີຂໍ້ມູນໃນບ້ານນີ້', 'error');
      
      // แสดงตารางว่าง
      const tbody = document.getElementById('dataTableBody');
      if (tbody) {
        tbody.innerHTML = `
          <tr>
            <td colspan="7" style="text-align: center; padding: 40px;">
              <div style="font-size: 48px; margin-bottom: 10px;">⚠️</div>
              <div style="margin-bottom: 15px; color: #f44336;">ບໍ່ມີຂໍ້ມູນໃນບ້ານນີ້</div>
              <div style="margin-bottom: 15px; font-size: 14px; color: #666;">ກະລຸນາເພີ່ມຂໍ້ມູນ</div>
              <button onclick="openHouseholdForm()" class="btn btn-primary">➕ ເພີ່ມຄອບຄົວ</button>
            </td>
          </tr>
        `;
      }
    }
  }
}

    // ===================================
    // INDEXEDDB OPERATIONS
    // ===================================
    function saveToIndexedDB(storeName, data) {
      return new Promise((resolve, reject) => {
        const transaction = db.transaction([storeName], 'readwrite');
        const store = transaction.objectStore(storeName);
        const request = store.put(data);
        
        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
      });
    }

    function loadFromIndexedDB(storeName, key) {
      return new Promise((resolve, reject) => {
        const transaction = db.transaction([storeName], 'readonly');
        const store = transaction.objectStore(storeName);
        
        if (key) {
          const request = store.get(key);
          request.onsuccess = () => resolve(request.result ? request.result.data : null);
          request.onerror = () => reject(request.error);
        } else {
          const request = store.getAll();
          request.onsuccess = () => resolve(request.result);
          request.onerror = () => reject(request.error);
        }
      });
    }

    function deleteFromIndexedDB(storeName, key) {
      return new Promise((resolve, reject) => {
        const transaction = db.transaction([storeName], 'readwrite');
        const store = transaction.objectStore(storeName);
        const request = store.delete(key);
        
        request.onsuccess = () => resolve();
        request.onerror = () => reject(request.error);
      });
    }
function populateLoginForm() {
  console.log('>>> Populating login form...');
  
  // Safety checks
  if (!loginData) {
    console.error('>>> ERROR: loginData is null or undefined');
    showToast('ກະລຸນາ Refresh ໜ້າເວັບ', 'error');
    return;
  }
  
  if (!loginData.provinces) {
    console.error('>>> ERROR: loginData.provinces is null or undefined');
    console.log('>>> loginData structure:', Object.keys(loginData));
    showToast('ຂໍ້ມູນບໍ່ສົມບູນ', 'error');
    return;
  }
  
  if (!Array.isArray(loginData.provinces)) {
    console.error('>>> ERROR: loginData.provinces is not an array');
    console.log('>>> Type of provinces:', typeof loginData.provinces);
    showToast('ຮູບແບບຂໍ້ມູນບໍ່ຖືກຕ້ອງ', 'error');
    return;
  }
  
  if (loginData.provinces.length === 0) {
    console.error('>>> ERROR: loginData.provinces is empty array');
    showToast('ບໍ່ມີຂໍ້ມູນແຂວງ', 'error');
    return;
  }
  
  console.log('>>> loginData is valid');
  console.log('>>> Provinces to populate:', loginData.provinces);
  
  // Populate Names
  const nameDatalist = document.getElementById('loginNameList');
  if (nameDatalist && loginData.users) {
    nameDatalist.innerHTML = '';
    
    const uniqueNames = [...new Set(loginData.users.map(u => u.name))].sort();
    console.log('>>> Unique names count:', uniqueNames.length);
    
    uniqueNames.forEach(name => {
      const option = document.createElement('option');
      option.value = name;
      nameDatalist.appendChild(option);
    });
    
    console.log('>>> Names populated');
  } else {
    console.warn('>>> Name datalist not found or no users data');
  }
  
  // Populate Provinces
  const provinceDatalist = document.getElementById('loginProvinceList');
  if (!provinceDatalist) {
    console.error('>>> ERROR: Province datalist element not found');
    return;
  }
  
  provinceDatalist.innerHTML = '';
  console.log('>>> Starting to populate provinces...');
  
  try {
    loginData.provinces.forEach((province, index) => {
      const option = document.createElement('option');
      option.value = province;
      provinceDatalist.appendChild(option);
      
      if (index < 3) {
        console.log('>>> Added province:', province);
      }
    });
    
    console.log('>>> Successfully populated ' + loginData.provinces.length + ' provinces');
    console.log('>>> Login form ready!');
    
  } catch (error) {
    console.error('>>> ERROR while populating provinces:', error);
    showToast('ເກີດຂໍ້ຜິດພາດໃນການສ້າງລາຍການແຂວງ', 'error');
  }
}
// ===================================
// Login Province Change Handler
// ===================================
document.getElementById('loginProvince').addEventListener('input', function() {
  const province = this.value.trim();
  const districtInput = document.getElementById('loginDistrict');
  const villageInput = document.getElementById('loginVillage');
  const districtDatalist = document.getElementById('loginDistrictList');
  const villageDatalist = document.getElementById('loginVillageList');
  
  // Reset district and village
  districtInput.value = '';
  villageInput.value = '';
  districtDatalist.innerHTML = '';
  villageDatalist.innerHTML = '';
  districtInput.disabled = true;
  villageInput.disabled = true;
  
  // Check if province exists in data
  if (province && loginData.districts[province]) {
    districtInput.disabled = false;
    districtInput.placeholder = 'ພິມເມືອງຫຼືເລືອກຈາກລາຍການ';
    
    loginData.districts[province].forEach(district => {
      const option = document.createElement('option');
      option.value = district;
      districtDatalist.appendChild(option);
    });
    
    console.log('Loaded ' + loginData.districts[province].length + ' districts for province: ' + province);
  } else {
    districtInput.placeholder = 'ເລືອກແຂວງກ່ອນ';
  }
});

// ===================================
// Login District Change Handler
// ===================================
document.getElementById('loginDistrict').addEventListener('input', function() {
  const province = document.getElementById('loginProvince').value.trim();
  const district = this.value.trim();
  const villageInput = document.getElementById('loginVillage');
  const villageDatalist = document.getElementById('loginVillageList');
  
  // Reset village
  villageInput.value = '';
  villageDatalist.innerHTML = '';
  villageInput.disabled = true;
  
  // Check if district exists in data
  if (province && district) {
    const key = `${province}|${district}`;
    if (loginData.villages[key]) {
      villageInput.disabled = false;
      villageInput.placeholder = 'ພິມບ້ານຫຼືເລືອກຈາກລາຍການ';
      
      loginData.villages[key].forEach(village => {
        const option = document.createElement('option');
        option.value = village;
        villageDatalist.appendChild(option);
      });
      
      console.log('Loaded ' + loginData.villages[key].length + ' villages for: ' + key);
    } else {
      villageInput.placeholder = 'ບໍ່ມີຂໍ້ມູນບ້ານ';
    }
  } else {
    villageInput.placeholder = 'ເລືອກເມືອງກ່ອນ';
  }
});

// ===================================
// Auto-fill Login Data When Name Selected
// ===================================
document.getElementById('loginName').addEventListener('input', function() {
  const selectedName = this.value.trim();
  
  if (!selectedName || !loginData || !loginData.users) return;
  
  // Find user with matching name
  const matchedUser = loginData.users.find(u => u.name === selectedName);
  
  if (matchedUser) {
    console.log('Auto-filling data for user:', matchedUser);
    
    // Fill province
    document.getElementById('loginProvince').value = matchedUser.province;
    document.getElementById('loginProvince').dispatchEvent(new Event('input'));
    
    // Wait a bit for province to load districts
    setTimeout(() => {
      // Fill district
      document.getElementById('loginDistrict').value = matchedUser.district;
      document.getElementById('loginDistrict').dispatchEvent(new Event('input'));
      
      // Wait a bit for district to load villages
      setTimeout(() => {
        // Fill village
        document.getElementById('loginVillage').value = matchedUser.village;
      }, 100);
    }, 100);
  }
});

   document.getElementById('loginForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const loginInfo = {
    code: document.getElementById('loginCode').value.trim(),
    name: document.getElementById('loginName').value.trim(),
    province: document.getElementById('loginProvince').value.trim(),
    district: document.getElementById('loginDistrict').value.trim(),
    village: document.getElementById('loginVillage').value.trim()
  };
  
  // Validate all fields are filled
  if (!loginInfo.code || !loginInfo.name || !loginInfo.province || !loginInfo.district || !loginInfo.village) {
    showToast('ກະລຸນາຕື່ມຂໍ້ມູນໃຫ້ຄົບທຸກຊ່ອງ', 'error');
    return;
  }
  
  console.log('Attempting login with:', loginInfo);
  showLoading();
  
  google.script.run
    .withSuccessHandler(function(result) {
      console.log('Login result:', result);
      hideLoading();
      
      if (result.success) {
        // เก็บ villageSheetId จากผลลัพธ์ login
        villageSheetId = result.villageSheetId;
        currentUser = result; // เก็บข้อมูล login ทั้งหมด
        console.log('✅ Village Sheet ID set to:', villageSheetId);
        showMainApp();
        showToast('ເຂົ້າສູ່ລະບົບສຳເລັດ', 'success');
      } else {
        showToast(result.message, 'error');
      }
    })
    .withFailureHandler(function(error) {
      console.error('Login error:', error);
      hideLoading();
      showToast('ເກີດຂໍ້ຜິດພາດ: ' + error.message, 'error');
    })
    .validateLogin(loginInfo);
});

    function showMainApp() {
      document.getElementById('loginModal').classList.remove('active');
      document.getElementById('mainContainer').classList.add('active');
      document.getElementById('userName').textContent = `👤 ${currentUser.village || currentUser.name}`;
      document.getElementById('userLocation').textContent = `📍 ${currentUser.village}, ${currentUser.district}, ${currentUser.province}`;
      
      // เรียก fetchHouseholdsData ทันทีหลัง login สำเร็จ
      console.log('✅ Login successful, fetching household data for:', villageSheetId);
      showLoading();
      fetchHouseholdsData();
    }

    function logout() {
      if (confirm('ທ່ານຕ້ອງການອອກຈາກລະບົບບໍ່?')) {
        currentUser = null;
        document.getElementById('loginModal').classList.add('active');
        document.getElementById('mainContainer').classList.remove('active');
        document.getElementById('loginForm').reset();
        backToMenu();
        showToast('ອອກຈາກລະບົບສຳເລັດ', 'success');
      }
    }

    // ===================================
    // IDLE TIMER
    // ===================================
    function resetIdleTimer() {
      clearTimeout(idleTimer);
      clearTimeout(idleWarningTimer);
      document.getElementById('idleWarning').classList.remove('active');
      
      idleWarningTimer = setTimeout(showIdleWarning, 115 * 60 * 1000);
      idleTimer = setTimeout(autoLogout, 120 * 60 * 1000);
    }

    function showIdleWarning() {
      document.getElementById('idleWarning').classList.add('active');
      let timeLeft = 5;
      
      const countdown = setInterval(() => {
        timeLeft--;
        document.getElementById('idleTimer').textContent = timeLeft;
        
        if (timeLeft <= 0) {
          clearInterval(countdown);
        }
      }, 60 * 1000);
    }

    function autoLogout() {
      showToast('ອອກຈາກລະບົບອັດຕະໂນມັດເນື່ອງຈາກບໍ່ມີການໃຊ້ງານ', 'error');
      setTimeout(() => {
        currentUser = null;
        document.getElementById('loginModal').classList.add('active');
        document.getElementById('mainContainer').classList.remove('active');
        document.getElementById('loginForm').reset();
        backToMenu();
      }, 2000);
    }

  function openPopulation() {
  console.log('>>> Opening population page...');
  console.log('>>> villageSheetId:', villageSheetId);
  
  document.getElementById('menu').style.display = 'none';
  document.getElementById('dataContainer').classList.add('active');
  
  // Always fetch from server to get the correct village data
  console.log('>>> Fetching households for village: ' + villageSheetId);
  showLoading();
  fetchHouseholdsData();
}

    function backToMenu() {
      document.getElementById('menu').style.display = 'grid';
      document.getElementById('dataContainer').classList.remove('active');
    }
function loadPopulationData() {
  console.log('>>> Loading population data to table...');
  console.log('>>> householdsData length:', householdsData.length);
  
  const tbody = document.getElementById('dataTableBody');
  tbody.innerHTML = '';
  
  if (householdsData.length === 0) {
    console.log('>>> No households data to display');
    tbody.innerHTML = `
      <tr>
        <td colspan="7" style="text-align: center; padding: 40px;">
          <div style="font-size: 48px; margin-bottom: 10px;">📋</div>
          <div style="margin-bottom: 15px;">ຍັງບໍ່ມີຂໍ້ມູນຄອບຄົວ</div>
          <button onclick="fetchHouseholdsData()" class="btn btn-primary">🔄 ໂຫລດຂໍ້ມູນຈາກເຊີບເວີ</button>
        </td>
      </tr>
    `;
    document.getElementById('pagination').style.display = 'none';
    return;
  }
  
  // Create all rows first
  const allRows = [];
  
  householdsData.forEach((household, index) => {
    // Household header row
    const headRow = createTableRow({
      photo: household.photo,
      code: household.householdCode,
      name: household.name,
      gender: '-',
      relationship: 'ຫົວໜ້າຄອບຄົວ',
      unit: household.unit,
      phone: household.phone,
      type: 'household',
      householdCode: household.householdCode
    });
    allRows.push(headRow);
    
    // Member rows
    if (household.members && household.members.length > 0) {
      household.members.forEach(member => {
        const memberRow = createTableRow({
          photo: member.photo,
          code: member.memberCode,
          name: member.name,
          gender: member.gender,
          relationship: member.relationship,
          unit: member.unit,
          phone: member.phone,
          type: 'member',
          householdCode: household.householdCode,
          memberCode: member.memberCode
        });
        allRows.push(memberRow);
      });
    }
  });
  
  totalRows = allRows.length;
  const totalPages = Math.ceil(totalRows / rowsPerPage);
  
  // Display rows for current page
  const startIndex = (currentPage - 1) * rowsPerPage;
  const endIndex = Math.min(startIndex + rowsPerPage, totalRows);
  
  for (let i = startIndex; i < endIndex; i++) {
    tbody.appendChild(allRows[i]);
  }
  
  // Update pagination UI
  updatePaginationUI(totalPages);
  
  console.log('>>> Displayed rows ' + (startIndex + 1) + '-' + endIndex + ' of ' + totalRows);
  hideLoading();
}

function updatePaginationUI(totalPages) {
  document.getElementById('currentPage').textContent = currentPage;
  document.getElementById('totalPages').textContent = totalPages;
  
  document.getElementById('btnFirst').disabled = currentPage === 1;
  document.getElementById('btnPrev').disabled = currentPage === 1;
  document.getElementById('btnNext').disabled = currentPage === totalPages;
  document.getElementById('btnLast').disabled = currentPage === totalPages;
  
  document.getElementById('pagination').style.display = totalPages > 1 ? 'flex' : 'none';
}

function changePage(direction) {
  const totalPages = Math.ceil(totalRows / rowsPerPage);
  
  switch(direction) {
    case 'first':
      currentPage = 1;
      break;
    case 'prev':
      if (currentPage > 1) currentPage--;
      break;
    case 'next':
      if (currentPage < totalPages) currentPage++;
      break;
    case 'last':
      currentPage = totalPages;
      break;
  }
  
  loadPopulationData();
  
  // Scroll to top of table
  document.getElementById('dataTable').scrollIntoView({ behavior: 'smooth', block: 'start' });
}

   function createTableRow(data) {
  const tr = document.createElement('tr');
  
  const photoUrl = data.photo || '';
  const photoHTML = photoUrl ? 
    `<img src="${photoUrl}" class="profile-img" alt="Photo" onclick="showImagePreview('${photoUrl}')" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
     <div class="profile-img" style="font-size: 24px; display: none;">❓</div>` : 
    '<div class="profile-img" style="font-size: 24px; display: flex; align-items: center; justify-content: center;">❓</div>';
  // WhatsApp button
  const whatsappBtn = data.phone ? 
    `<a href="https://wa.me/${data.phone.replace(/\D/g, '')}" target="_blank" class="btn-whatsapp" title="${data.phone}">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"/>
      </svg>
    </a>` : 
    '<span style="color: #999;">-</span>';
  
  // Action buttons based on type
  let actionButtons = '';
  if (data.type === 'member') {
    actionButtons = `
      <button class="btn-edit" onclick="editMemberOnly('${data.memberCode}')" title="ແກ້ໄຂບຸກຄົນ">
        ✏️ ແກ້ບຸກຄົນ
      </button>
      <button class="btn-delete" onclick="showDeleteModal('member', '${data.memberCode}')" title="ລົບຄົນດຽວ">
        🗑️ ລົບຄົນດຽວ
      </button>
      <button class="btn-edit-family" onclick="editHousehold('${data.householdCode}')" title="ແກ້ໄຂຄອບຄົວ">
        👨‍👩‍👧 ແກ້ຄອບຄົວ
      </button>
      <button class="btn-delete-family" onclick="showDeleteModal('household', '${data.householdCode}')" title="ລົບຄອບຄົວ">
        🗑️❌ ລົບຄອບຄົວ
      </button>
    `;
  } else {
    actionButtons = `
      <button class="btn-edit-family" onclick="editHousehold('${data.householdCode}')" title="ແກ້ໄຂຄອບຄົວ">
        👨‍👩‍👧 ແກ້ໄຂຄອບຄົວ
      </button>
      <button class="btn-delete-family" onclick="showDeleteModal('household', '${data.householdCode}')" title="ລົບຄອບຄົວ">
        🗑️❌ ລົບຄອບຄົວ
      </button>
    `;
  }
  
  tr.innerHTML = `
    <td>${photoHTML}</td>
    <td><strong>${data.name}</strong></td>
    <td>${data.gender || '-'}</td>
    <td>${data.relationship || '-'}</td>
    <td>${data.unit || '-'}</td>
    <td style="text-align: center;">${whatsappBtn}</td>
    <td>
      <div class="action-buttons">
        ${actionButtons}
      </div>
    </td>
  `;
  
  return tr;
}
function searchData() {
  const searchTerm = document.getElementById('searchInput').value.trim();
  
  if (!searchTerm) {
    // ถ้าไม่มีคำค้นหา แสดงข้อมูลปกติ
    loadPopulationData();
    return;
  }
  
  if (searchTerm.length < 2) {
    showToast('ກະລຸນາພິມຢ່າງໜ້ອຍ 2 ຕົວອັກສອນ', 'error');
    return;
  }
  
  showLoading();
  
  // ค้นหาจาก server
  google.script.run
    .withSuccessHandler(function(results) {
      hideLoading();
      
      if (!results || results.length === 0) {
        const tbody = document.getElementById('dataTableBody');
        tbody.innerHTML = `
          <tr>
            <td colspan="7" style="text-align: center; padding: 40px;">
              <div style="font-size: 48px; margin-bottom: 10px;">🔍</div>
              <div>ບໍ່ພົບຂໍ້ມູນທີ່ຄົ້ນຫາ: "${searchTerm}"</div>
              <button onclick="clearSearch()" class="btn btn-primary" style="margin-top: 15px;">
                ❌ ລ້າງການຄົ້ນຫາ
              </button>
            </td>
          </tr>
        `;
        document.getElementById('pagination').style.display = 'none';
        showToast('ບໍ່ພົບຜົນການຄົ້ນຫາ', 'error');
        return;
      }
      
      // แสดงผลการค้นหา
      displaySearchResults(results, searchTerm);
      showToast(`ພົບ ${results.length} ຄອບຄົວ`, 'success');
    })
    .withFailureHandler(function(error) {
      hideLoading();
      showToast('ເກີດຂໍ້ຜິດພາດໃນການຄົ້ນຫາ: ' + error.message, 'error');
    })
    .searchHouseholds(searchTerm, '', villageSheetId);
}

function displaySearchResults(results, searchTerm) {
  const tbody = document.getElementById('dataTableBody');
  tbody.innerHTML = '';
  
  // แสดงข้อความผลการค้นหา
  const headerRow = document.createElement('tr');
  headerRow.innerHTML = `
    <td colspan="7" style="background: #fff3cd; padding: 15px; border-left: 5px solid #ffc107;">
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
          <strong>🔍 ຜົນການຄົ້ນຫາ: "${searchTerm}"</strong> - 
          ພົບ <strong style="color: #667eea;">${results.length}</strong> ຄອບຄົວ
        </div>
        <button onclick="clearSearch()" class="btn btn-secondary" style="padding: 5px 15px;">
          ❌ ລ້າງການຄົ້ນຫາ
        </button>
      </div>
    </td>
  `;
  tbody.appendChild(headerRow);
  
  // แสดงผลลัพธ์
  results.forEach(household => {
    // ดึงข้อมูลครอบครัวเต็มจาก householdsData
    const fullHousehold = householdsData.find(h => h.householdCode === household.householdCode);
    
    if (fullHousehold) {
      // แสดงหัวครอบครัว
      const headRow = createTableRow({
        photo: fullHousehold.photo,
        code: fullHousehold.householdCode,
        name: fullHousehold.name,
        gender: '-',
        relationship: 'ຫົວໜ້າຄອບຄົວ',
        unit: fullHousehold.unit,
        phone: fullHousehold.phone,
        type: 'household',
        householdCode: fullHousehold.householdCode
      });
      tbody.appendChild(headRow);
      
      // แสดงสมาชิก
      if (fullHousehold.members && fullHousehold.members.length > 0) {
        fullHousehold.members.forEach(member => {
          const memberRow = createTableRow({
            photo: member.photo,
            code: member.memberCode,
            name: member.name,
            gender: member.gender,
            relationship: member.relationship,
            unit: member.unit,
            phone: member.phone,
            type: 'member',
            householdCode: fullHousehold.householdCode,
            memberCode: member.memberCode
          });
          tbody.appendChild(memberRow);
        });
      }
    }
  });
  
  // ซ่อน pagination เมื่อค้นหา
  document.getElementById('pagination').style.display = 'none';
}

function clearSearch() {
  document.getElementById('searchInput').value = '';
  currentPage = 1;
  loadPopulationData();
  showToast('ລ້າງການຄົ້ນຫາສຳເລັດ', 'success');
}

    function openHouseholdForm() {
  document.getElementById('formTitle').textContent = '➕ ເພີ່ມຄອບຄົວໃໝ່';
  document.getElementById('householdForm').reset();
  document.getElementById('householdCode').value = '';
  document.getElementById('membersContainer').innerHTML = '';
  document.getElementById('householdPhotoPreview').innerHTML = '<div class="placeholder">❓</div>';
  memberCounter = 0;
  
  if (currentUser) {
    document.getElementById('village').value = currentUser.village;
    document.getElementById('district').value = currentUser.district;
    document.getElementById('province').value = currentUser.province;
  }
  
  // Enable all household fields
  document.getElementById('householdName').readOnly = false;
  document.getElementById('householdPhone').readOnly = false;
  document.getElementById('houseNumber').readOnly = false;
  document.getElementById('roofCount').readOnly = false;
  document.getElementById('householdCount').readOnly = false;
  document.getElementById('familyCount').readOnly = false;
  document.getElementById('registryBookCount').readOnly = false;
  document.getElementById('registryNumber').readOnly = false;
  document.getElementById('familyMemberCount').readOnly = true; // Auto-calculate
  document.getElementById('pageCount').readOnly = true; // Auto-calculate
  document.getElementById('unit').readOnly = false;
  document.getElementById('rentalLocation').readOnly = false;
  document.getElementById('monthlyIncome').readOnly = false;
  document.getElementById('housePosition').readOnly = false;
  document.getElementById('householdPhoto').disabled = false;
  
  populateRentalLocationList();
  document.getElementById('householdFormModal').classList.add('active');
}

    function closeHouseholdForm() {
      document.getElementById('householdFormModal').classList.remove('active');
    }

    function populateRentalLocationList() {
      if (optionsData && optionsData.K) {
        const datalist = document.getElementById('rentalLocationList');
        datalist.innerHTML = '';
        optionsData.K.forEach(option => {
          const optionEl = document.createElement('option');
          optionEl.value = option;
          datalist.appendChild(optionEl);
        });
      }
    }
// ฟังก์ชันตรวจสอบก่อนเพิ่มสมาชิก
function addMemberForm() {
  // ตรวจสอบสมาชิกคนล่าสุดก่อน
  if (memberCounter > 0) {
    const lastMember = document.getElementById(`member-${memberCounter}`);
    if (lastMember) {
      const errors = validateMemberForm(lastMember);
      
      if (errors.length > 0) {
        showValidationPopup(errors, memberCounter);
        return;
      }
    }
  }
  
  // เพิ่มสมาชิกใหม่
  memberCounter++;
  const container = document.getElementById('membersContainer');
  
  const memberDiv = document.createElement('div');
  memberDiv.className = 'form-section member-section';
  memberDiv.id = `member-${memberCounter}`;
  memberDiv.innerHTML = getMemberFormHTML(memberCounter, null);
  
  container.appendChild(memberDiv);
  populateDataLists();
  updateFamilyCounters();
  
// Initialize disease input listeners (เพิ่มใหม่)
  setupDiseaseInputListeners(memberCounter);
  
  // Initialize disease tags if editing existing member
  setTimeout(() => {
    const diseaseTextarea = document.getElementById(`diseaseHidden${memberCounter}`);
    if (diseaseTextarea && diseaseTextarea.value) {
      initializeExistingDiseases(memberCounter, diseaseTextarea.value);
    }
  }, 100);
  
  // Scroll ไปยังสมาชิกใหม่
  memberDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
  // เพิ่มบรรทัดนี้ในบรรทัดสุดท้าย
  addRegistryChangeListeners();
}

// ฟังก์ชันตรวจสอบฟอร์มสมาชิก
function validateMemberForm(memberDiv) {
  const errors = [];
  const requiredFields = memberDiv.querySelectorAll('.required-field');
  
  requiredFields.forEach(field => {
    const value = field.value.trim();
    const fieldName = field.getAttribute('data-field-name') || 'ຊ່ອງນີ້';
    
    if (!value) {
      errors.push({
        field: field,
        fieldName: fieldName,
        message: `${fieldName} ຍັງບໍ່ໄດ້ຕື່ມຂໍ້ມູນ`
      });
      
      // เพิ่มคลาส invalid
      field.classList.add('invalid');
    } else {
      // ลบคลาส invalid ถ้ามีค่า
      field.classList.remove('invalid');
    }
  });
  
  return errors;
}

// ฟังก์ชันแสดง Popup ข้อผิดพลาด
function showValidationPopup(errors, memberNumber) {
  const popup = document.createElement('div');
  popup.className = 'validation-error-popup';
  
  let errorListHTML = '';
  errors.forEach((error, index) => {
    errorListHTML += `
      <div class="validation-error-item">
        <span style="font-size: 1.2rem;">❌</span>
        <span>${index + 1}. ${error.message}</span>
      </div>
    `;
  });
  
  popup.innerHTML = `
    <div class="validation-error-header">
      <span>⚠️</span>
      <span>ກະລຸນາຕື່ມຂໍ້ມູນໃຫ້ຄົບຖ້ວນ</span>
    </div>
    <p style="margin-bottom: 15px; color: #666;">
      ສະມາຊິກຄົນທີ່ ${memberNumber} ຍັງຕື່ມຂໍ້ມູນບໍ່ຄົບ:
    </p>
    <div class="validation-error-list">
      ${errorListHTML}
    </div>
    <button class="btn btn-primary" onclick="closeValidationPopup()" style="width: 100%;">
      ✅ ຮັບທຮາບ
    </button>
  `;
  
  // เพิ่ม overlay
  const overlay = document.createElement('div');
  overlay.id = 'validationOverlay';
  overlay.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); z-index: 10000;';
  
  document.body.appendChild(overlay);
  document.body.appendChild(popup);
  
  // Scroll ไปยังช่องที่ผิด
  setTimeout(() => {
    if (errors.length > 0) {
      errors[0].field.scrollIntoView({ behavior: 'smooth', block: 'center' });
      errors[0].field.focus();
    }
  }, 500);
}

// ฟังก์ชันปิด Popup
function closeValidationPopup() {
  const popup = document.querySelector('.validation-error-popup');
  const overlay = document.getElementById('validationOverlay');
  
  if (popup) popup.remove();
  if (overlay) overlay.remove();
}

// ✅ ลบ animation invalid เมื่อ user กรอกข้อมูล (ป้องกัน Error)
document.addEventListener('input', function(e) {
  try {
    if (e.target && e.target.classList && e.target.classList.contains('required-field')) {
      if (e.target.value && e.target.value.trim()) {
        e.target.classList.remove('invalid');
      }
    }
  } catch (error) {
    console.error('❌ Input validation error:', error);
  }
}, { passive: true });

function removeMemberForm(id) {
  const memberDiv = document.getElementById(`member-${id}`);
  if (memberDiv && confirm('ທ່ານຕ້ອງການລົບສະມາຊິກຄົນນີ້ບໍ່?')) {
    memberDiv.remove();
    
    // เรียงลำดับใหม่
    reorderMembers();
    
    updateFamilyCounters();
  addRegistryChangeListeners(); // เพิ่มบรรทัดนี้
    
    // อัพเดต relationship options (เพิ่มใหม่)
    updateRelationshipOptions();

  }
}

// ฟังก์ชันเรียงลำดับสมาชิกใหม่
function reorderMembers() {
  const container = document.getElementById('membersContainer');
  const memberDivs = container.querySelectorAll('.member-section');
  
  memberDivs.forEach((div, index) => {
    const newNumber = index + 1;
    
    // อัปเดตหัวข้อ
    const heading = div.querySelector('h3');
    if (heading) {
      heading.setAttribute('data-member-number', newNumber); // เพิ่มบรรทัดนี้
      const span = heading.querySelector('span');
      if (span) {
        span.textContent = `👤 ສະມາຊິກຄອບຄົວ ຄົນທີ່ ${newNumber}`;
      }
    }
    
    // อัปเดต ID ของ div
    const oldId = div.id.match(/\d+/)[0];
    div.id = `member-${newNumber}`;
    
    // อัปเດต ID ของ inputs และ buttons ภายใน
    updateElementIds(div, oldId, newNumber);
  });
  
  // อัปเดต memberCounter
  memberCounter = memberDivs.length;
  
  // อัพเดต relationship options (เพิ่มใหม่)
  updateRelationshipOptions();
}

// ฟังก์ชันช่วยอัปเดต IDs
function updateElementIds(container, oldId, newId) {
  // อัปเดต Photo Notice
  const photoNotice = container.querySelector(`#photoNotice${oldId}`);
  if (photoNotice) photoNotice.id = `photoNotice${newId}`;
  
  // อัปเดต Photo Wrapper
  const photoWrapper = container.querySelector(`#photoWrapper${oldId}`);
  if (photoWrapper) photoWrapper.id = `photoWrapper${newId}`;
  
  // อัปเดต Photo Input
  const photoInput = container.querySelector(`#memberPhoto${oldId}`);
  if (photoInput) {
    photoInput.id = `memberPhoto${newId}`;
    const photoUpload = container.querySelector('.photo-upload');
    if (photoUpload) {
      photoUpload.setAttribute('onclick', `document.getElementById('memberPhoto${newId}').click()`);
    }
  }
  
  // อัปเดต Photo Preview
  const photoPreview = container.querySelector(`#memberPhotoPreview${oldId}`);
  if (photoPreview) {
    photoPreview.id = `memberPhotoPreview${newId}`;
    if (photoInput) {
      photoInput.setAttribute('onchange', `previewPhoto(this, 'memberPhotoPreview${newId}')`);
    }
  }
  
  // อัปเดต Delete Button
  const deleteBtn = container.querySelector('.btn-delete-member');
  if (deleteBtn) {
    deleteBtn.setAttribute('onclick', `removeMemberForm(${newId})`);
  }
}

 function getMemberFormHTML(counter, member) {
  const birthParts = member && member.birthDate ? member.birthDate.split('/') : ['', '', ''];
  const hasRelationship = member && member.relationship && member.relationship.trim() !== '';
  
  return `
   <h3 data-member-number="${counter}">
  <span style="margin-left: 35px;">👤 ສະມາຊິກຄອບຄົວ ຄົນທີ່ ${counter}</span>
  <button type="button" class="btn-delete-member" onclick="removeMemberForm(${counter})">🗑️ ລົບ</button>
</h3>
    <input type="hidden" class="memberCode" value="${member ? member.memberCode || '' : ''}">
    
    <!-- Photo Upload Notice -->
    <div class="photo-upload-notice ${hasRelationship ? 'hidden' : ''}" id="photoNotice${counter}">
      <span class="icon">📸</span>
      <span>ກະລຸນາເລືອກ "ສາຍພົວພັນຄອບຄົວ" ກ່ອນ ຈຶ່ງຈະສາມາດອັບໂຫລດຮູບພາບໄດ້</span>
    </div>
    
    <!-- Photo Upload Wrapper -->
    <div class="photo-upload-wrapper ${hasRelationship ? 'show' : ''}" id="photoWrapper${counter}">
      <div class="form-group">
        <div class="photo-upload" onclick="document.getElementById('memberPhoto${counter}').click()">
          <div class="photo-preview" id="memberPhotoPreview${counter}">
            ${member && member.photo ? `<img src="${member.photo}" alt="Photo">` : '<div class="placeholder">❓</div>'}
          </div>
          <p>📷 ອັບໂຫລດ/ຖ່າຍຮູບ</p>
          <input type="file" id="memberPhoto${counter}" accept="image/*" style="display: none" onchange="previewPhoto(this, 'memberPhotoPreview${counter}')">
        </div>
      </div>
    </div>

    <!-- Row 1: ຊື່, ເພດ, ວັນເດືອນປີເກີດ -->
    <div class="form-row">
      <div class="form-group">
        <label>ຊື່ ແລະ ນາມສະກຸນ <span style="color: red;">*</span></label>
        <input type="text" class="memberName required-field" value="${member ? member.name || '' : ''}" data-field-name="ຊື່ ແລະ ນາມສະກຸນ">
      </div>
      <div class="form-group">
        <label>ເພດ <span style="color: red;">*</span></label>
        <input type="text" class="memberGender required-field" value="${member ? member.gender || '' : ''}" list="genderList" data-field-name="ເພດ">
      </div>
      <div class="form-group">
        <label>ວັນເດືອນປີເກີດ <span style="color: red;">*</span></label>
     <div class="date-inputs">
  <input type="number" class="birthDay required-field" value="${birthParts[0]}" placeholder="ວັນ" min="1" max="31" data-field-name="ວັນເກີດ">
  <span>/</span>
  <input type="number" class="birthMonth required-field" value="${birthParts[1]}" placeholder="ເດືອນ" min="1" max="12" data-field-name="ເດືອນເກີດ">
  <span>/</span>
  <input type="number" class="birthYear required-field" value="${birthParts[2]}" placeholder="ປີ ຄ.ສ." min="1900" max="2600" data-field-name="ປີເກີດ">
</div>
      </div>
    </div>

    <!-- Row 2: ສາຍພົວພັນ, ອາຊີບ, ຊົນເຜົ່າ -->
    <div class="form-row">
     <div class="form-group">
  <label>ສາຍພົວພັນຄອບຄົວ <span style="color: red;">*</span></label>
  <input type="text" 
         class="memberRelationship required-field" 
         value="${member ? member.relationship || '' : ''}" 
         list="relationshipList" 
         onchange="handleRelationshipChange(this, ${counter}); handleRelationshipChange_ClearPhoto(${counter})" 
         oninput="handleRelationshipChange(this, ${counter}); handleRelationshipChange_ClearPhoto(${counter})"
         data-field-name="ສາຍພົວພັນຄອບຄົວ">
</div>
      <div class="form-group">
        <label>ອາຊີບ <span style="color: red;">*</span></label>
        <input type="text" class="memberOccupation required-field" value="${member ? member.occupation || '' : ''}" list="occupationList" data-field-name="ອາຊີບ">
      </div>
      <div class="form-group">
        <label>ຊົນເຜົ່າ <span style="color: red;">*</span></label>
        <input type="text" class="memberEthnicity required-field" value="${member ? member.ethnicity || '' : ''}" list="ethnicityList" data-field-name="ຊົນເຜົ່າ">
      </div>
    </div>

    <!-- Row 3: ຮ່າງກາຍສົມບູນ, ປະກັນສຸຂະພາບ, ພະຍາດປະຈໍາຕົວ -->
    <div class="form-row">
      <div class="form-group">
        <label>ຮ່າງກາຍສົມບູນ <span style="color: red;">*</span></label>
        <input type="text" class="memberBodyComplete required-field" value="${member ? member.bodyComplete || '' : ''}" list="bodyCompleteList" data-field-name="ຮ່າງກາຍສົມບູນ">
      </div>
      <div class="form-group">
        <label>ປະກັນສຸຂະພາບ <span style="color: red;">*</span></label>
        <input type="text" class="memberInsurance required-field" value="${member ? member.insurance || '' : ''}" list="insuranceList" data-field-name="ປະກັນສຸຂະພາບ">
      </div>
    <div class="form-group">
  <label>ພະຍາດປະຈໍາຕົວ <span style="color: red;">*</span></label>
  
  <!-- กล่องแสดง Tags -->
  <div class="disease-tags-container" 
       id="diseaseTagsContainer${counter}" 
       style="display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 10px; min-height: 40px; padding: 10px; background: #f8f9fa; border: 2px dashed #dee2e6; border-radius: 8px;">
    <div style="width: 100%; text-align: center; color: #999; font-size: 13px;" class="empty-placeholder">
      ຍັງບໍ່ມີພະຍາດ - ກະລຸນາເລືອກຫຼືພິມດ້ານລຸ່ມ
    </div>
  </div>
  
  <!-- Input สำหรับเลือก/พิมพ์ -->
  <div style="position: relative;">
    <input type="text" 
           class="memberDiseaseInput" 
           id="diseaseInput${counter}"
           list="diseaseList" 
           placeholder="🔍 ຄລິກເພື່ອເລືອກ ຫຼື ພິມເອງ..."
           style="width: 100%; padding: 12px 40px 12px 12px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 14px; transition: all 0.3s;"
           onkeydown="handleDiseaseInput(event, ${counter})"
           onfocus="this.style.borderColor='#667eea'; this.style.boxShadow='0 0 0 3px rgba(102,126,234,0.1)';"
           onblur="this.style.borderColor='#e0e0e0'; this.style.boxShadow='none';">
    
    <!-- ปุ่ม Add -->
    <button type="button" 
            onclick="manualAddDisease(${counter})"
            style="position: absolute; right: 5px; top: 50%; transform: translateY(-50%); padding: 8px 15px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 12px; font-weight: 600; transition: all 0.3s;"
            onmouseover="this.style.transform='translateY(-50%) scale(1.05)'"
            onmouseout="this.style.transform='translateY(-50%) scale(1)'">
      ➕ ເພີ່ມ
    </button>
  </div>
  
  <small style="display: block; color: #666; font-size: 12px; margin-top: 5px; line-height: 1.5;">
    💡 <strong>ວິທີໃຊ້:</strong><br>
    • ຄລິກໃສ່ຊ່ອງເພື່ອເບິ່ງລາຍການພະຍາດ<br>
    • ເລືອກຈາກລາຍການ ຫຼື ພິມເອງ<br>
    • ກົດ Enter ຫຼື ກົດປຸ່ມ "➕ ເພີ່ມ"<br>
    • ສາມາດເພີ່ມໄດ້ຫຼາຍພະຍາດ
  </small>
  
  <!-- Hidden textarea เก็บค่าจริง -->
  <textarea class="memberDisease required-field" 
            id="diseaseHidden${counter}"
            rows="1" 
            style="display: none;"
            data-field-name="ພະຍາດປະຈໍາຕົວ">${member ? member.disease || '' : ''}</textarea>
</div>
    </div>

    <!-- Row 4: ລະດັບການສຶກສາ, ສາສະໜາ, ສະຖານະພາບຄອບຄົວ -->
    <div class="form-row">
      <div class="form-group">
        <label>ລະດັບການສຶກສາ <span style="color: red;">*</span></label>
        <input type="text" class="memberEducation required-field" value="${member ? member.education || '' : ''}" list="educationList" data-field-name="ລະດັບການສຶກສາ">
      </div>
      <div class="form-group">
        <label>ສາສະໜາ <span style="color: red;">*</span></label>
        <input type="text" class="memberReligion required-field" value="${member ? member.religion || '' : ''}" list="religionList" data-field-name="ສາສະໜາ">
      </div>
      <div class="form-group">
        <label>ສະຖານະພາບຄອບຄົວ <span style="color: red;">*</span></label>
        <input type="text" class="memberMaritalStatus required-field" value="${member ? member.maritalStatus || '' : ''}" list="maritalStatusList" data-field-name="ສະຖານະພາບຄອບຄົວ">
      </div>
    </div>

    <!-- Row 5: ມີໜ້າໃນສໍາມະໂນຄົວ, ມີໜ້າຢູ່ຕົວຈິງ, ເບີໂທຕິດຕໍ່ -->
    <div class="form-row">
      <div class="form-group">
        <label>ມີໜ້າໃນສໍາມະໂນຄົວ <span style="color: red;">*</span></label>
        <input type="text" class="memberInRegistry required-field" value="${member ? member.inRegistry || '' : ''}" list="inRegistryList" data-field-name="ມີໜ້າໃນສໍາມະໂນຄົວ">
      </div>
      <div class="form-group">
        <label>ມີໜ້າຢູ່ຕົວຈິງ <span style="color: red;">*</span></label>
        <input type="text" class="memberActualResident required-field" value="${member ? member.actualResident || '' : ''}" list="actualResidentList" data-field-name="ມີໜ້າຢູ່ຕົວຈິງ">
      </div>
      <div class="form-group">
        <label>ເບີໂທຕິດຕໍ່</label>
        <input type="tel" class="memberPhone" value="${member ? member.phone || '' : ''}" placeholder="20XXXXXXXX">
      </div>
    </div>
  `;
}

   function populateDataLists() {
  if (!optionsData) return;
  
  const datalists = {
    genderList: optionsData.A,
    occupationList: optionsData.B,
    insuranceList: optionsData.C,
    educationList: optionsData.D,
    maritalStatusList: optionsData.E,
    diseaseList: optionsData.F,
    ethnicityList: optionsData.G,
    relationshipList: optionsData.H,
    religionList: optionsData.J,
    bodyCompleteList: optionsData.L,
    actualResidentList: optionsData.U,
    inRegistryList: optionsData.V
  };
  
  Object.keys(datalists).forEach(listId => {
    const datalist = document.getElementById(listId);
    if (datalist && datalists[listId]) {
      datalist.innerHTML = '';
      datalists[listId].forEach(option => {
        const optionEl = document.createElement('option');
        optionEl.value = option;
        datalist.appendChild(optionEl);
      });
    }
  });
  
  // เพิ่มบรรทัดนี้
  addRegistryChangeListeners();
  updateFamilyCounters();
}



    // ===================================
    // SAVE HOUSEHOLD
    // ===================================
  // แทนที่ส่วน Event Listener ของ householdForm ทั้งหมด

// ✅ ปัญหา 3: ตรวจสอบฟอร์มให้ครบถ้วน
function validateAllFormFields() {
  const errors = [];
  
  // ตรวจหัวหน้าครอบครัว
  const householdName = document.getElementById('householdName');
  if (!householdName.value.trim()) {
    errors.push({ field: 'householdName', message: 'ຊື່ຫົວໜ້າຄອບຄົວ ບໍ່ກົນຣຸນາກັນກໍ່' });
  }
  
  // ตรวจสมาชิก
  const memberForms = document.querySelectorAll('#membersContainer .member-section');
  memberForms.forEach((form, index) => {
    const memberErrors = validateMemberForm(form);
    errors.push(...memberErrors);
  });
  
  // ❌ ถ้ามี error
  if (errors.length > 0) {
    // Highlight ช่องที่ผิด
    errors.forEach(error => {
      const field = document.getElementById(error.field);
      if (field) {
        field.classList.add('invalid');
      }
    });
    
    // แสดง Popup
    showValidationPopup(errors, 0);
    return false;
  }
  
  return true;
}

    document.getElementById('householdForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  // ✅ ตรวจสอบฟอร์มก่อน
  if (!validateAllFormFields()) {
    return;
  }
  
  
  console.log('=== Form Submit Started ===');
  
  // รวบรวมข้อมูลหัวหน้าครอบครัว
  const householdData = {
    householdCode: document.getElementById('householdCode').value,
    name: document.getElementById('householdName').value,
    photo: getPhotoData('householdPhotoPreview'),
    phone: document.getElementById('householdPhone').value,
    houseNumber: document.getElementById('houseNumber').value,
    roofCount: document.getElementById('roofCount').value,
    householdCount: document.getElementById('householdCount').value,
    familyCount: document.getElementById('familyCount').value,
    registryBookCount: document.getElementById('registryBookCount').value,
    registryNumber: document.getElementById('registryNumber').value,
    familyMemberCount: document.getElementById('familyMemberCount').value,
    pageCount: document.getElementById('pageCount').value,
    unit: document.getElementById('unit').value,
    rentalLocation: document.getElementById('rentalLocation').value,
    monthlyIncome: document.getElementById('monthlyIncome').value || '0',
    housePosition: document.getElementById('housePosition').value,
    village: document.getElementById('village').value,
    district: document.getElementById('district').value,
    province: document.getElementById('province').value,
    villageParticipation: document.getElementById('villageParticipation').value,
    userCode: currentUser ? currentUser.code : '',
    userName: currentUser ? currentUser.name : '',
    members: []
  };
  
  console.log('Household data collected:', householdData);
  
  // รวบรวมข้อมูลสมาชิก
  const memberForms = document.querySelectorAll('#membersContainer .member-section');
  console.log('Found member forms:', memberForms.length);
  
  memberForms.forEach((form, index) => {
    const counterId = form.id.split('-')[1];
    console.log('Processing member form:', counterId);
    
  const member = {
  memberCode: form.querySelector('.memberCode') ? form.querySelector('.memberCode').value : '',
  name: form.querySelector('.memberName') ? form.querySelector('.memberName').value : '',
  photo: getPhotoData(`memberPhotoPreview${counterId}`), // จะได้ URL เดียวกันถ้าเป็นหัวหน้าครอบครัว
      gender: form.querySelector('.memberGender') ? form.querySelector('.memberGender').value : '',
      birthDate: `${form.querySelector('.birthDay') ? form.querySelector('.birthDay').value : ''}/${form.querySelector('.birthMonth') ? form.querySelector('.birthMonth').value : ''}/${form.querySelector('.birthYear') ? form.querySelector('.birthYear').value : ''}`,
      relationship: form.querySelector('.memberRelationship') ? form.querySelector('.memberRelationship').value : '',
      occupation: form.querySelector('.memberOccupation') ? form.querySelector('.memberOccupation').value : '',
      ethnicity: form.querySelector('.memberEthnicity') ? form.querySelector('.memberEthnicity').value : '',
      bodyComplete: form.querySelector('.memberBodyComplete') ? form.querySelector('.memberBodyComplete').value : '',
      insurance: form.querySelector('.memberInsurance') ? form.querySelector('.memberInsurance').value : '',
      disease: form.querySelector('.memberDisease') ? form.querySelector('.memberDisease').value : '',
      education: form.querySelector('.memberEducation') ? form.querySelector('.memberEducation').value : '',
      religion: form.querySelector('.memberReligion') ? form.querySelector('.memberReligion').value : '',
      maritalStatus: form.querySelector('.memberMaritalStatus') ? form.querySelector('.memberMaritalStatus').value : '',
      inRegistry: form.querySelector('.memberInRegistry') ? form.querySelector('.memberInRegistry').value : '',
      actualResident: form.querySelector('.memberActualResident') ? form.querySelector('.memberActualResident').value : '',
      phone: form.querySelector('.memberPhone') ? form.querySelector('.memberPhone').value : '',
      village: householdData.village,
      district: householdData.district,
      province: householdData.province,
      unit: householdData.unit,
      housePosition: householdData.housePosition
    };
    
    console.log('Member data:', member);
    householdData.members.push(member);
  });
  
  console.log('Final household data:', householdData);
  showLoading();
  
  // บันทึกข้อมูล
  if (householdData.householdCode) {
    console.log('Updating existing household...');
    google.script.run
      .withSuccessHandler(handleSaveSuccess)
      .withFailureHandler(handleSaveFailure)
      .updateHousehold(householdData, villageSheetId);
  } else {
    console.log('Saving new household...');
    google.script.run
      .withSuccessHandler(handleSaveSuccess)
      .withFailureHandler(handleSaveFailure)
      .saveHousehold(householdData, villageSheetId);
  }
  
  function handleSaveSuccess(result) {
    console.log('Save success:', result);
    
    if (result.success) {
      if (result.householdCode) {
        householdData.householdCode = result.householdCode;
      }
      
      const existingIndex = householdsData.findIndex(h => h.householdCode === householdData.householdCode);
      if (existingIndex >= 0) {
        householdsData[existingIndex] = householdData;
      } else {
        householdsData.push(householdData);
      }
      
      saveToIndexedDB('households', householdData);
      
      hideLoading();
      showToast(result.message, 'success');
      closeHouseholdForm();
      loadPopulationData();
    } else {
      hideLoading();
      showToast(result.message, 'error');
    }
  }
  
  function handleSaveFailure(error) {
    console.error('Save failed:', error);
    
    saveToSyncQueue('save', householdData);
    
    if (!householdData.householdCode) {
      householdData.householdCode = generateRandomCode(13);
    }
    
    const existingIndex = householdsData.findIndex(h => h.householdCode === householdData.householdCode);
    if (existingIndex >= 0) {
      householdsData[existingIndex] = householdData;
    } else {
      householdsData.push(householdData);
    }
    
    saveToIndexedDB('households', householdData);
    
    hideLoading();
    showToast('ບັນທຶກແບບອອບໄລນ໌ສຳເລັດ ຈະ Sync ເມື່ອມີອິນເຕີເນັດ', 'success');
    closeHouseholdForm();
    loadPopulationData();
  }
});

function getPhotoData(previewId) {
  const preview = document.getElementById(previewId);
  if (!preview) return '';
  
  const img = preview.querySelector('img');
  if (!img || !img.src) return '';
  
  // ✅ ถ้าเป็นรูปจากหัวหน้าครอบครัว ให้คืน URL เดิมเลย (ไม่อัปโหลดซ้ำ)
  if (preview.getAttribute('data-is-household-photo') === 'true') {
    const householdPhotoUrl = preview.getAttribute('data-household-photo-url');
    
    console.log('📸 Reusing household photo URL (same file, no duplicate):');
    console.log('URL:', householdPhotoUrl);
    
    // คืน URL ที่เป็น https:// เลย (ไม่ใช่ data:image)
    if (householdPhotoUrl && householdPhotoUrl.startsWith('https://')) {
      return householdPhotoUrl; // ใช้ลิงค์เดียวกัน ไม่อัปโหลดใหม่
    }
    
    // ถ้ายังเป็น data:image (ยังไม่ได้อัปโหลด) ให้คืนค่าไป
    return img.src;
  }
  
  // กรณีปกติ - รูปสมาชิกทั่วไป
  return img.src;
}

    function generateRandomCode(length) {
      let code = '';
      for (let i = 0; i < length; i++) {
        code += Math.floor(Math.random() * 10);
      }
      return code;
    }

    // ===================================
    // EDIT HOUSEHOLD
    // ===================================
    function editHousehold(householdCode) {
      const household = householdsData.find(h => h.householdCode === householdCode);
      if (!household) {
        showToast('ບໍ່ພົບຂໍ້ມູນຄອບຄົວ', 'error');
        return;
      }
      
      document.getElementById('formTitle').textContent = '✏️ ແກ້ໄຂຂໍ້ມູນຄອບຄົວ';
      document.getElementById('householdCode').value = household.householdCode;
      document.getElementById('householdName').value = household.name || '';
      document.getElementById('householdPhone').value = household.phone || '';
      document.getElementById('houseNumber').value = household.houseNumber || '';
      document.getElementById('roofCount').value = household.roofCount || '';
      document.getElementById('householdCount').value = household.householdCount || '';
      document.getElementById('familyCount').value = household.familyCount || '';
      document.getElementById('registryBookCount').value = household.registryBookCount || '';
      document.getElementById('registryNumber').value = household.registryNumber || '';
      document.getElementById('familyMemberCount').value = household.familyMemberCount || '';
      document.getElementById('pageCount').value = household.pageCount || '';
      document.getElementById('unit').value = household.unit || '';
      document.getElementById('rentalLocation').value = household.rentalLocation || '';
      document.getElementById('monthlyIncome').value = household.monthlyIncome || '';
      document.getElementById('housePosition').value = household.housePosition || '';
      document.getElementById('village').value = household.village || '';
      document.getElementById('district').value = household.district || '';
     document.getElementById('province').value = household.province || '';

// เพิ่มบรรทัดเหล่านี้
if (household.villageParticipation) {
  document.getElementById('villageParticipation').value = household.villageParticipation;
  
  // แสดง display
  const participationTexts = {
    'excellent': '⭐⭐⭐⭐⭐ ມີສ່ວນຮ່ວມດີເລີດ',
    'verygood': '⭐⭐⭐⭐ ມີສ່ວນຮ່ວມດີຫຼາຍ',
    'moderate': '⭐⭐⭐ ມີສ່ວນຮ່ວມປານກາງ',
    'lacking': '⭐ ຂາດການມີສ່ວນຮ່ວມ'
  };
  
  const display = document.getElementById('participationDisplay');
  const text = document.getElementById('participationText');
  
  if (participationTexts[household.villageParticipation]) {
    text.textContent = participationTexts[household.villageParticipation];
    display.className = '';
    display.classList.add(household.villageParticipation);
    display.style.display = 'block';
  }
}
      
      const photoPreview = document.getElementById('householdPhotoPreview');
      if (household.photo) {
        photoPreview.innerHTML = `<img src="${household.photo}" alt="Photo">`;
      } else {
        photoPreview.innerHTML = '<div class="placeholder">❓</div>';
      }
      
      const membersContainer = document.getElementById('membersContainer');
      membersContainer.innerHTML = '';
      memberCounter = 0;
      
      if (household.members && household.members.length > 0) {
        household.members.forEach(member => {
          memberCounter++;
          const memberDiv = document.createElement('div');
          memberDiv.className = 'form-section';
          memberDiv.id = `member-${memberCounter}`;
          memberDiv.innerHTML = getMemberFormHTML(memberCounter, member);
          membersContainer.appendChild(memberDiv);
        });
      }
      
      populateDataLists();
      populateRentalLocationList();
      document.getElementById('householdFormModal').classList.add('active');
    }

    function editMember(memberCode) {
      let targetHousehold = null;
      let targetMember = null;
      
      for (let household of householdsData) {
        if (household.members) {
          const member = household.members.find(m => m.memberCode === memberCode);
          if (member) {
            targetHousehold = household;
            targetMember = member;
            break;
          }
        }
      }
      
      if (!targetMember) {
        showToast('ບໍ່ພົບຂໍ້ມູນສະມາຊິກ', 'error');
        return;
      }
      
      editHousehold(targetHousehold.householdCode);
    }

 function showDeleteModal(type, code) {
  deleteTarget = { type, code };
  selectedReason = null;
  
  const optionsContainer = document.getElementById('deleteReasonOptions');
  optionsContainer.innerHTML = '';
  
  // Set title
  const title = type === 'member' ? 
    '⚠️ ກະລຸນາເລືອກເຫດຜົນການລົບສະມາຊິກ' : 
    '⚠️ ກະລຸນາເລືອກເຫດຜົນການລົບຄອບຄົວ';
  document.getElementById('deleteModalTitle').textContent = title;
  
  // Set options based on type
  let reasons = [];
  if (type === 'member') {
    reasons = [
      { value: 1, text: '1. ຍົກຍ້າຍອອກ' },
      { value: 2, text: '2. ເສຍຊີວິດ' },
      { value: 3, text: '3. ຂໍ້ມູນບໍ່ຖືກຕ້ອງ' }
    ];
  } else {
    reasons = [
      { value: 1, text: '1. ຍົກຍ້າຍອອກ' },
      { value: 3, text: '2. ຂໍ້ມູນບໍ່ຖືກຕ້ອງ' }
    ];
  }
  
  // Create reason options
  reasons.forEach(reason => {
    const optionDiv = document.createElement('div');
    optionDiv.className = 'reason-option';
    optionDiv.onclick = () => selectReason(reason.value);
    
    optionDiv.innerHTML = `
      <input type="radio" name="deleteReason" value="${reason.value}" id="reason${reason.value}">
      <label for="reason${reason.value}">${reason.text}</label>
    `;
    
    optionsContainer.appendChild(optionDiv);
  });
  
  document.getElementById('confirmDeleteBtn').disabled = true;
  document.getElementById('deleteReasonModal').classList.add('active');
}

    function closeDeleteModal() {
      document.getElementById('deleteReasonModal').classList.remove('active');
      deleteTarget = null;
      selectedReason = null;
    }

    function selectReason(reason) {
      selectedReason = reason;
      document.querySelectorAll('.reason-option').forEach(el => el.classList.remove('selected'));
      document.getElementById(`reason${reason}`).closest('.reason-option').classList.add('selected');
      document.getElementById(`reason${reason}`).checked = true;
      document.getElementById('confirmDeleteBtn').disabled = false;
    }

    function confirmDelete() {
      if (!deleteTarget || !selectedReason) return;
      
      const reasonTexts = {
        1: 'ຍົກຍ້າຍອອກ',
        2: 'ເສຍຊີວິດ',
        3: 'ຂໍ້ມູນບໍ່ຖືກຕ້ອງ'
      };
      
      showLoading();
      
      if (deleteTarget.type === 'member') {
        google.script.run
          .withSuccessHandler(function(result) {
            if (result.success) {
              householdsData.forEach(household => {
                if (household.members) {
                  household.members = household.members.filter(m => m.memberCode !== deleteTarget.code);
                  saveToIndexedDB('households', household);
                }
              });
              
              hideLoading();
              showToast(result.message, 'success');
              closeDeleteModal();
              loadPopulationData();
            } else {
              hideLoading();
              showToast(result.message, 'error');
            }
          })
          .withFailureHandler(function(error) {
            saveToSyncQueue('deleteMember', { memberCode: deleteTarget.code, reason: reasonTexts[selectedReason] });
            
            householdsData.forEach(household => {
              if (household.members) {
                household.members = household.members.filter(m => m.memberCode !== deleteTarget.code);
                saveToIndexedDB('households', household);
              }
            });
            
            hideLoading();
            showToast('ລົບແບບອອບໄລນ໌ສຳເລັດ ຈະ Sync ເມື່ອມີອິນເຕີເນັດ', 'success');
            closeDeleteModal();
            loadPopulationData();
          })
          .deleteMember(deleteTarget.code, reasonTexts[selectedReason], villageSheetId);
      } else {
        google.script.run
          .withSuccessHandler(function(result) {
            if (result.success) {
              householdsData = householdsData.filter(h => h.householdCode !== deleteTarget.code);
              deleteFromIndexedDB('households', deleteTarget.code);
              
              hideLoading();
              showToast(result.message, 'success');
              closeDeleteModal();
              loadPopulationData();
            } else {
              hideLoading();
              showToast(result.message, 'error');
            }
          })
          .withFailureHandler(function(error) {
            saveToSyncQueue('deleteHousehold', { householdCode: deleteTarget.code, reason: reasonTexts[selectedReason] });
            
            householdsData = householdsData.filter(h => h.householdCode !== deleteTarget.code);
            deleteFromIndexedDB('households', deleteTarget.code);
            
            hideLoading();
            showToast('ລົບແບບອອບໄລນ໌ສຳເລັດ ຈະ Sync ເມື່ອມີອິນເຕີເນັດ', 'success');
            closeDeleteModal();
            loadPopulationData();
          })
          .deleteHousehold(deleteTarget.code, reasonTexts[selectedReason], villageSheetId);
      }
    }

    // ===================================
    // SYNC QUEUE
    // ===================================
    function saveToSyncQueue(action, data) {
      if (!db) return;
      
      const syncItem = {
        action: action,
        data: data,
        timestamp: new Date().getTime()
      };
      
      const transaction = db.transaction(['syncQueue'], 'readwrite');
      const store = transaction.objectStore('syncQueue');
      store.add(syncItem);
    }

    function processSyncQueue() {
      if (!db) return;
      
      const transaction = db.transaction(['syncQueue'], 'readonly');
      const store = transaction.objectStore('syncQueue');
      const request = store.getAll();
      
      request.onsuccess = function() {
        const items = request.result;
        
        items.forEach(item => {
          if (item.action === 'save') {
            google.script.run
              .withSuccessHandler(function(result) {
                if (result.success) {
                  const tx = db.transaction(['syncQueue'], 'readwrite');
                  tx.objectStore('syncQueue').delete(item.id);
                }
              })
              .saveHousehold(item.data, villageSheetId);
          } else if (item.action === 'deleteMember') {
            google.script.run
              .withSuccessHandler(function(result) {
                if (result.success) {
                  const tx = db.transaction(['syncQueue'], 'readwrite');
                  tx.objectStore('syncQueue').delete(item.id);
                }
              })
              .deleteMember(item.data.memberCode, item.data.reason, villageSheetId);
          } else if (item.action === 'deleteHousehold') {
            google.script.run
              .withSuccessHandler(function(result) {
                if (result.success) {
                  const tx = db.transaction(['syncQueue'], 'readwrite');
                  tx.objectStore('syncQueue').delete(item.id);
                }
              })
              .deleteHousehold(item.data.householdCode, item.data.reason, villageSheetId);
          }
        });
      };
    }

    setInterval(function() {
      if (navigator.onLine && db) {
        processSyncQueue();
      }
    }, 30000);

    // ===================================
    // UTILITY FUNCTIONS
    // ===================================
 function showLoading(targetCount = 0, message = 'ກຳລັງໂຫລດຂໍ້ມູນ...') {
  const loadingDiv = document.getElementById('loading');
  const counterDiv = document.getElementById('loadingCounter');
  const messageDiv = document.getElementById('loadingMessage');
  
  loadingDiv.classList.add('active');
  
  if (counterDiv) {
    counterDiv.textContent = '0';
  }
  
  if (messageDiv) {
    messageDiv.textContent = message;
  }
  
  // Animation counter
  if (targetCount > 0 && counterDiv) {
    let current = 0;
    const duration = 2000; // 2 วินาที
    const increment = targetCount / (duration / 50);
    
    const timer = setInterval(() => {
      current += increment;
      if (current >= targetCount) {
        current = targetCount;
        clearInterval(timer);
      }
      counterDiv.textContent = Math.floor(current);
    }, 50);
    
    // เก็บ timer ไว้เพื่อ clear ตอน hide
    loadingDiv.setAttribute('data-timer', timer);
  }
}

 function hideLoading() {
  const loadingDiv = document.getElementById('loading');
  
  // Clear timer ถ้ามี
  const timer = loadingDiv.getAttribute('data-timer');
  if (timer) {
    clearInterval(parseInt(timer));
    loadingDiv.removeAttribute('data-timer');
  }
  
  loadingDiv.classList.remove('active');
}

    function showToast(message, type) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.className = `toast ${type} active`;
      
      setTimeout(() => {
        toast.classList.remove('active');
      }, 3000);
    }
    // ===================================
// DEBUG: Test Login Data
// ===================================
function testLoginData() {
  console.log('Testing login data...');
  console.log('Current loginData:', loginData);
  
  if (loginData) {
    console.log('Provinces count:', loginData.provinces ? loginData.provinces.length : 0);
    console.log('Users count:', loginData.users ? loginData.users.length : 0);
    
    if (loginData.provinces && loginData.provinces.length > 0) {
      console.log('First province:', loginData.provinces[0]);
      
      const firstProvince = loginData.provinces[0];
      if (loginData.districts && loginData.districts[firstProvince]) {
        console.log('Districts in first province:', loginData.districts[firstProvince]);
      }
    }
    
    if (loginData.users && loginData.users.length > 0) {
      console.log('First 3 users:', loginData.users.slice(0, 3));
    }
  } else {
    console.log('No login data loaded');
  }
}
// ===================================
// DEBUG: Test Household Data
// ===================================
function debugHouseholdData() {
  console.clear();
  console.log('='.repeat(50));
  console.log('DEBUG HOUSEHOLD DATA');
  console.log('='.repeat(50));
  
  console.log('1. householdsData exists?', householdsData !== null && householdsData !== undefined);
  console.log('2. householdsData type:', typeof householdsData);
  console.log('3. householdsData is Array?', Array.isArray(householdsData));
  console.log('4. householdsData length:', householdsData.length);
  
  if (householdsData.length > 0) {
    console.log('5. First household:');
    console.log(householdsData[0]);
    
    if (householdsData[0].members) {
      console.log('6. First household members count:', householdsData[0].members.length);
      if (householdsData[0].members.length > 0) {
        console.log('7. First member of first household:');
        console.log(householdsData[0].members[0]);
      }
    }
  } else {
    console.log('ERROR: No households in householdsData array');
    console.log('Attempting to fetch from server...');
    fetchHouseholdsData();
  }
  
  console.log('='.repeat(50));
  
  // Check IndexedDB
  loadFromIndexedDB('households', null).then(data => {
    console.log('8. Data in IndexedDB:', data ? data.length : 0);
    if (data && data.length > 0) {
      console.log('9. First household from IndexedDB:', data[0]);
    }
  });
  
  alert('ກວດສອບ Console (F12) ເພື່ອເບິ່ງຜົນລັບ');
}
// ===================================
// Test Server Connection
// ===================================
function testServerConnection() {
  console.log('>>> Testing server connection...');
  showLoading();
  
  // Test 1: Get sheet names
  google.script.run
    .withSuccessHandler(function(result) {
      console.log('>>> Server test result:', result);
      
      hideLoading();
      
      let message = '📊 ຜົນການທົດສອບ:\n\n';
      message += '✅ ເຊື່ອມຕໍ່ເຊີບເວີສຳເລັດ\n\n';
      
      if (result.error) {
        message += '❌ ເກີດຂໍ້ຜິດພາດ:\n' + result.error + '\n\n';
      } else {
        if (result.householdExists) {
          message += '✅ ພົບ Sheet "ຫົວໜ້າຄອບຄົວ"\n';
          message += '   ຈຳນວນແຖວ: ' + result.householdRows + '\n\n';
        } else {
          message += '❌ ບໍ່ພົບ Sheet "ຫົວໜ້າຄອບຄົວ"\n\n';
        }
        
        if (result.memberExists) {
          message += '✅ ພົບ Sheet "ສະມາຊິກຄອບຄົວ"\n';
          message += '   ຈຳນວນແຖວ: ' + result.memberRows + '\n\n';
        } else {
          message += '❌ ບໍ່ພົບ Sheet "ສະມາຊິກຄອບຄົວ"\n\n';
        }
      }
      
      message += '\nກວດສອບ Console (F12) ເພື່ອເບິ່ງລາຍລະອຽດ';
      
      alert(message);
    })
    .withFailureHandler(function(error) {
      console.error('>>> Server test failed:', error);
      hideLoading();
      
      alert('❌ ບໍ່ສາມາດເຊື່ອມຕໍ່ເຊີບເວີໄດ້\n\n' + error.message + '\n\nກວດສອບ Console (F12) ເພື່ອເບິ່ງລາຍລະອຽດ');
    })
    .testDataExists();
}
// ===================================
// Edit Member Only (Highlight Mode)
// ===================================
function editMemberOnly(memberCode) {
  console.log('>>> Editing member only:', memberCode);
  
  // Find the member
  let targetHousehold = null;
  let targetMember = null;
  let memberIndex = -1;
  
  for (let household of householdsData) {
    if (household.members) {
      const index = household.members.findIndex(m => m.memberCode === memberCode);
      if (index >= 0) {
        targetHousehold = household;
        targetMember = household.members[index];
        memberIndex = index;
        break;
      }
    }
  }
  
  if (!targetMember) {
    showToast('ບໍ່ພົບຂໍ້ມູນສະມາຊິກ', 'error');
    return;
  }
  
  // Open form in edit mode
  document.getElementById('formTitle').textContent = '✏️ ແກ້ໄຂຂໍ້ມູນສະມາຊິກ: ' + targetMember.name;
  document.getElementById('householdCode').value = targetHousehold.householdCode;
  
  // Fill household data (readonly)
  fillHouseholdFormReadonly(targetHousehold);
  
  // Clear members container
  const membersContainer = document.getElementById('membersContainer');
  membersContainer.innerHTML = '';
  memberCounter = 0;
  
  // Add all members
  targetHousehold.members.forEach((member, index) => {
    memberCounter++;
    const memberDiv = document.createElement('div');
    memberDiv.className = 'form-section member-section';
    memberDiv.id = `member-${memberCounter}`;
    
    // Add editing class to target member
    if (index === memberIndex) {
      memberDiv.classList.add('member-editing');
      memberDiv.setAttribute('data-editable', 'true');
    } else {
      memberDiv.setAttribute('data-editable', 'false');
    }
    
    memberDiv.innerHTML = getMemberFormHTML(memberCounter, member, index === memberIndex);
    membersContainer.appendChild(memberDiv);
  });
  
  // Scroll to editing member after modal opens
  populateDataLists();
  document.getElementById('householdFormModal').classList.add('active');
  
  setTimeout(() => {
    const editingSection = document.querySelector('.member-editing');
    if (editingSection) {
      editingSection.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }, 300);
}

function fillHouseholdFormReadonly(household) {
  document.getElementById('householdName').value = household.name || '';
  document.getElementById('householdName').readOnly = true;
  document.getElementById('householdPhone').value = household.phone || '';
  document.getElementById('householdPhone').readOnly = true;
  document.getElementById('houseNumber').value = household.houseNumber || '';
  document.getElementById('houseNumber').readOnly = true;
  // ... fill other fields and set readonly
  
  const photoPreview = document.getElementById('householdPhotoPreview');
  if (household.photo) {
    photoPreview.innerHTML = `<img src="${household.photo}" alt="Photo">`;
  }
  
  // Disable photo upload
  document.getElementById('householdPhoto').disabled = true;
}
// ===================================
// Image Preview
// ===================================
function showImagePreview(imageSrc) {
  if (!imageSrc) return;
  
  const modal = document.getElementById('imagePreviewModal');
  const img = document.getElementById('imagePreviewImg');
  
  img.src = imageSrc;
  modal.classList.add('active');
}

function closeImagePreview() {
  document.getElementById('imagePreviewModal').classList.remove('active');
}





// ===================================
// LOCATION PICKER - FIXED VERSION
// ===================================
let map = null;
let marker = null;
let selectedLatLng = null;
let streetLayer = null;
let satelliteLayer = null;
let currentLayer = 'satellite';

function openLocationPicker() {
  document.getElementById('locationModal').classList.add('active');
  
  // Destroy old map if exists
  if (map) {
    map.remove();
    map = null;
  }
  
  // Wait for modal to be visible
  setTimeout(() => {
    initializeMap();
  }, 300);
}
function initializeMap() {
  // Default to Vientiane, Laos
  const defaultLat = 17.9757;
  const defaultLng = 102.6331;
  
  // Get current value if exists
  const currentValue = document.getElementById('housePosition').value;
  let initialLat = defaultLat;
  let initialLng = defaultLng;
  
  if (currentValue && currentValue.includes(',')) {
    const parts = currentValue.split(',');
    initialLat = parseFloat(parts[0].trim()) || defaultLat;
    initialLng = parseFloat(parts[1].trim()) || defaultLng;
  }
  
  // Create map
  map = L.map('map', {
    center: [initialLat, initialLng],
    zoom: 15,
    preferCanvas: true
  });
  
  // Create Street Map Layer
  streetLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '© OpenStreetMap',
    maxZoom: 19
  });
  
  // Create Satellite Layer
  satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
    attribution: '© Esri',
    maxZoom: 19
  });
  
  // Add satellite layer as default
  satelliteLayer.addTo(map);
  
  // Create custom beautiful marker
  const beautifulIcon = createCustomMarkerIcon();
  
  // Add marker with custom icon
  marker = L.marker([initialLat, initialLng], { 
    draggable: true,
    icon: beautifulIcon
  }).addTo(map);
  
  selectedLatLng = { lat: initialLat, lng: initialLng };
  updateLocationDisplay();
  
  // Update location when marker is dragged
  marker.on('dragend', function(e) {
    const pos = marker.getLatLng();
    selectedLatLng = { lat: pos.lat, lng: pos.lng };
    updateLocationDisplay();
  });
  
  // Update location when map is clicked
  map.on('click', function(e) {
    marker.setLatLng(e.latlng);
    selectedLatLng = { lat: e.latlng.lat, lng: e.latlng.lng };
    updateLocationDisplay();
  });
  
  // Force tiles to load
  map.invalidateSize();
  
  // Try to get user location
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      function(position) {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        map.setView([lat, lng], 17);
        marker.setLatLng([lat, lng]);
        selectedLatLng = { lat: lat, lng: lng };
        updateLocationDisplay();
        showToast('📍 ພົບຕຳແໜ່ງປັດຈຸບັນຂອງທ່ານ', 'success');
      },
      function(error) {
        console.log('Geolocation error:', error);
      }
    );
  }
}

function switchMapLayer(layerType) {
  if (!map) return;
  
  // Remove all layers
  if (streetLayer && map.hasLayer(streetLayer)) {
    map.removeLayer(streetLayer);
  }
  if (satelliteLayer && map.hasLayer(satelliteLayer)) {
    map.removeLayer(satelliteLayer);
  }
  
  // Add selected layer
  if (layerType === 'street') {
    streetLayer.addTo(map);
    currentLayer = 'street';
  } else {
    satelliteLayer.addTo(map);
    currentLayer = 'satellite';
  }
  
  // Update button states
  document.getElementById('btnStreetMap').classList.toggle('active', layerType === 'street');
  document.getElementById('btnSatellite').classList.toggle('active', layerType === 'satellite');
  
  // Force redraw
  setTimeout(() => {
    map.invalidateSize();
  }, 100);
}

function updateLocationDisplay() {
  if (selectedLatLng) {
    const lat = selectedLatLng.lat.toFixed(6);
    const lng = selectedLatLng.lng.toFixed(6);
    document.getElementById('selectedLocation').innerHTML = `
      <strong>Latitude:</strong> ${lat}<br>
      <strong>Longitude:</strong> ${lng}
    `;
  }
}

function confirmLocation() {
  if (selectedLatLng) {
    const lat = selectedLatLng.lat.toFixed(6);
    const lng = selectedLatLng.lng.toFixed(6);
    document.getElementById('housePosition').value = `${lat}, ${lng}`;
    showToast('ບັນທຶກຕໍາແໜ່ງສຳເລັດ ✅', 'success');
  }
  closeLocationPicker();
}

function closeLocationPicker() {
  document.getElementById('locationModal').classList.remove('active');
  if (map) {
    setTimeout(() => {
      map.remove();
      map = null;
    }, 300);
  }
}
// ===================================
// AUTO-CALCULATE FAMILY COUNTERS
// ===================================
function updateFamilyCounters() {
  const memberForms = document.querySelectorAll('#membersContainer .member-section');
  const totalMembers = memberForms.length;
  
  // นับเฉพาะคนที่ "ມີໜ້າໃນສໍາມະໂນຄົວ" = "ມີໜ້າ"
  let membersWithRegistry = 0;
  
  memberForms.forEach(form => {
    const inRegistryInput = form.querySelector('.memberInRegistry');
    if (inRegistryInput) {
      const value = inRegistryInput.value.trim();
      if (value === 'ມີໜ້າ') {
        membersWithRegistry++;
      }
    }
  });
  
  // Update displays
  const familyMemberCountField = document.getElementById('familyMemberCount');
  const pageCountField = document.getElementById('pageCount');
  
  if (familyMemberCountField) {
    familyMemberCountField.value = totalMembers;
  }
  
  if (pageCountField) {
    pageCountField.value = membersWithRegistry;
  }
  
  console.log('✅ Real-Time Update - Total:', totalMembers, 'มีໜ້າ:', membersWithRegistry);
}

// ✅ เพิ่ม Real-Time Listener (ป้องกัน Error)
let realTimeListenersAdded = false; // ป้องกันเพิ่มซ้ำ

function addRealTimeCounterListeners() {
  if (realTimeListenersAdded) {
    console.log('⚠️ Real-time listeners already added');
    return;
  }
  
  console.log('✅ Adding real-time counter listeners...');
  
  // ทำงานทุกครั้งที่มีการเปลี่ยนแปลง
  document.addEventListener('change', function(e) {
    try {
      if (e.target && e.target.classList && e.target.classList.contains('memberInRegistry')) {
        updateFamilyCounters();
      }
    } catch (error) {
      console.error('❌ Change event error:', error);
    }
  }, { passive: true });
  
  document.addEventListener('input', function(e) {
    try {
      if (e.target && e.target.classList && e.target.classList.contains('memberInRegistry')) {
        updateFamilyCounters();
      }
    } catch (error) {
      console.error('❌ Input event error:', error);
    }
  }, { passive: true });
  
  realTimeListenersAdded = true;
  console.log('✅ Real-time listeners added successfully');
}

// เรียกใช้ตอน DOM โหลดเสร็จ
// ✅ ใช้ window.onload แทน DOMContentLoaded (ปลอดภัยกว่า)
window.addEventListener('load', function() {
  console.log('✅ Page fully loaded');
  
  // เรียกฟังก์ชันต่างๆ ที่ต้องการ
  if (typeof addRealTimeCounterListeners === 'function') {
    addRealTimeCounterListeners();
  }
  
  if (typeof initializeMultiSelect === 'function') {
    initializeMultiSelect();
  }
});

function addRegistryChangeListeners() {
  const inRegistryInputs = document.querySelectorAll('.memberInRegistry');
  inRegistryInputs.forEach(input => {
    input.removeEventListener('change', updateFamilyCounters);
    input.removeEventListener('input', updateFamilyCounters);
    input.addEventListener('change', updateFamilyCounters);
    input.addEventListener('input', updateFamilyCounters);
  });
  
  // อัปเดตครั้งแรก
  updateFamilyCounters();
}
// ฟังก์ชันตรวจสอบความสัมพันธ์และดึงรูปหัวหน้าครอบครัวอัตโนมัติ (ปัญหาข้อ 6)
function checkRelationshipAndCopyPhoto(counterId) {
  const relationshipSelect = document.querySelector(`#member-${counterId} .relationship`);
  if (!relationshipSelect) return;
  
  const relationship = relationshipSelect.value;
  
  // ถ้าเลือกเป็น "ຫົວໜ້າຄອບຄົວ" ให้ดึงรูปจากฟอร์มหลัก
  if (relationship === "ຫົວໜ້າຄອບຄົວ") {
    const householdPhoto = document.getElementById("householdPhotoPreview");
    const memberPhotoPreview = document.getElementById(`memberPhotoPreview-${counterId}`);
    
    if (householdPhoto && memberPhotoPreview) {
      const img = householdPhoto.querySelector("img");
      if (img && img.src && img.src !== "") {
        // คัดลอกรูปจากหัวหน้าครอบครัว
        memberPhotoPreview.innerHTML = `<img src="${img.src}" alt="Member Photo">`;
        memberPhotoPreview.classList.add("has-image");
        
        // บันทึก URL รูปเดียวกันเพื่อไม่ให้อัปโหลดซ้ำ
        memberPhotoPreview.setAttribute("data-photo-url", img.src);
        memberPhotoPreview.setAttribute("data-is-head-photo", "true");
        
        showToast("ໃຊ້ຮູບຫົວໜ້າຄອບຄົວແບບອັດຕະໂນມັດ", "success");
      }
    }
  }
}

// ===================================
// IMAGE CROP & ROTATE FUNCTIONS
// ===================================
let scaleX = 1;
let scaleY = 1;

function openCropModal(file, previewId) {
  if (!file || !file.type.startsWith('image/')) {
    showToast('ກະລຸນາເລືອກໄຟລ์ຮູບພາບ', 'error');
    return;
  }
  
  currentCropPreviewId = previewId;
  const reader = new FileReader();
  
  reader.onload = function(e) {
    const cropImage = document.getElementById('cropImage');
    cropImage.src = e.target.result;
    
    // Destroy previous cropper if exists
    if (cropper) {
      cropper.destroy();
    }
    
    // Initialize Cropper.js
    cropper = new Cropper(cropImage, {
      aspectRatio: 1, // Default 1:1
      viewMode: 2,
      dragMode: 'move',
      autoCropArea: 0.8,
      restore: false,
      guides: true,
      center: true,
      highlight: false,
      cropBoxMovable: true,
      cropBoxResizable: true,
      toggleDragModeOnDblclick: false,
      background: false,
      responsive: true,
      checkOrientation: true
    });
    
    // Reset scales
    scaleX = 1;
    scaleY = 1;
    
    // Show modal
    document.getElementById('cropModal').classList.add('active');
  };
  
  reader.readAsDataURL(file);
}

function setAspectRatio(ratio) {
  if (cropper) {
    cropper.setAspectRatio(ratio);
  }
  
  // Update active button
  document.querySelectorAll('.aspect-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  event.target.classList.add('active');
}

function rotateCropImage(degree) {
  if (cropper) {
    cropper.rotate(degree);
  }
}

function flipCropImage(direction) {
  if (cropper) {
    if (direction === 'horizontal') {
      scaleX = -scaleX;
      cropper.scaleX(scaleX);
    } else {
      scaleY = -scaleY;
      cropper.scaleY(scaleY);
    }
  }
}

function zoomCropImage(ratio) {
  if (cropper) {
    cropper.zoom(ratio);
  }
}

function resetCrop() {
  if (cropper) {
    cropper.reset();
    scaleX = 1;
    scaleY = 1;
  }
}
// เพิ่มตัวแปร global
let householdPhotoData = null;

// แทนที่ฟังก์ชัน previewPhoto เดิมทั้งหมดด้วยโค้ดนี้
function previewPhoto(input, previewId) {
  const file = input.files[0];
  if (!file) return;
  
  if (!file.type.startsWith('image/')) {
    showToast('ກະລຸນາເລືອກໄຟລ໌ຮູບພາບ', 'error');
    return;
  }
  
  // ตรวจสอบว่าเป็นรูปหัวหน้าครอบครัวหรือไม่
  const isHouseholdPhoto = previewId === 'householdPhotoPreview';
  
  // เก็บ previewId ไว้ใน global
  currentCropPreviewId = previewId;
  
  // อ่านไฟล์และเปิด Crop Modal
  const reader = new FileReader();
  reader.onload = function(e) {
    const cropImage = document.getElementById('cropImage');
    cropImage.src = e.target.result;
    
   // ถ้าเป็นรูปหัวหน้าครอบครัว เก็บไว้ใน global variable
if (isHouseholdPhoto) {
  householdPhotoData = e.target.result;
  
  // ✅ อัปเดตรูปให้กับสมาชิกที่เป็นหัวหน้าครอบครัวอัตโนมัติ
  setTimeout(() => {
    updateHouseholdHeadPhotos(e.target.result);
  }, 100);
}
    
    // Destroy previous cropper if exists
    if (cropper) {
      cropper.destroy();
    }
    
    // Initialize Cropper.js
    cropper = new Cropper(cropImage, {
      aspectRatio: 1,
      viewMode: 2,
      dragMode: 'move',
      autoCropArea: 0.8,
      restore: false,
      guides: true,
      center: true,
      highlight: false,
      cropBoxMovable: true,
      cropBoxResizable: true,
      toggleDragModeOnDblclick: false,
      background: false,
      responsive: true,
      checkOrientation: true
    });
    
    // Reset scales
    scaleX = 1;
    scaleY = 1;
    
    // Show modal
    document.getElementById('cropModal').classList.add('active');
  };
  
  reader.readAsDataURL(file);
}
// ฟังก์ชันอัปเดตรูปให้กับสมาชิกที่เป็นหัวหน้าครอบครัว
function updateHouseholdHeadPhotos(photoUrl) {
  const container = document.getElementById('membersContainer');
  if (!container) return;
  
  const memberDivs = container.querySelectorAll('.member-section');
  
  memberDivs.forEach(div => {
    const relationshipInput = div.querySelector('.memberRelationship');
    
    if (relationshipInput && relationshipInput.value === 'ຫົວໜ້າຄອບຄົວ') {
      const photoPreview = div.querySelector('.photo-preview');
      if (photoPreview) {
        photoPreview.innerHTML = `<img src="${photoUrl}" alt="Photo" style="width: 100%; height: 100%; object-fit: cover;">`;
        photoPreview.setAttribute('data-is-household-photo', 'true');
        photoPreview.setAttribute('data-household-photo-url', photoUrl);
        
        console.log('✅ Auto-updated household head photo (same URL)');
      }
    }
  });
}
// แทนที่ฟังก์ชัน confirmCrop เดิมทั้งหมดด้วยโค้ดนี้
function confirmCrop() {
  if (!cropper || !currentCropPreviewId) return;
  
  const canvas = cropper.getCroppedCanvas({
    width: 800,
    height: 800,
    imageSmoothingEnabled: true,
    imageSmoothingQuality: 'high'
  });
  
  const croppedImage = canvas.toDataURL('image/png');
  
  // อัปเดตรูปตัวอย่าง
  const preview = document.getElementById(currentCropPreviewId);
  if (preview) {
    preview.innerHTML = `<img src="${croppedImage}" alt="Photo">`;
  }
  
 // ถ้าเป็นรูปหัวหน้าครอบครัว
if (currentCropPreviewId === 'householdPhotoPreview') {
  householdPhotoData = croppedImage;
  
  // ✅ ซิงค์ไปยังสมาชิกที่เป็นหัวหน้าครอบครัว (ใช้รูปเดียวกัน)
  setTimeout(() => {
    updateHouseholdHeadPhotos(croppedImage);
  }, 100);
}
  
  closeCropModal();
  showToast('ບັນທຶກຮູບພາບສຳເລັດ', 'success');
}
// ฟังก์ชันใหม่: ซิงค์รูปหัวหน้าครอบครัว (เพิ่มใหม่หลังฟังก์ชัน confirmCrop)
function syncHouseholdPhotoToMembers(photoData) {
  const container = document.getElementById('membersContainer');
  const memberDivs = container.querySelectorAll('.member-section');
  
  memberDivs.forEach(div => {
    const relationshipInput = div.querySelector('.memberRelationship');
    
    if (relationshipInput && (relationshipInput.value === 'ຫົວໜ້າຄອບຄົວ' || relationshipInput.value === 'หัวหน้าครอบครัว')) {
      const photoPreview = div.querySelector('.photo-preview');
      if (photoPreview) {
        photoPreview.innerHTML = `<img src="${photoData}" alt="Photo">`;
      }
    }
  });
}
// แทนที่ฟังก์ชัน handleRelationshipChange ทั้งหมดด้วยโค้ดนี้
function handleRelationshipChange(input, memberId) {
  if (!input) return;
  
  const selectedValue = input.value.trim();
  const photoWrapper = document.getElementById(`photoWrapper${memberId}`);
  const photoNotice = document.getElementById(`photoNotice${memberId}`);
  const photoPreview = document.getElementById(`memberPhotoPreview${memberId}`);
  const photoInput = document.getElementById(`memberPhoto${memberId}`);
  
  console.log('=== Relationship Change ===');
  console.log('Selected value:', selectedValue);
  console.log('Member ID:', memberId);
  
  // ถ้ายังไม่เลือกอะไร - ซ่อนส่วนรูปภาพ
  if (!selectedValue || selectedValue === '') {
    if (photoWrapper) photoWrapper.classList.remove('show');
    if (photoNotice) photoNotice.classList.remove('hidden');
    return;
  }
  
  // มีการเลือกแล้ว - แสดงส่วนรูปภาพ
  if (photoWrapper) photoWrapper.classList.add('show');
  if (photoNotice) photoNotice.classList.add('hidden');
  
  // ตรวจสอบว่าเป็น "ຫົວໜ້າຄອບຄົວ" หรือไม่
  const isHouseholdHead = (selectedValue === 'ຫົວໜ້າຄອບຄົວ');
  
  console.log('Is household head:', isHouseholdHead);
  
  if (isHouseholdHead) {
    // กรณีเป็นหัวหน้าครอบครัว - ใช้รูปเดียวกัน
    console.log('>>> Trying to get household photo...');
    
    const householdPhotoPreview = document.getElementById('householdPhotoPreview');
    console.log('Household photo preview element:', householdPhotoPreview);
    
    if (householdPhotoPreview) {
      const householdImg = householdPhotoPreview.querySelector('img');
      console.log('Household img element:', householdImg);
      console.log('Household img src:', householdImg ? householdImg.src : 'No img');
      
      if (householdImg && householdImg.src && 
          (householdImg.src.startsWith('data:image') || householdImg.src.startsWith('https://'))) {
        // มีรูป - ใช้รูปเดียวกัน
        console.log('✅ Using same photo (same URL, no duplicate)...');
        
        if (photoPreview) {
          // วางรูปเดียวกัน
          photoPreview.innerHTML = `<img src="${householdImg.src}" alt="Photo" style="width: 100%; height: 100%; object-fit: cover;">`;
          
          // **สำคัญ!** เก็บ flag ว่าเป็นรูปจากหัวหน้าครอบครัว
          photoPreview.setAttribute('data-is-household-photo', 'true');
          photoPreview.setAttribute('data-household-photo-url', householdImg.src);
        }
        
        // ปิดการอัพโหลดใหม่
        if (photoInput) {
          photoInput.disabled = true;
          photoInput.value = ''; // ล้างค่า input
        }
        
        // แสดงข้อความแจ้งเตือน
        const memberDiv = document.getElementById(`member-${memberId}`);
        if (memberDiv) {
          const photoUploadDiv = memberDiv.querySelector('.photo-upload');
          if (photoUploadDiv) {
            photoUploadDiv.style.cursor = 'not-allowed';
            photoUploadDiv.style.opacity = '0.7';
            photoUploadDiv.onclick = null; // ปิดการคลิก
            
            // ลบข้อความเก่าก่อน
            const oldNotice = photoUploadDiv.querySelector('.head-notice');
            if (oldNotice) oldNotice.remove();
            
            // เพิ่มข้อความใหม่
            const noticeDiv = document.createElement('p');
            noticeDiv.className = 'head-notice';
            noticeDiv.style.cssText = 'background: #fff3cd; color: #856404; padding: 8px; border-radius: 5px; margin-top: 8px; font-size: 12px; text-align: center; border: 2px solid #ffc107;';
            noticeDiv.innerHTML = '🔒 ໃຊ້ຮູບຈາກຫົວໜ້າຄອບຄົວ (ລິງຄ์ເດຽວກັນ)<br><small>ບໍ່ອັບໂຫລດຊ້ຳ - ປະຫຍັດພື້ນທີ່</small>';
            photoUploadDiv.appendChild(noticeDiv);
          }
        }
        
        showToast('✅ ໃຊ້ຮູບຫົວໜ້າຄອບຄົວ (ລິງຄ์ເດຽວກັນ)', 'success');
        
      } else {
        // ยังไม่มีรูป
        console.log('❌ No household photo yet');
        showToast('⚠️ ກະລຸນາອັບໂຫລດຮູບຫົວໜ້າຄອບຄົວກ່ອນ', 'error');
        
        if (photoPreview) {
          photoPreview.innerHTML = '<div class="placeholder" style="font-size: 60px; color: #ccc;">❓</div>';
          photoPreview.removeAttribute('data-is-household-photo');
          photoPreview.removeAttribute('data-household-photo-url');
        }
        
        // ปิดการอัพโหลด
        if (photoInput) {
          photoInput.disabled = true;
        }
      }
      
    } else {
      console.log('❌ Cannot find household photo preview element');
      showToast('❌ ບໍ່ພົບສ່ວນຮູບຫົວໜ້າຄອບຄົວ', 'error');
    }
    
  } else {
    // กรณีไม่ใช่หัวหน้าครอบครัว - อนุญาตให้อัพโหลดรูปได้
    console.log('>>> Not household head - enable photo upload');
    
    // ลบ flag
    if (photoPreview) {
      photoPreview.removeAttribute('data-is-household-photo');
      photoPreview.removeAttribute('data-household-photo-url');
    }
    
    // เปิดการอัพโหลด
    if (photoInput) {
      photoInput.disabled = false;
    }
    
    // ลบข้อความแจ้งเตือน
    const memberDiv = document.getElementById(`member-${memberId}`);
    if (memberDiv) {
      const photoUploadDiv = memberDiv.querySelector('.photo-upload');
      if (photoUploadDiv) {
        photoUploadDiv.style.cursor = 'pointer';
        photoUploadDiv.style.opacity = '1';
        photoUploadDiv.onclick = function() {
          document.getElementById(`memberPhoto${memberId}`).click();
        };
        
        const oldNotice = photoUploadDiv.querySelector('.head-notice');
        if (oldNotice) oldNotice.remove();
      }
    }
  }
}

function closeCropModal() {
  document.getElementById('cropModal').classList.remove('active');
  if (cropper) {
    cropper.destroy();
    cropper = null;
  }
}

// Function to check relationship input
function checkRelationshipInput(memberCounter) {
  const memberForm = document.getElementById(`member-${memberCounter}`);
  if (!memberForm) return;
  
  const relationshipInput = memberForm.querySelector('.relationship');
  const photoWrapper = document.getElementById(`photoWrapper${memberCounter}`);
  const photoNotice = document.getElementById(`photoNotice${memberCounter}`);
  
  if (!relationshipInput || !photoWrapper || !photoNotice) return;
  
  const hasRelationship = relationshipInput.value.trim() !== '';
  
  if (hasRelationship) {
    // Show photo upload
    photoWrapper.classList.add('show');
    photoNotice.classList.add('hidden');
  } else {
    // Hide photo upload
    photoWrapper.classList.remove('show');
    photoNotice.classList.remove('hidden');
  }
}

// ✅ FIXED: เมื่อเปลี่ยนสายพัวพัน ให้ล้างรูปถ้าไม่ใช่ "ຫົວໜ້າຄອບຄົວ"
function handleRelationshipChange_ClearPhoto(memberId) {
  const memberDiv = document.getElementById(`member-${memberId}`);
  if (!memberDiv) return;
  
  const relationshipInput = memberDiv.querySelector('.memberRelationship');
  if (!relationshipInput) return;
  
  const selectedValue = relationshipInput.value.trim();
  const photoPreview = document.getElementById(`memberPhotoPreview${memberId}`);
  const photoInput = document.getElementById(`memberPhoto${memberId}`);
  
  // ถ้าเลือกอื่นที่ไม่ใช่ "ຫົວໜ້າຄອບຄົວ" → ล้างรูปเก่า
  if (selectedValue !== 'ຫົວໜ້າຄອບຄົວ') {
    // ล้างรูปเก่า
    if (photoPreview) {
      photoPreview.innerHTML = '<div class="placeholder" style="font-size: 60px; color: #ccc;">📷</div>';
      // ลบ flag
      photoPreview.removeAttribute('data-is-household-photo');
      photoPreview.removeAttribute('data-household-photo-url');
    }
    
    // เปิดการอัพโหลด
    if (photoInput) {
      photoInput.disabled = false;
      photoInput.value = ''; // ล้าง input
    }
    
    // ลบข้อความ "🔒"
    if (memberDiv) {
      const headNotice = memberDiv.querySelector('.head-notice');
      if (headNotice) {
        headNotice.remove();
      }
      const photoUploadDiv = memberDiv.querySelector('.photo-upload');
      if (photoUploadDiv) {
        photoUploadDiv.style.opacity = '1';
        photoUploadDiv.style.cursor = 'pointer';
        photoUploadDiv.onclick = function() {
          document.getElementById(`memberPhoto${memberId}`).click();
        };
      }
    }
  }
}

// Initialize photo visibility when editing existing members
function initializePhotoVisibility() {
  const memberForms = document.querySelectorAll('.member-section');
  memberForms.forEach((form, index) => {
    const counter = index + 1;
    checkRelationshipInput(counter);
  });
}
// ===================================
// REGISTRY MANAGEMENT
// ===================================
function openRegistryModal() {
  // Reset registry data completely (FIX 2)
  registryData = {
    old: { enabled: false, count: 0, numbers: [], dates: [] },
    new: { enabled: false, count: 0, numbers: [], dates: [] },
    none: false
  };
  
  // Reset UI
  document.getElementById('chkOldRegistry').checked = false;
  document.getElementById('chkNewRegistry').checked = false;
  document.getElementById('chkNoRegistry').checked = false;
  document.getElementById('oldRegistryCount').value = 0;
  document.getElementById('newRegistryCount').value = 0;
  document.getElementById('oldRegistryNumbers').innerHTML = '';
  document.getElementById('newRegistryNumbers').innerHTML = '';
  document.getElementById('oldRegistryOption').classList.remove('selected');
  document.getElementById('newRegistryOption').classList.remove('selected');
  document.getElementById('noRegistryOption').classList.remove('selected');
  document.getElementById('oldRegistryDetails').classList.remove('active');
  document.getElementById('newRegistryDetails').classList.remove('active');
  
  // Load existing data if editing
  loadExistingRegistryData();
  
  updateRegistrySummary();
  document.getElementById('registryModal').classList.add('active');
}

function closeRegistryModal() {
  document.getElementById('registryModal').classList.remove('active');
}

function loadExistingRegistryData() {
  // Load from form if exists
  const bookCount = parseInt(document.getElementById('registryBookCount').value) || 0;
  const registryNumber = document.getElementById('registryNumber').value;
  
  if (bookCount > 0 && registryNumber) {
    // Parse existing data
    const parts = registryNumber.split('|');
    
    // Parse old registry
    if (parts.length >= 1 && parts[0].includes(':')) {
      const oldPart = parts[0].split(':')[1].trim();
      if (oldPart) {
        const oldItems = oldPart.split(',').map(n => n.trim()).filter(n => n);
        const oldNumbers = [];
        const oldDates = [];
        
        oldItems.forEach(item => {
          const itemParts = item.split(' (');
          oldNumbers.push(itemParts[0]);
          if (itemParts[1]) {
            oldDates.push(itemParts[1].replace(')', ''));
          } else {
            oldDates.push('');
          }
        });
        
        registryData.old.enabled = true;
        registryData.old.count = oldNumbers.length;
        registryData.old.numbers = oldNumbers;
        registryData.old.dates = oldDates;
        
        document.getElementById('chkOldRegistry').checked = true;
        document.getElementById('oldRegistryCount').value = oldNumbers.length;
        updateOldRegistryNumbers();
        toggleRegistryOption('old');
      }
    }
    
    // Parse new registry
    if (parts.length >= 2 && parts[1].includes(':')) {
      const newPart = parts[1].split(':')[1].trim();
      if (newPart) {
        const newItems = newPart.split(',').map(n => n.trim()).filter(n => n);
        const newNumbers = [];
        const newDates = [];
        
        newItems.forEach(item => {
          const itemParts = item.split(' (');
          newNumbers.push(itemParts[0]);
          if (itemParts[1]) {
            newDates.push(itemParts[1].replace(')', ''));
          } else {
            newDates.push('');
          }
        });
        
        registryData.new.enabled = true;
        registryData.new.count = newNumbers.length;
        registryData.new.numbers = newNumbers;
        registryData.new.dates = newDates;
        
        document.getElementById('chkNewRegistry').checked = true;
        document.getElementById('newRegistryCount').value = newNumbers.length;
        updateNewRegistryNumbers();
        toggleRegistryOption('new');
      }
    }
  }
  
  updateRegistrySummary();
}

function toggleRegistryOption(type) {
  const checkbox = document.getElementById(`chk${type === 'old' ? 'Old' : type === 'new' ? 'New' : 'No'}Registry`);
  const details = document.getElementById(`${type}RegistryDetails`);
  const option = document.getElementById(`${type}RegistryOption`);
  
  if (type === 'none') {
    registryData.none = checkbox.checked;
    if (checkbox.checked) {
      option.classList.add('selected');
      // Uncheck other options
      document.getElementById('chkOldRegistry').checked = false;
      document.getElementById('chkNewRegistry').checked = false;
      registryData.old.enabled = false;
      registryData.new.enabled = false;
      document.getElementById('oldRegistryOption').classList.remove('selected');
      document.getElementById('newRegistryOption').classList.remove('selected');
      document.getElementById('oldRegistryDetails').classList.remove('active');
      document.getElementById('newRegistryDetails').classList.remove('active');
    } else {
      option.classList.remove('selected');
    }
  } else {
    const enabled = checkbox.checked;
    registryData[type].enabled = enabled;
    
    if (enabled) {
      option.classList.add('selected');
      details.classList.add('active');
      // Uncheck "none"
      document.getElementById('chkNoRegistry').checked = false;
      registryData.none = false;
      document.getElementById('noRegistryOption').classList.remove('selected');
    } else {
      option.classList.remove('selected');
      details.classList.remove('active');
      registryData[type].count = 0;
      registryData[type].numbers = [];
    }
  }
  
  updateRegistrySummary();
}

function updateOldRegistryNumbers() {
  const count = parseInt(document.getElementById('oldRegistryCount').value) || 0;
  const container = document.getElementById('oldRegistryNumbers');
  
  registryData.old.count = count;
  container.innerHTML = '';
  
  for (let i = 0; i < count; i++) {
    const existingNumber = registryData.old.numbers[i] || '';
    const existingDate = registryData.old.dates[i] || '';
    const dateParts = existingDate.split('/');
    
    const item = document.createElement('div');
    item.className = 'registry-number-item';
    item.innerHTML = `
      <label>ປື້ມທີ່ ${i + 1}:</label>
      <div class="registry-input-group">
        <input type="text" 
               class="number-input"
               placeholder="ເລກທີສໍາມະໂນຄົວເກົ່າ" 
               value="${existingNumber}"
               oninput="updateOldRegistryNumber(${i}, this.value)">
        <div class="date-inputs">
          <span>ວັນທີ່:</span>
          <input type="number" 
                 placeholder="ວ" 
                 min="1" max="31"
                 value="${dateParts[0] || ''}"
                 oninput="updateOldRegistryDate(${i}, 'day', this.value)">
          <span>/</span>
          <input type="number" 
                 placeholder="ດ" 
                 min="1" max="12"
                 value="${dateParts[1] || ''}"
                 oninput="updateOldRegistryDate(${i}, 'month', this.value)">
          <span>/</span>
          <input type="number" 
                 placeholder="ປີ" 
                 min="1900" max="2100"
                 value="${dateParts[2] || ''}"
                 oninput="updateOldRegistryDate(${i}, 'year', this.value)">
        </div>
      </div>
    `;
    container.appendChild(item);
  }
  
  updateRegistrySummary();
}


function updateNewRegistryNumbers() {
  const count = parseInt(document.getElementById('newRegistryCount').value) || 0;
  const container = document.getElementById('newRegistryNumbers');
  
  registryData.new.count = count;
  container.innerHTML = '';
  
  for (let i = 0; i < count; i++) {
    const existingNumber = registryData.new.numbers[i] || '';
    const existingDate = registryData.new.dates[i] || '';
    const dateParts = existingDate.split('/');
    
    const item = document.createElement('div');
    item.className = 'registry-number-item';
    item.innerHTML = `
      <label>ປື້ມທີ່ ${i + 1}:</label>
      <div class="registry-input-group">
        <input type="text" 
               class="number-input"
               placeholder="ເລກທີສໍາມະໂນຄົວໃໝ່" 
               value="${existingNumber}"
               oninput="updateNewRegistryNumber(${i}, this.value)">
        <div class="date-inputs">
          <span>ວັນທີ່:</span>
          <input type="number" 
                 placeholder="ວ" 
                 min="1" max="31"
                 value="${dateParts[0] || ''}"
                 oninput="updateNewRegistryDate(${i}, 'day', this.value)">
          <span>/</span>
          <input type="number" 
                 placeholder="ດ" 
                 min="1" max="12"
                 value="${dateParts[1] || ''}"
                 oninput="updateNewRegistryDate(${i}, 'month', this.value)">
          <span>/</span>
          <input type="number" 
                 placeholder="ປີ" 
                 min="1900" max="2100"
                 value="${dateParts[2] || ''}"
                 oninput="updateNewRegistryDate(${i}, 'year', this.value)">
        </div>
      </div>
    `;
    container.appendChild(item);
  }
  
  updateRegistrySummary();
}

function updateOldRegistryNumber(index, value) {
  if (!registryData.old.numbers) registryData.old.numbers = [];
  registryData.old.numbers[index] = value;
}

function updateNewRegistryNumber(index, value) {
  if (!registryData.new.numbers) registryData.new.numbers = [];
  registryData.new.numbers[index] = value;
}
function updateOldRegistryDate(index, type, value) {
  if (!registryData.old.dates) registryData.old.dates = [];
  if (!registryData.old.dates[index]) registryData.old.dates[index] = '';
  
  const parts = registryData.old.dates[index].split('/');
  const day = parts[0] || '';
  const month = parts[1] || '';
  const year = parts[2] || '';
  
  if (type === 'day') parts[0] = value;
  if (type === 'month') parts[1] = value;
  if (type === 'year') parts[2] = value;
  
  registryData.old.dates[index] = parts.join('/');
}
function updateNewRegistryDate(index, type, value) {
  if (!registryData.new.dates) registryData.new.dates = [];
  if (!registryData.new.dates[index]) registryData.new.dates[index] = '';
  
  const parts = registryData.new.dates[index].split('/');
  const day = parts[0] || '';
  const month = parts[1] || '';
  const year = parts[2] || '';
  
  if (type === 'day') parts[0] = value;
  if (type === 'month') parts[1] = value;
  if (type === 'year') parts[2] = value;
  
  registryData.new.dates[index] = parts.join('/');
}

function updateRegistrySummary() {
  const oldCount = registryData.old.enabled ? registryData.old.count : 0;
  const newCount = registryData.new.enabled ? registryData.new.count : 0;
  const totalCount = oldCount + newCount;
  
  document.getElementById('summaryOldCount').textContent = oldCount + ' ປື້ມ';
  document.getElementById('summaryNewCount').textContent = newCount + ' ປື້ມ';
  document.getElementById('summaryTotalCount').textContent = totalCount + ' ປື້ມ';
}

function confirmRegistry() {
  // Collect all registry numbers with dates
  const oldItems = [];
  const newItems = [];
  
  if (registryData.old.enabled) {
    for (let i = 0; i < registryData.old.count; i++) {
      const number = registryData.old.numbers[i] || '';
      const date = registryData.old.dates[i] || '';
      if (number.trim()) {
        if (date && date !== '//') {
          oldItems.push(`${number.trim()} (${date})`);
        } else {
          oldItems.push(number.trim());
        }
      }
    }
  }
  
  if (registryData.new.enabled) {
    for (let i = 0; i < registryData.new.count; i++) {
      const number = registryData.new.numbers[i] || '';
      const date = registryData.new.dates[i] || '';
      if (number.trim()) {
        if (date && date !== '//') {
          newItems.push(`${number.trim()} (${date})`);
        } else {
          newItems.push(number.trim());
        }
      }
    }
  }
  
  // Calculate total
  const totalBooks = oldItems.length + newItems.length;
  
  // Format registry number string
  let registryNumberText = '';
  if (oldItems.length > 0) {
    registryNumberText += 'ເກົ່າ: ' + oldItems.join(', ');
  }
  if (newItems.length > 0) {
    if (registryNumberText) registryNumberText += ' | ';
    registryNumberText += 'ໃໝ່: ' + newItems.join(', ');
  }
  
  // Update form fields
  document.getElementById('registryBookCount').value = totalBooks;
  document.getElementById('registryNumber').value = registryNumberText;
  
  // Show success message
  showToast(`ບັນທຶກສຳເລັດ: ${totalBooks} ປື້ມ`, 'success');
  
  closeRegistryModal();
}
// Variable for accuracy circle
let accuracyCircle = null;

// Function to go to current location
function goToMyLocation() {
  if (!navigator.geolocation) {
    showToast('ບຣາວເຊີບໍ່ຮອງຮັບການຊອກຫາຕຳແໜ່ງ', 'error');
    return;
  }
  
  showToast('ກຳລັງຊອກຫາຕຳແໜ່ງ...', 'success');
  
  navigator.geolocation.getCurrentPosition(
    function(position) {
      const lat = position.coords.latitude;
      const lng = position.coords.longitude;
      const accuracy = position.coords.accuracy;
      
      // Move map and marker
      map.setView([lat, lng], 18);
      marker.setLatLng([lat, lng]);
      selectedLatLng = { lat: lat, lng: lng };
      updateLocationDisplay();
      
      // Remove old accuracy circle if exists
      if (accuracyCircle) {
        map.removeLayer(accuracyCircle);
      }
      
      // Add accuracy circle
      accuracyCircle = L.circle([lat, lng], {
        radius: accuracy,
        color: '#4285F4',
        fillColor: '#4285F4',
        fillOpacity: 0.15,
        weight: 2
      }).addTo(map);
      
      // Show accuracy info
      showToast(`📍 ພົບຕຳແໜ່ງ! ຄວາມແມ່ນຍຳ: ${Math.round(accuracy)} ແມັດ`, 'success');
      
      // Bind popup to marker
      marker.bindPopup(`
        <div style="text-align: center;">
          <b>ຕຳແໜ່ງປັດຈຸບັນຂອງທ່ານ</b><br>
          ຄວາມແມ່ນຍຳ: ${Math.round(accuracy)} ແມັດ<br>
          <small>ວົງສີຟ້າ = ຂອບເຂດຄວາມຜິດພາດ</small>
        </div>
      `).openPopup();
    },
    function(error) {
      showToast('ບໍ່ສາມາດຊອກຫາຕຳແໜ່ງໄດ້: ' + error.message, 'error');
    },
    {
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 0
    }
  );
}

// Update marker dragging to remove accuracy circle
marker.on('dragstart', function() {
  if (accuracyCircle) {
    map.removeLayer(accuracyCircle);
    accuracyCircle = null;
  }
});
// Village Participation Functions
var selectedParticipation = null;

function openParticipationModal() {
  document.getElementById('participationModal').classList.add('active');
  
  // Reset selection
  selectedParticipation = null;
  document.querySelectorAll('.participation-option').forEach(function(el) {
    el.classList.remove('selected');
  });
  document.querySelectorAll('.participation-option input[type="radio"]').forEach(function(el) {
    el.checked = false;
  });
  document.getElementById('confirmParticipationBtn').disabled = true;
  
  // Check if there's existing value
  const currentValue = document.getElementById('villageParticipation').value;
  if (currentValue) {
    selectParticipation(currentValue);
  }
}

function closeParticipationModal() {
  document.getElementById('participationModal').classList.remove('active');
}

function selectParticipation(value) {
  // Set global variable
  window.selectedParticipation = value;
  
  // Update UI
  document.querySelectorAll('.participation-option').forEach(function(el) {
    el.classList.remove('selected');
    if (el.getAttribute('data-value') === value) {
      el.classList.add('selected');
    }
  });
  
  // Check radio button
  const radio = document.querySelector('input[name="participation"][value="' + value + '"]');
  if (radio) {
    radio.checked = true;
  }
  
  // Enable confirm button
  document.getElementById('confirmParticipationBtn').disabled = false;
}

function confirmParticipation() {
  if (!window.selectedParticipation) return;
  
  // Save value
  document.getElementById('villageParticipation').value = window.selectedParticipation;
  
  // Update display
  const participationTexts = {
    'excellent': '⭐⭐⭐⭐⭐ ມີສ່ວນຮ່ວມດີເລີດ',
    'verygood': '⭐⭐⭐⭐ ມີສ່ວນຮ່ວມດີຫຼາຍ',
    'moderate': '⭐⭐⭐ ມີສ່ວນຮ່ວມປານກາງ',
    'lacking': '⭐ ຂາດການມີສ່ວນຮ່ວມ'
  };
  
  const display = document.getElementById('participationDisplay');
  const text = document.getElementById('participationText');
  
  text.textContent = participationTexts[window.selectedParticipation];
  display.className = ''; // Clear classes
  display.classList.add(window.selectedParticipation);
  display.style.display = 'block';
  
  showToast('ບັນທຶກລະດັບການມີສ່ວນຮ່ວມສຳເລັດ', 'success');
  closeParticipationModal();
}

function createCustomMarkerIcon() {
  // Create beautiful custom marker icon
  const customIcon = L.divIcon({
    html: `
      <div class="custom-map-marker">
        <svg width="40" height="60" viewBox="0 0 40 60" xmlns="http://www.w3.org/2000/svg">
          <!-- Shadow -->
          <ellipse cx="20" cy="58" rx="10" ry="3" fill="#000000" opacity="0.3"/>
          <!-- Outer glow -->
          <path d="M20 0C8.95 0 0 8.95 0 20c0 15 20 40 20 40s20-25 20-40C40 8.95 31.05 0 20 0z" 
                fill="url(#grad1)" stroke="#fff" stroke-width="2" filter="url(#glow)"/>
          <!-- Inner circle -->
          <circle cx="20" cy="20" r="8" fill="#fff" opacity="0.9"/>
          <!-- Center dot -->
          <circle cx="20" cy="20" r="4" fill="#f44336"/>
          <!-- Gradient definition -->
          <defs>
            <linearGradient id="grad1" x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" style="stop-color:#f44336;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#d32f2f;stop-opacity:1" />
            </linearGradient>
            <filter id="glow">
              <feShadow dx="0" dy="0" stdDeviation="3" flood-color="#f44336" flood-opacity="0.5"/>
            </filter>
          </defs>
        </svg>
      </div>
    `,
    className: 'custom-beautiful-marker',
    iconSize: [40, 60],
    iconAnchor: [20, 60],
    popupAnchor: [0, -60]
  });
  
  return customIcon;
}
// ฟังก์ชันจัดการ Multi-Select
function initializeMultiSelect() {
  const diseaseTextareas = document.querySelectorAll('.multi-select-field');
  
  diseaseTextareas.forEach(textarea => {
    // สร้าง container สำหรับแสดง tags
    const tagsContainer = document.createElement('div');
    tagsContainer.className = 'disease-tags-container';
    tagsContainer.style.cssText = 'display: flex; flex-wrap: wrap; gap: 5px; margin-bottom: 10px;';
    
    textarea.parentElement.insertBefore(tagsContainer, textarea);
    
    // ถ้ามีข้อมูลเดิม แสดงเป็น tags
    if (textarea.value) {
      const diseases = textarea.value.split(',').map(d => d.trim()).filter(d => d);
      diseases.forEach(disease => {
        addDiseaseTag(disease, tagsContainer, textarea);
      });
    }
    
    // Event listener สำหรับ Enter
    textarea.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        const value = this.value.trim();
        
        if (value) {
          addDiseaseTag(value, tagsContainer, this);
          this.value = '';
        }
      }
    });
  });
}

function addDiseaseTag(disease, container, textarea) {
  const tag = document.createElement('span');
  tag.className = 'disease-tag';
  tag.style.cssText = 'background: #e3f2fd; color: #1976d2; padding: 5px 10px; border-radius: 15px; display: inline-flex; align-items: center; gap: 5px; font-size: 0.9rem;';
  tag.innerHTML = `
    ${disease}
    <span onclick="removeTag(this)" style="cursor: pointer; font-weight: bold; margin-left: 5px;">×</span>
  `;
  
  container.appendChild(tag);
  
  // อัปเดต textarea value
  updateDiseaseTextarea(textarea);
}

function removeTag(element) {
  const tag = element.parentElement;
  const container = tag.parentElement;
  const textarea = container.nextElementSibling;
  
  tag.remove();
  updateDiseaseTextarea(textarea);
}

function updateDiseaseTextarea(textarea) {
  const container = textarea.previousElementSibling;
  const tags = container.querySelectorAll('.disease-tag');
  const diseases = Array.from(tags).map(tag => tag.textContent.trim().replace('×', '').trim());
  
  textarea.value = diseases.join(', ');
}

// เรียกใช้ตอนเปิดฟอร์ม
// ✅ ใช้ window.onload แทน DOMContentLoaded (ปลอดภัยกว่า)
window.addEventListener('load', function() {
  console.log('✅ Page fully loaded');
  
  // เรียกฟังก์ชันต่างๆ ที่ต้องการ
  if (typeof addRealTimeCounterListeners === 'function') {
    addRealTimeCounterListeners();
  }
  
  if (typeof initializeMultiSelect === 'function') {
    initializeMultiSelect();
  }
});
// แทนที่ฟังก์ชัน handleDiseaseInput เดิมด้วยโค้ดนี้
function handleDiseaseInput(event, memberId) {
  const input = document.getElementById(`diseaseInput${memberId}`);
  const value = input.value.trim();
  
  // กด Enter เพื่อเพิ่มโรค
  if (event.key === 'Enter') {
    event.preventDefault();
    
    if (value) {
      addDiseaseTag(value, memberId);
      input.value = '';
    }
  }
  
  // Tab เพื่อเพิ่มโรค
  if (event.key === 'Tab' && value) {
    event.preventDefault();
    addDiseaseTag(value, memberId);
    input.value = '';
  }
}
// ฟังก์ชันเพื่อจับการเลือกจาก datalist (เพิ่มใหม่)
function setupDiseaseInputListeners(memberId) {
  const input = document.getElementById(`diseaseInput${memberId}`);
  if (!input) return;
  
  // เมื่อเลือกจาก datalist
  input.addEventListener('change', function() {
    const value = this.value.trim();
    if (value) {
      addDiseaseTag(value, memberId);
      this.value = '';
    }
  });
  
  // เมื่อ blur (ออกจาก input) และมีค่า
  input.addEventListener('blur', function() {
    setTimeout(() => {
      const value = this.value.trim();
      if (value) {
        addDiseaseTag(value, memberId);
        this.value = '';
      }
    }, 200);
  });
}
// แทนที่ฟังก์ชัน addDiseaseTag เดิมด้วยโค้ดนี้
function addDiseaseTag(disease, memberId) {
  const container = document.getElementById(`diseaseTagsContainer${memberId}`);
  const hiddenTextarea = document.getElementById(`diseaseHidden${memberId}`);
  
  if (!container || !hiddenTextarea) return;
  
  // ลบ placeholder ถ้ามี
  const placeholder = container.querySelector('.empty-placeholder');
  if (placeholder) {
    placeholder.remove();
  }
  
  // ตรวจสอบว่ามีโรคนี้แล้วหรือยัง
  const existingTags = container.querySelectorAll('.disease-tag');
  for (let tag of existingTags) {
    if (tag.getAttribute('data-disease') === disease) {
      showToast('⚠️ ມີພະຍາດນີ້ແລ້ວ', 'error');
      return;
    }
  }
  
  // สร้าง tag
  const tag = document.createElement('span');
  tag.className = 'disease-tag';
  tag.setAttribute('data-disease', disease);
  tag.style.cssText = 'background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); color: #1976d2; padding: 8px 12px; border-radius: 20px; display: inline-flex; align-items: center; gap: 8px; font-size: 0.9rem; box-shadow: 0 2px 5px rgba(0,0,0,0.1); transition: all 0.3s; animation: slideIn 0.3s ease;';
  tag.innerHTML = `
    <span style="font-weight: 500;">🔴 ${disease}</span>
    <span onclick="removeDiseaseTag(this, ${memberId})" 
          style="cursor: pointer; font-weight: bold; font-size: 1.2rem; color: #f44336; transition: transform 0.2s; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; border-radius: 50%; background: rgba(244,67,54,0.1);"
          onmouseover="this.style.transform='scale(1.3)'; this.style.background='rgba(244,67,54,0.2)'"
          onmouseout="this.style.transform='scale(1)'; this.style.background='rgba(244,67,54,0.1)'">×</span>
  `;
  
  container.appendChild(tag);
  
  // อัปเดต hidden textarea
  updateDiseaseTextarea(memberId);
  
  showToast('✅ ເພີ່ມພະຍາດສຳເລັດ', 'success');
}

// ฟังก์ชันลบ Tag โรค (เพิ่มใหม่)
function removeDiseaseTag(element, memberId) {
  const tag = element.parentElement;
  tag.style.transform = 'scale(0)';
  
  setTimeout(() => {
    tag.remove();
    updateDiseaseTextarea(memberId);
    showToast('ລົບພະຍາດສຳເລັດ', 'success');
  }, 200);
}

// ฟังก์ชันอัปเดต Textarea (เพิ่มใหม่)
function updateDiseaseTextarea(memberId) {
  const container = document.getElementById(`diseaseTagsContainer${memberId}`);
  const hiddenTextarea = document.getElementById(`diseaseHidden${memberId}`);
  
  if (!container || !hiddenTextarea) return;
  
  const tags = container.querySelectorAll('.disease-tag');
  const diseases = Array.from(tags).map(tag => tag.getAttribute('data-disease'));
  
  hiddenTextarea.value = diseases.join(', ');
}

// ฟังก์ชัน Initialize โรคที่มีอยู่แล้ว (เพิ่มใหม่)
function initializeExistingDiseases(memberId, diseasesString) {
  if (!diseasesString) return;
  
  const diseases = diseasesString.split(',').map(d => d.trim()).filter(d => d);
  diseases.forEach(disease => {
    addDiseaseTag(disease, memberId);
  });
}
// ฟังก์ชันเพิ่มโรคด้วยปุ่ม (เพิ่มใหม่)
function manualAddDisease(memberId) {
  const input = document.getElementById(`diseaseInput${memberId}`);
  const value = input.value.trim();
  
  if (value) {
    addDiseaseTag(value, memberId);
    input.value = '';
    input.focus();
  } else {
    showToast('ກະລຸນາພິມຊື່ພະຍາດກ່ອນ', 'error');
    input.focus();
  }
}
// ฟังก์ชันตรวจสอบและอัพเดต Relationship Options (เพิ่มใหม่)
function updateRelationshipOptions() {
  const memberForms = document.querySelectorAll('.member-section');
  let hasHouseholdHead = false;
  
  // ตรวจสอบว่ามีใครเลือก "ຫົວໜ້າຄອບຄົວ" แล้วหรือยัง
  memberForms.forEach(form => {
    const relationshipInput = form.querySelector('.memberRelationship');
    if (relationshipInput && relationshipInput.value.trim() === 'ຫົວໜ້າຄອບຄົວ') {
      hasHouseholdHead = true;
    }
  });
  
  // อัพเดต datalist ของทุกฟอร์ม
  const datalist = document.getElementById('relationshipList');
  if (datalist && optionsData && optionsData.H) {
    datalist.innerHTML = '';
    
    optionsData.H.forEach(option => {
      // ถ้ามีหัวหน้าครอบครัวแล้ว ไม่แสดง "ຫົວໜ້າຄອບຄົວ" ใน datalist
      if (hasHouseholdHead && option === 'ຫົວໜ້າຄອບຄົວ') {
        return; // skip
      }
      
      const optionEl = document.createElement('option');
      optionEl.value = option;
      datalist.appendChild(optionEl);
    });
  }
  
  console.log('🔄 Relationship options updated. Has household head:', hasHouseholdHead);
}


// ===================================
// Open Mobile Population
// ===================================
function openMobilePopulation() {
  console.log('>>> Opening mobile population page...');
  
  document.getElementById('menu').style.display = 'none';
  document.getElementById('dataContainer').classList.remove('active');
  document.getElementById('mobileContainer').classList.add('active');
  
  // Load mobile data
  showLoading();
  
  if (mobilesData.length === 0) {
    console.log('>>> Fetching mobile data...');
    
    google.script.run
      .withSuccessHandler(function(data) {
        hideLoading();
        mobilesData = data || [];
        
        // Save to IndexedDB
        mobilesData.forEach(m => saveToIndexedDB('mobiles', m));
        
        loadMobileData();
        showToast(`ໂຫລດຂໍ້ມູນສຳເລັດ: ${mobilesData.length} ລາຍການ`, 'success');
      })
      .withFailureHandler(function(error) {
        hideLoading();
        console.error('Error loading mobile data:', error);
        showToast('ເກີດຂໍ້ຜິດພາດ: ' + error.message, 'error');
        
        // Try load from IndexedDB
        loadFromIndexedDB('mobiles', null).then(data => {
          mobilesData = data || [];
          loadMobileData();
        });
      })
      .getMobileData(villageSheetId);
  } else {
    hideLoading();
    loadMobileData();
  }
}

// ===================================
// Load Mobile Data to Table
// ===================================
function loadMobileData() {
  console.log('>>> Loading mobile data to table...');
  console.log('>>> mobilesData length:', mobilesData.length);
  
  const tbody = document.getElementById('mobileTableBody');
  tbody.innerHTML = '';
  
  if (mobilesData.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="7" style="text-align: center; padding: 40px;">
          <div style="font-size: 48px; margin-bottom: 10px;">📋</div>
          <div style="margin-bottom: 15px;">ຍັງບໍ່ມີຂໍ້ມູນປະຊາກອນເຄື່ອນທີ່</div>
          <button onclick="openMobileTypeModal()" class="btn btn-primary">➕ ເພີ່ມຂໍ້ມູນ</button>
        </td>
      </tr>
    `;
    document.getElementById('mobilePagination').style.display = 'none';
    return;
  }
  
  // Create rows
  const allRows = [];
  
  mobilesData.forEach((mobile, index) => {
    const row = createMobileTableRow(mobile);
    allRows.push(row);
  });
  
  totalMobileRows = allRows.length;
  const totalPages = Math.ceil(totalMobileRows / mobileRowsPerPage);
  
  // Display rows for current page
  const startIndex = (currentMobilePage - 1) * mobileRowsPerPage;
  const endIndex = Math.min(startIndex + mobileRowsPerPage, totalMobileRows);
  
  for (let i = startIndex; i < endIndex; i++) {
    tbody.appendChild(allRows[i]);
  }
  
  // Update pagination
  updateMobilePaginationUI(totalPages);
  
  console.log('>>> Displayed mobile rows ' + (startIndex + 1) + '-' + endIndex + ' of ' + totalMobileRows);
}

// ===================================
// Create Mobile Table Row
// ===================================
function createMobileTableRow(mobile) {
  const tr = document.createElement('tr');
  
  const photoUrl = mobile.photo || '';
  const photoHTML = photoUrl ? 
    `<img src="${photoUrl}" class="profile-img" alt="Photo" onclick="showImagePreview('${photoUrl}')" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
     <div class="profile-img" style="font-size: 24px; display: none;">❓</div>` : 
    '<div class="profile-img" style="font-size: 24px; display: flex; align-items: center; justify-content: center;">❓</div>';
  
  // WhatsApp button
  const whatsappBtn = mobile.phone ? 
    `<a href="https://wa.me/${mobile.phone.replace(/\D/g, '')}" target="_blank" class="btn-whatsapp" title="${mobile.phone}">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"/>
      </svg>
    </a>` : 
    '<span style="color: #999;">-</span>';
  
  // Type badge
  const typeColor = mobile.rentalType === 'ພັກເຊົາຄົງທີ່' ? '#2196F3' : '#FF9800';
  const typeBadge = `<span style="background: ${typeColor}; color: white; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: 600;">${mobile.rentalType || '-'}</span>`;
  
  tr.innerHTML = `
    <td>${photoHTML}</td>
    <td><strong>${mobile.name || '-'}</strong></td>
    <td>${mobile.gender || '-'}</td>
    <td>${mobile.roomNumber || '-'}</td>
    <td>${typeBadge}</td>
    <td style="text-align: center;">${whatsappBtn}</td>
    <td>
      <div class="action-buttons">
        <button class="btn-edit" onclick="editMobile('${mobile.mobileCode}')" title="ແກ້ໄຂ">
          ✏️ ແກ້ໄຂ
        </button>
        <button class="btn-delete" onclick="showDeleteModal('mobile', '${mobile.mobileCode}')" title="ລົບ">
          🗑️ ລົບ
        </button>
      </div>
    </td>
  `;
  
  return tr;
}

// ===================================
// Mobile Pagination
// ===================================
function updateMobilePaginationUI(totalPages) {
  document.getElementById('currentMobilePage').textContent = currentMobilePage;
  document.getElementById('totalMobilePages').textContent = totalPages;
  
  document.getElementById('btnMobileFirst').disabled = currentMobilePage === 1;
  document.getElementById('btnMobilePrev').disabled = currentMobilePage === 1;
  document.getElementById('btnMobileNext').disabled = currentMobilePage === totalPages;
  document.getElementById('btnMobileLast').disabled = currentMobilePage === totalPages;
  
  document.getElementById('mobilePagination').style.display = totalPages > 1 ? 'flex' : 'none';
}

function changeMobilePage(direction) {
  const totalPages = Math.ceil(totalMobileRows / mobileRowsPerPage);
  
  switch(direction) {
    case 'first':
      currentMobilePage = 1;
      break;
    case 'prev':
      if (currentMobilePage > 1) currentMobilePage--;
      break;
    case 'next':
      if (currentMobilePage < totalPages) currentMobilePage++;
      break;
    case 'last':
      currentMobilePage = totalPages;
      break;
  }
  
  loadMobileData();
  document.getElementById('mobileTable').scrollIntoView({ behavior: 'smooth', block: 'start' });
}

// ===================================
// Search Mobile Data
// ===================================
function searchMobileData() {
  const searchTerm = document.getElementById('searchMobileInput').value.trim();
  
  if (!searchTerm) {
    loadMobileData();
    return;
  }
  
  if (searchTerm.length < 2) {
    showToast('ກະລຸນາພິມຢ່າງໜ້ອຍ 2 ຕົວອັກສອນ', 'error');
    return;
  }
  
  showLoading();
  
  google.script.run
    .withSuccessHandler(function(results) {
      hideLoading();
      
      if (!results || results.length === 0) {
        const tbody = document.getElementById('mobileTableBody');
        tbody.innerHTML = `
          <tr>
            <td colspan="7" style="text-align: center; padding: 40px;">
              <div style="font-size: 48px; margin-bottom: 10px;">🔍</div>
              <div>ບໍ່ພົບຂໍ້ມູນທີ່ຄົ້ນຫາ: "${searchTerm}"</div>
              <button onclick="clearMobileSearch()" class="btn btn-primary" style="margin-top: 15px;">
                ❌ ລ້າງການຄົ້ນຫາ
              </button>
            </td>
          </tr>
        `;
        document.getElementById('mobilePagination').style.display = 'none';
        showToast('ບໍ່ພົບຜົນການຄົ້ນຫາ', 'error');
        return;
      }
      
      displayMobileSearchResults(results, searchTerm);
      showToast(`ພົບ ${results.length} ລາຍການ`, 'success');
    })
    .withFailureHandler(function(error) {
      hideLoading();
      showToast('ເກີດຂໍ້ຜິດພາດໃນການຄົ້ນຫາ: ' + error.message, 'error');
    })
    .searchMobile(searchTerm, villageSheetId);
}

function displayMobileSearchResults(results, searchTerm) {
  const tbody = document.getElementById('mobileTableBody');
  tbody.innerHTML = '';
  
  // Header row
  const headerRow = document.createElement('tr');
  headerRow.innerHTML = `
    <td colspan="7" style="background: #fff3cd; padding: 15px; border-left: 5px solid #ffc107;">
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
          <strong>🔍 ຜົນການຄົ້ນຫາ: "${searchTerm}"</strong> - 
          ພົບ <strong style="color: #667eea;">${results.length}</strong> ລາຍການ
        </div>
        <button onclick="clearMobileSearch()" class="btn btn-secondary" style="padding: 5px 15px;">
          ❌ ລ້າງການຄົ້ນຫາ
        </button>
      </div>
    </td>
  `;
  tbody.appendChild(headerRow);
  
  // Result rows
  results.forEach(mobile => {
    tbody.appendChild(createMobileTableRow(mobile));
  });
  
  document.getElementById('mobilePagination').style.display = 'none';
}

function clearMobileSearch() {
  document.getElementById('searchMobileInput').value = '';
  currentMobilePage = 1;
  loadMobileData();
  showToast('ລ້າງການຄົ້ນຫາສຳເລັດ', 'success');
}

// ===================================
// Open Mobile Type Modal
// ===================================
function openMobileTypeModal() {
  currentMobileType = null;
  selectedHouseholdForMobile = null;
  
  // Reset selections
  document.querySelectorAll('.mobile-type-option').forEach(el => {
    el.classList.remove('selected');
  });
  
  document.getElementById('mobileTypeModal').classList.add('active');
}

function closeMobileTypeModal() {
  document.getElementById('mobileTypeModal').classList.remove('active');
}

function selectMobileType(type) {
  currentMobileType = type;
  
  console.log('>>> Selected mobile type:', type);
  
  // Update UI
  document.querySelectorAll('.mobile-type-option').forEach(el => {
    el.classList.remove('selected');
    if (el.getAttribute('data-type') === type) {
      el.classList.add('selected');
    }
  });
  
  // Close modal and proceed
  setTimeout(() => {
    closeMobileTypeModal();
    
    if (type === 'ພັກເຊົາຄົງທີ່') {
      openHouseholdSelectorModal();
    } else {
      openMobileFormDirect();
    }
  }, 300);
}

// ===================================
// Household Selector Modal
// ===================================
function openHouseholdSelectorModal() {
  console.log('>>> Opening household selector...');
  
  // Populate household list
  const container = document.getElementById('householdListContainer');
  container.innerHTML = '';
  
  if (householdsData.length === 0) {
    container.innerHTML = `
      <div style="text-align: center; padding: 40px; color: #999;">
        <div style="font-size: 48px; margin-bottom: 10px;">📋</div>
        <div>ບໍ່ມີຂໍ້ມູນຫົວໜ້າຄອບຄົວ</div>
      </div>
    `;
  } else {
    householdsData.forEach(household => {
      const card = createHouseholdCard(household);
      container.appendChild(card);
    });
  }
  
  // Populate datalist
  const datalist = document.getElementById('householdNameList');
  datalist.innerHTML = '';
  householdsData.forEach(h => {
    const option = document.createElement('option');
    option.value = h.name;
    datalist.appendChild(option);
  });
  
  document.getElementById('householdSelectorModal').classList.add('active');
}

function closeHouseholdSelectorModal() {
  document.getElementById('householdSelectorModal').classList.remove('active');
}

function createHouseholdCard(household) {
  const card = document.createElement('div');
  card.className = 'household-card';
  card.setAttribute('data-code', household.householdCode);
  
  const photoHTML = household.photo ? 
    `<img src="${household.photo}" class="household-card-photo">` : 
    '<div class="household-card-photo placeholder">❓</div>';
  
  card.innerHTML = `
    <div class="household-card-header">
      ${photoHTML}
      <div class="household-card-info">
        <h4>${household.name}</h4>
        <p>📞 ${household.phone || '-'} | 🏠 ${household.houseNumber || '-'}</p>
      </div>
    </div>
    <div class="household-card-details">
      <span>📍 ${household.unit || '-'}</span>
      <span>👥 ${household.familyMemberCount || 0} ຄົນ</span>
    </div>
  `;
  
  card.onclick = function() {
    selectHouseholdForMobile(household);
  };
  
  return card;
}

function selectHouseholdForMobile(household) {
  selectedHouseholdForMobile = household;
  
  console.log('>>> Selected household:', household);
  
  // Update UI
  document.querySelectorAll('.household-card').forEach(el => {
    el.classList.remove('selected');
  });
  
  const card = document.querySelector(`.household-card[data-code="${household.householdCode}"]`);
  if (card) {
    card.classList.add('selected');
  }
  
  // Close modal and open form
  setTimeout(() => {
    closeHouseholdSelectorModal();
    openMobileFormWithHousehold(household);
  }, 300);
}

function filterHouseholdList() {
  const searchValue = document.getElementById('householdSearchInput').value.toLowerCase();
  const cards = document.querySelectorAll('.household-card');
  
  cards.forEach(card => {
    const name = card.querySelector('h4').textContent.toLowerCase();
    const phone = card.querySelector('p').textContent.toLowerCase();
    
    if (name.includes(searchValue) || phone.includes(searchValue)) {
      card.style.display = 'block';
    } else {
      card.style.display = 'none';
    }
  });
}

// ===================================
// Open Mobile Form
// ===================================
function openMobileFormWithHousehold(household) {
  console.log('>>> Opening mobile form with household data');
  
  document.getElementById('mobileFormTitle').textContent = '➕ ເພີ່ມປະຊາກອນເຄື່ອນທີ່ (ພັກເຊົາຄົງທີ່)';
  document.getElementById('mobileForm').reset();
  document.getElementById('mobileCode').value = '';
  document.getElementById('mobileType').value = 'ພັກເຊົາຄົງທີ່';
  document.getElementById('mobileMembersContainer').innerHTML = '';
  mobileMemberCounter = 0;
  
  // Fill household data
  document.getElementById('mobileOwnerName').value = household.name;
  document.getElementById('mobileOwnerName').readOnly = true;
  document.getElementById('mobileHouseholdCode').value = household.householdCode;
  document.getElementById('mobileProvince').value = household.province || currentUser.province;
  document.getElementById('mobileDistrict').value = household.district || currentUser.district;
  document.getElementById('mobileVillage').value = household.village || currentUser.village;
  document.getElementById('mobileUnit').value = household.unit || '';
  document.getElementById('mobilePosition').value = household.housePosition || '';
  
  populateMobileDataLists();
  document.getElementById('mobileFormModal').classList.add('active');
}

function openMobileFormDirect() {
  console.log('>>> Opening mobile form (direct entry)');
  
  document.getElementById('mobileFormTitle').textContent = '➕ ເພີ່ມປະຊາກອນເຄື່ອນທີ່ (ພັກເຊົາເຄື່ອນທີ່)';
  document.getElementById('mobileForm').reset();
  document.getElementById('mobileCode').value = '';
  document.getElementById('mobileType').value = 'ພັກເຊົາເຄື່ອນທີ່';
  document.getElementById('mobileMembersContainer').innerHTML = '';
  mobileMemberCounter = 0;
  
  // Auto-fill from login
  document.getElementById('mobileOwnerName').value = '';
  document.getElementById('mobileOwnerName').readOnly = false;
  document.getElementById('mobileHouseholdCode').value = 'Mobile-' + generateRandomCode(13);
  document.getElementById('mobileProvince').value = currentUser ? currentUser.province : '';
  document.getElementById('mobileDistrict').value = currentUser ? currentUser.district : '';
  document.getElementById('mobileVillage').value = currentUser ? currentUser.village : '';
  document.getElementById('mobileUnit').value = '';
  document.getElementById('mobilePosition').value = '';
  
  populateMobileDataLists();
  document.getElementById('mobileFormModal').classList.add('active');
}

function closeMobileForm() {
  document.getElementById('mobileFormModal').classList.remove('active');
}

// ===================================
// Populate Mobile DataLists
// ===================================
function populateMobileDataLists() {
  if (!optionsData) return;
  
  // Owner name list (from households + existing mobiles)
  const ownerNameList = document.getElementById('ownerNameList');
  ownerNameList.innerHTML = '';
  
  const ownerNames = new Set();
  householdsData.forEach(h => ownerNames.add(h.name));
  mobilesData.forEach(m => {
    if (m.ownerName) ownerNames.add(m.ownerName);
  });
  
  Array.from(ownerNames).sort().forEach(name => {
    const option = document.createElement('option');
    option.value = name;
    ownerNameList.appendChild(option);
  });
}

// ===================================
// Add Mobile Member Form
// ===================================
function addMobileMemberForm() {
  mobileMemberCounter++;
  const container = document.getElementById('mobileMembersContainer');
  
  const memberDiv = document.createElement('div');
  memberDiv.className = 'mobile-member-section';
  memberDiv.id = `mobile-member-${mobileMemberCounter}`;
  memberDiv.innerHTML = getMobileMemberFormHTML(mobileMemberCounter, null);
  
  container.appendChild(memberDiv);
  updateMobileRoomCount();
  
  memberDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
}

function getMobileMemberFormHTML(counter, member) {
  const birthParts = member && member.birthDate ? member.birthDate.split('/') : ['', '', ''];
  
  return `
    <h3 data-member-number="${counter}">
      <span style="margin-left: 35px;">👤 ສະມາຊິກຄົນທີ່ ${counter}</span>
      <button type="button" class="btn-delete-member" onclick="removeMobileMemberForm(${counter})">🗑️ ລົບ</button>
    </h3>
    
    <!-- Photo Upload -->
    <div class="form-group">
      <div class="photo-upload" onclick="document.getElementById('mobileMemberPhoto${counter}').click()">
        <div class="photo-preview" id="mobileMemberPhotoPreview${counter}">
          ${member && member.photo ? `<img src="${member.photo}" alt="Photo">` : '<div class="placeholder">❓</div>'}
        </div>
        <p>📷 ອັບໂຫລດ/ຖ່າຍຮູບ</p>
        <input type="file" id="mobileMemberPhoto${counter}" accept="image/*" style="display: none" onchange="previewPhoto(this, 'mobileMemberPhotoPreview${counter}')">
      </div>
    </div>
    
    <!-- Row 1: Name, Birth Date, Gender -->
    <div class="form-row">
      <div class="form-group">
        <label>ຊື່ ແລະ ນາມສະກຸນ *</label>
        <input type="text" class="mobileMemberName required-field" value="${member ? member.name || '' : ''}" required data-field-name="ຊື່">
      </div>
      <div class="form-group">
        <label>ວັນເດືອນປີເກີດ *</label>
        <div class="date-inputs">
          <input type="number" class="mobileBirthDay required-field" value="${birthParts[0]}" placeholder="ວັນ" min="1" max="31" data-field-name="ວັນເກີດ">
          <span>/</span>
          <input type="number" class="mobileBirthMonth required-field" value="${birthParts[1]}" placeholder="ເດືອນ" min="1" max="12" data-field-name="ເດືອນເກີດ">
          <span>/</span>
          <input type="number" class="mobileBirthYear required-field" value="${birthParts[2]}" placeholder="ປີ" min="1900" max="2100" data-field-name="ປີເກີດ">
        </div>
      </div>
      <div class="form-group">
        <label>ເພດ *</label>
        <input type="text" class="mobileMemberGender required-field" value="${member ? member.gender || '' : ''}" list="genderList" required data-field-name="ເພດ">
      </div>
    </div>
    
    <!-- Row 2: Nationality, Ethnicity, Religion -->
    <div class="form-row">
      <div class="form-group">
        <label>ສັນຊາດ *</label>
        <input type="text" class="mobileMemberNationality required-field" value="${member ? member.nationality || '' : ''}" list="ethnicityList" required data-field-name="ສັນຊາດ">
      </div>
      <div class="form-group">
        <label>ຊົນເຜົ່າ *</label>
        <input type="text" class="mobileMemberEthnicity required-field" value="${member ? member.ethnicity || '' : ''}" list="ethnicityList" required data-field-name="ຊົນເຜົ່າ">
      </div>
      <div class="form-group">
        <label>ສາສະໜາ *</label>
        <input type="text" class="mobileMemberReligion required-field" value="${member ? member.religion || '' : ''}" list="religionList" required data-field-name="ສາສະໜາ">
      </div>
    </div>
    
    <!-- Row 3: Education, Relationship, Marital Status -->
    <div class="form-row">
      <div class="form-group">
        <label>ລະດັບການສຶກສາ *</label>
        <input type="text" class="mobileMemberEducation required-field" value="${member ? member.education || '' : ''}" list="educationList" required data-field-name="ລະດັບການສຶກສາ">
      </div>
      <div class="form-group">
        <label>ສາຍພົວພັນຄອບຄົວ *</label>
        <input type="text" class="mobileMemberRelationship required-field" value="${member ? member.relationship || '' : ''}" list="relationshipList" required data-field-name="ສາຍພົວພັນ">
      </div>
      <div class="form-group">
        <label>ສະຖານະພາບຄອບຄົວ *</label>
        <input type="text" class="mobileMemberMaritalStatus required-field" value="${member ? member.maritalStatus || '' : ''}" list="maritalStatusList" required data-field-name="ສະຖານະພາບ">
      </div>
    </div>
    
    <!-- Row 4: Phone, Occupation, Workplace -->
    <div class="form-row">
      <div class="form-group">
        <label>ເບີໂທຜູ້ກ່ຽວ</label>
        <input type="tel" class="mobileMemberPhone" value="${member ? member.phone || '' : ''}" placeholder="20XXXXXXXX">
      </div>
      <div class="form-group">
        <label>ອາຊີບ *</label>
        <input type="text" class="mobileMemberOccupation required-field" value="${member ? member.occupation || '' : ''}" list="occupationList" required data-field-name="ອາຊີບ">
      </div>
      <div class="form-group">
        <label>ລະບຸບ່ອນເຮັດວຽກ</label>
        <textarea class="mobileMemberWorkplace" rows="2" style="width: 100%; padding: 10px; border: 2px solid #e0e0e0; border-radius: 8px;">${member ? member.workplace || '' : ''}</textarea>
      </div>
    </div>
    
    <!-- Row 5: Purpose (Multi-Select Tags) -->
    <div class="form-row">
      <div class="form-group" style="grid-column: 1 / -1;">
        <label>ຈຸດປະສົງໃນການພັກເຊົ່າ *</label>
        <div class="disease-tags-container" id="purposeTagsContainer${counter}" style="display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 10px; min-height: 40px; padding: 10px; background: #f8f9fa; border: 2px dashed #dee2e6; border-radius: 8px;">
          <div style="width: 100%; text-align: center; color: #999; font-size: 13px;" class="empty-placeholder">
            ຍັງບໍ່ເລືອກຈຸດປະສົງ
          </div>
        </div>
        <div style="position: relative;">
          <input type="text" 
                 class="mobilePurposeInput" 
                 id="purposeInput${counter}"
                 list="purposeList" 
                 placeholder="🔍 ເລືອກຫຼືພິມເອງ..."
                 style="width: 100%; padding: 12px 40px 12px 12px; border: 2px solid #e0e0e0; border-radius: 8px;"
                 onkeydown="handlePurposeInput(event, ${counter})">
          <button type="button" 
                  onclick="manualAddPurpose(${counter})"
                  style="position: absolute; right: 5px; top: 50%; transform: translateY(-50%); padding: 8px 15px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 5px; cursor: pointer;">
            ➕ ເພີ່ມ
          </button>
        </div>
        <textarea class="mobileMemberPurpose required-field" 
                  id="purposeHidden${counter}"
                  rows="1" 
                  style="display: none;"
                  data-field-name="ຈຸດປະສົງ">${member ? member.purpose || '' : ''}</textarea>
      </div>
    </div>
    
    <!-- Row 6: Permit -->
    <div class="form-row">
      <div class="form-group">
        <label>ປື້ມອະນຸຍາດພັກເຊົ່າຊົ່ວຄາວ *</label>
        <div style="display: flex; gap: 10px;">
          <label style="display: flex; align-items: center; gap: 5px; cursor: pointer;">
            <input type="radio" name="mobilePermit${counter}" value="ມີ" onchange="togglePermitNumber(${counter}, true)" ${member && member.hasPermit === 'ມີ' ? 'checked' : ''}>
            <span>ມີ</span>
          </label>
          <label style="display: flex; align-items: center; gap: 5px; cursor: pointer;">
            <input type="radio" name="mobilePermit${counter}" value="ບໍ່ມີ" onchange="togglePermitNumber(${counter}, false)" ${!member || member.hasPermit !== 'ມີ' ? 'checked' : ''}>
            <span>ບໍ່ມີ</span>
          </label>
        </div>
      </div>
      <div class="form-group" id="permitNumberGroup${counter}" style="display: ${member && member.hasPermit === 'ມີ' ? 'block' : 'none'};">
        <label>ເລກທີປື້ມ</label>
        <input type="text" class="mobilePermitNumber" id="permitNumber${counter}" value="${member ? member.permitNumber || '' : ''}">
      </div>
      <div class="form-group">
        <label>ວັນທີມາພັກເຊົ່າຄັ້ງທໍາອິດ</label>
        <input type="date" class="mobileFirstArrival" value="${member ? member.firstArrival || '' : ''}">
      </div>
    </div>
    
    <!-- Row 7: Rental Periods (Dynamic) -->
    <div class="form-row">
      <div class="form-group" style="grid-column: 1 / -1;">
        <label>ວັນທີອອກການພັກເຊົ່າ & ວັນທີສິ້ນສຸດ</label>
        <div class="rental-periods-container" id="rentalPeriodsContainer${counter}">
          <div id="rentalPeriodsList${counter}">
            <!-- Rental periods will be added here -->
          </div>
          <button type="button" class="btn-add-period" onclick="addRentalPeriod(${counter})">
            ➕ ເພີ່ມການຕໍ່ອາຍຸ
          </button>
        </div>
      </div>
    </div>
  `;
}
// ===================================
// MOBILE POPULATION - REMAINING FUNCTIONS
// ===================================

// ===================================
// Remove Mobile Member Form
// ===================================
function removeMobileMemberForm(id) {
  const memberDiv = document.getElementById(`mobile-member-${id}`);
  if (memberDiv && confirm('ທ່ານຕ້ອງການລົບສະມາຊິກຄົນນີ້ບໍ່?')) {
    memberDiv.remove();
    
    // Reorder members
    reorderMobileMembers();
    
    // Update room count
    updateMobileRoomCount();
  }
}

// ===================================
// Reorder Mobile Members
// ===================================
function reorderMobileMembers() {
  const container = document.getElementById('mobileMembersContainer');
  const memberDivs = container.querySelectorAll('.mobile-member-section');
  
  memberDivs.forEach((div, index) => {
    const newNumber = index + 1;
    
    // Update heading
    const heading = div.querySelector('h3');
    if (heading) {
      heading.setAttribute('data-member-number', newNumber);
      const span = heading.querySelector('span');
      if (span) {
        span.textContent = `👤 ສະມາຊິກຄົນທີ່ ${newNumber}`;
      }
    }
    
    // Update ID
    div.id = `mobile-member-${newNumber}`;
    
    // Update all IDs inside
    updateMobileElementIds(div, newNumber);
  });
  
  // Update counter
  mobileMemberCounter = memberDivs.length;
}

// ===================================
// Update Mobile Element IDs
// ===================================
function updateMobileElementIds(container, newId) {
  // Photo
  const photoInput = container.querySelector('[id^="mobileMemberPhoto"]');
  if (photoInput) photoInput.id = `mobileMemberPhoto${newId}`;
  
  const photoPreview = container.querySelector('[id^="mobileMemberPhotoPreview"]');
  if (photoPreview) photoPreview.id = `mobileMemberPhotoPreview${newId}`;
  
  // Purpose tags
  const purposeTags = container.querySelector('[id^="purposeTagsContainer"]');
  if (purposeTags) purposeTags.id = `purposeTagsContainer${newId}`;
  
  const purposeInput = container.querySelector('[id^="purposeInput"]');
  if (purposeInput) {
    purposeInput.id = `purposeInput${newId}`;
    purposeInput.setAttribute('onkeydown', `handlePurposeInput(event, ${newId})`);
  }
  
  const purposeHidden = container.querySelector('[id^="purposeHidden"]');
  if (purposeHidden) purposeHidden.id = `purposeHidden${newId}`;
  
  // Permit
  const permitRadios = container.querySelectorAll('[name^="mobilePermit"]');
  permitRadios.forEach(radio => {
    radio.name = `mobilePermit${newId}`;
   // Permit
var permitRadios = container.querySelectorAll('[name^="mobilePermit"]');
permitRadios.forEach(function(radio) {
  radio.name = 'mobilePermit' + newId;
  var onchangeAttr = '';
  if (radio.value === 'ມີ') {
    onchangeAttr = 'togglePermitNumber(' + newId + ', true)';
  } else {
    onchangeAttr = 'togglePermitNumber(' + newId + ', false)';
  }
  radio.setAttribute('onchange', onchangeAttr);
});
  
  
  const permitGroup = container.querySelector('[id^="permitNumberGroup"]');
  if (permitGroup) permitGroup.id = `permitNumberGroup${newId}`;
  
  const permitNumber = container.querySelector('[id^="permitNumber"]');
  if (permitNumber) permitNumber.id = `permitNumber${newId}`;
  
  // Rental periods
  const rentalContainer = container.querySelector('[id^="rentalPeriodsContainer"]');
  if (rentalContainer) rentalContainer.id = `rentalPeriodsContainer${newId}`;
  
  const rentalList = container.querySelector('[id^="rentalPeriodsList"]');
  if (rentalList) rentalList.id = `rentalPeriodsList${newId}`;
  
  // Delete button
  const deleteBtn = container.querySelector('.btn-delete-member');
  if (deleteBtn) {
    deleteBtn.setAttribute('onclick', `removeMobileMemberForm(${newId})`);
  }
}

// ===================================
// Update Mobile Room Count (Auto)
// ===================================
function updateMobileRoomCount() {
  const memberForms = document.querySelectorAll('#mobileMembersContainer .mobile-member-section');
  const totalMembers = memberForms.length;
  
  const roomCountField = document.getElementById('mobileRoomCount');
  if (roomCountField) {
    roomCountField.value = totalMembers;
  }
  
  console.log('✅ Mobile room count updated:', totalMembers);
}

// ===================================
// Toggle Permit Number Field
// ===================================
function togglePermitNumber(memberId, show) {
  const permitGroup = document.getElementById(`permitNumberGroup${memberId}`);
  if (permitGroup) {
    permitGroup.style.display = show ? 'block' : 'none';
    
    const permitInput = document.getElementById(`permitNumber${memberId}`);
    if (permitInput && !show) {
      permitInput.value = '';
    }
  }
}

// ===================================
// Handle Purpose Input (Multi-Select)
// ===================================
function handlePurposeInput(event, memberId) {
  const input = document.getElementById(`purposeInput${memberId}`);
  const value = input.value.trim();
  
  // Enter to add
  if (event.key === 'Enter') {
    event.preventDefault();
    
    if (value) {
      addPurposeTag(value, memberId);
      input.value = '';
    }
  }
  
  // Tab to add
  if (event.key === 'Tab' && value) {
    event.preventDefault();
    addPurposeTag(value, memberId);
    input.value = '';
  }
}

// ===================================
// Manual Add Purpose
// ===================================
function manualAddPurpose(memberId) {
  const input = document.getElementById(`purposeInput${memberId}`);
  const value = input.value.trim();
  
  if (value) {
    addPurposeTag(value, memberId);
    input.value = '';
    input.focus();
  } else {
    showToast('ກະລຸນາພິມຈຸດປະສົງກ່ອນ', 'error');
    input.focus();
  }
}

// ===================================
// Add Purpose Tag
// ===================================
function addPurposeTag(purpose, memberId) {
  const container = document.getElementById(`purposeTagsContainer${memberId}`);
  const hiddenTextarea = document.getElementById(`purposeHidden${memberId}`);
  
  if (!container || !hiddenTextarea) return;
  
  // Remove placeholder
  const placeholder = container.querySelector('.empty-placeholder');
  if (placeholder) {
    placeholder.remove();
  }
  
  // Check duplicate
  const existingTags = container.querySelectorAll('.disease-tag');
  for (let tag of existingTags) {
    if (tag.getAttribute('data-purpose') === purpose) {
      showToast('⚠️ ມີຈຸດປະສົງນີ້ແລ້ວ', 'error');
      return;
    }
  }
  
  // Create tag
  const tag = document.createElement('span');
  tag.className = 'disease-tag';
  tag.setAttribute('data-purpose', purpose);
  tag.style.cssText = 'background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%); color: #f57c00; padding: 8px 12px; border-radius: 20px; display: inline-flex; align-items: center; gap: 8px; font-size: 0.9rem; box-shadow: 0 2px 5px rgba(0,0,0,0.1); transition: all 0.3s; animation: slideIn 0.3s ease;';
  tag.innerHTML = `
    <span style="font-weight: 500;">🎯 ${purpose}</span>
    <span onclick="removePurposeTag(this, ${memberId})" 
          style="cursor: pointer; font-weight: bold; font-size: 1.2rem; color: #f44336; transition: transform 0.2s; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; border-radius: 50%; background: rgba(244,67,54,0.1);"
          onmouseover="this.style.transform='scale(1.3)'; this.style.background='rgba(244,67,54,0.2)'"
          onmouseout="this.style.transform='scale(1)'; this.style.background='rgba(244,67,54,0.1)'">×</span>
  `;
  
  container.appendChild(tag);
  
  // Update hidden textarea
  updatePurposeTextarea(memberId);
  
  showToast('✅ ເພີ່ມຈຸດປະສົງສຳເລັດ', 'success');
}

// ===================================
// Remove Purpose Tag
// ===================================
function removePurposeTag(element, memberId) {
  const tag = element.parentElement;
  tag.style.transform = 'scale(0)';
  
  setTimeout(() => {
    tag.remove();
    updatePurposeTextarea(memberId);
    showToast('ລົບຈຸດປະສົງສຳເລັດ', 'success');
  }, 200);
}

// ===================================
// Update Purpose Textarea
// ===================================
function updatePurposeTextarea(memberId) {
  const container = document.getElementById(`purposeTagsContainer${memberId}`);
  const hiddenTextarea = document.getElementById(`purposeHidden${memberId}`);
  
  if (!container || !hiddenTextarea) return;
  
  const tags = container.querySelectorAll('.disease-tag');
  const purposes = Array.from(tags).map(tag => tag.getAttribute('data-purpose'));
  
  hiddenTextarea.value = purposes.join(', ');
}

// ===================================
// Add Rental Period
// ===================================
function addRentalPeriod(memberId) {
  const list = document.getElementById(`rentalPeriodsList${memberId}`);
  if (!list) return;
  
  const periodCount = list.querySelectorAll('.rental-period-item').length + 1;
  
  const periodDiv = document.createElement('div');
  periodDiv.className = 'rental-period-item';
  periodDiv.setAttribute('data-period', periodCount);
  periodDiv.innerHTML = `
    <label>ຄັ້ງທີ່ ${periodCount}:</label>
    <input type="text" class="date-input rentalDate" placeholder="dd/mm/yyyy" oninput="calculateRentalEndDate(${memberId}, ${periodCount})">
    <input type="number" class="days-input rentalDays" placeholder="ຈຳນວນວັນ" min="1" oninput="calculateRentalEndDate(${memberId}, ${periodCount})">
    <div class="end-date-display rentalEndDate">-</div>
    <button type="button" class="btn-remove-period" onclick="removeRentalPeriod(${memberId}, ${periodCount})">🗑️</button>
  `;
  
  list.appendChild(periodDiv);
  
  showToast('✅ ເພີ່ມການຕໍ່ອາຍຸສຳເລັດ', 'success');
}

// ===================================
// Remove Rental Period
// ===================================
function removeRentalPeriod(memberId, periodNumber) {
  const list = document.getElementById(`rentalPeriodsList${memberId}`);
  if (!list) return;
  
  const items = list.querySelectorAll('.rental-period-item');
  items.forEach(item => {
    if (parseInt(item.getAttribute('data-period')) === periodNumber) {
      item.remove();
    }
  });
  
  // Reorder periods
  const remainingItems = list.querySelectorAll('.rental-period-item');
  remainingItems.forEach((item, index) => {
    const newNumber = index + 1;
    item.setAttribute('data-period', newNumber);
    
    const label = item.querySelector('label');
    if (label) {
      label.textContent = `ຄັ້ງທີ່ ${newNumber}:`;
    }
    
    const removeBtn = item.querySelector('.btn-remove-period');
    if (removeBtn) {
      removeBtn.setAttribute('onclick', `removeRentalPeriod(${memberId}, ${newNumber})`);
    }
    
    const dateInput = item.querySelector('.rentalDate');
    const daysInput = item.querySelector('.rentalDays');
    if (dateInput && daysInput) {
      dateInput.setAttribute('oninput', `calculateRentalEndDate(${memberId}, ${newNumber})`);
      daysInput.setAttribute('oninput', `calculateRentalEndDate(${memberId}, ${newNumber})`);
    }
  });
  
  showToast('ລົບການຕໍ່ອາຍຸສຳເລັດ', 'success');
}

// ===================================
// Calculate Rental End Date
// ===================================
function calculateRentalEndDate(memberId, periodNumber) {
  const list = document.getElementById(`rentalPeriodsList${memberId}`);
  if (!list) return;
  
  const items = list.querySelectorAll('.rental-period-item');
  items.forEach(item => {
    if (parseInt(item.getAttribute('data-period')) === periodNumber) {
      const dateInput = item.querySelector('.rentalDate');
      const daysInput = item.querySelector('.rentalDays');
      const endDateDisplay = item.querySelector('.rentalEndDate');
      
      if (dateInput && daysInput && endDateDisplay) {
        const startDate = dateInput.value.trim();
        const days = parseInt(daysInput.value) || 0;
        
        if (startDate && days > 0) {
          // Parse dd/mm/yyyy
          const parts = startDate.split('/');
          if (parts.length === 3) {
            const day = parseInt(parts[0]);
            const month = parseInt(parts[1]) - 1; // JS months are 0-based
            const year = parseInt(parts[2]);
            
            const date = new Date(year, month, day);
            date.setDate(date.getDate() + days);
            
            const endDay = String(date.getDate()).padStart(2, '0');
            const endMonth = String(date.getMonth() + 1).padStart(2, '0');
            const endYear = date.getFullYear();
            
            endDateDisplay.textContent = `${endDay}/${endMonth}/${endYear}`;
          }
        } else {
          endDateDisplay.textContent = '-';
        }
      }
    }
  });
}

// ===================================
// Save Mobile Form
// ===================================
document.getElementById('mobileForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  console.log('=== Mobile Form Submit Started ===');
  
  // Collect main data
  const mobileData = {
    mobileCode: document.getElementById('mobileCode').value,
    householdCode: document.getElementById('mobileHouseholdCode').value,
    province: document.getElementById('mobileProvince').value,
    district: document.getElementById('mobileDistrict').value,
    village: document.getElementById('mobileVillage').value,
    unit: document.getElementById('mobileUnit').value,
    position: document.getElementById('mobilePosition').value,
    roomNumber: document.getElementById('mobileRoomNumber').value,
    roomCount: document.getElementById('mobileRoomCount').value,
    ownerName: document.getElementById('mobileOwnerName').value,
    rentalType: document.getElementById('mobileType').value,
    members: []
  };
  
  console.log('Mobile data collected:', mobileData);
  
  // Collect members
  const memberForms = document.querySelectorAll('#mobileMembersContainer .mobile-member-section');
  console.log('Found member forms:', memberForms.length);
  
  memberForms.forEach((form, index) => {
    const memberId = index + 1;
    console.log('Processing mobile member:', memberId);
    
    // Get permit data
    const permitRadios = form.querySelectorAll(`[name="mobilePermit${memberId}"]`);
    let hasPermit = 'ບໍ່ມີ';
    permitRadios.forEach(radio => {
      if (radio.checked) {
        hasPermit = radio.value;
      }
    });
    
    const permitNumber = hasPermit === 'ມີ' ? 
      (document.getElementById(`permitNumber${memberId}`) ? document.getElementById(`permitNumber${memberId}`).value : '') : '';
    
    // Get rental periods
    const rentalPeriods = [];
    const periodsList = document.getElementById(`rentalPeriodsList${memberId}`);
    if (periodsList) {
      const periodItems = periodsList.querySelectorAll('.rental-period-item');
      periodItems.forEach(item => {
        const dateInput = item.querySelector('.rentalDate');
        const daysInput = item.querySelector('.rentalDays');
        const endDateDisplay = item.querySelector('.rentalEndDate');
        
        if (dateInput && daysInput && endDateDisplay) {
          rentalPeriods.push({
            periodNumber: parseInt(item.getAttribute('data-period')),
            renewalDate: dateInput.value,
            days: parseInt(daysInput.value) || 0,
            endDate: endDateDisplay.textContent !== '-' ? endDateDisplay.textContent : ''
          });
        }
      });
    }
    
    const member = {
      name: form.querySelector('.mobileMemberName') ? form.querySelector('.mobileMemberName').value : '',
      photo: getPhotoData(`mobileMemberPhotoPreview${memberId}`),
      gender: form.querySelector('.mobileMemberGender') ? form.querySelector('.mobileMemberGender').value : '',
      birthDate: `${form.querySelector('.mobileBirthDay') ? form.querySelector('.mobileBirthDay').value : ''}/${form.querySelector('.mobileBirthMonth') ? form.querySelector('.mobileBirthMonth').value : ''}/${form.querySelector('.mobileBirthYear') ? form.querySelector('.mobileBirthYear').value : ''}`,
      nationality: form.querySelector('.mobileMemberNationality') ? form.querySelector('.mobileMemberNationality').value : '',
      ethnicity: form.querySelector('.mobileMemberEthnicity') ? form.querySelector('.mobileMemberEthnicity').value : '',
      religion: form.querySelector('.mobileMemberReligion') ? form.querySelector('.mobileMemberReligion').value : '',
      education: form.querySelector('.mobileMemberEducation') ? form.querySelector('.mobileMemberEducation').value : '',
      relationship: form.querySelector('.mobileMemberRelationship') ? form.querySelector('.mobileMemberRelationship').value : '',
      maritalStatus: form.querySelector('.mobileMemberMaritalStatus') ? form.querySelector('.mobileMemberMaritalStatus').value : '',
      phone: form.querySelector('.mobileMemberPhone') ? form.querySelector('.mobileMemberPhone').value : '',
      occupation: form.querySelector('.mobileMemberOccupation') ? form.querySelector('.mobileMemberOccupation').value : '',
      workplace: form.querySelector('.mobileMemberWorkplace') ? form.querySelector('.mobileMemberWorkplace').value : '',
      purpose: form.querySelector('.mobileMemberPurpose') ? form.querySelector('.mobileMemberPurpose').value : '',
      hasPermit: hasPermit,
      permitNumber: permitNumber,
      firstArrival: form.querySelector('.mobileFirstArrival') ? form.querySelector('.mobileFirstArrival').value : '',
      rentalPeriods: rentalPeriods
    };
    
    console.log('Mobile member data:', member);
    mobileData.members.push(member);
  });
  
  console.log('Final mobile data:', mobileData);
  showLoading();
  
  // Save data
  if (mobileData.mobileCode) {
    console.log('Updating existing mobile...');
    google.script.run
      .withSuccessHandler(handleMobileSaveSuccess)
      .withFailureHandler(handleMobileSaveFailure)
      .updateMobile(mobileData, villageSheetId);
  } else {
    console.log('Saving new mobile...');
    google.script.run
      .withSuccessHandler(handleMobileSaveSuccess)
      .withFailureHandler(handleMobileSaveFailure)
      .saveMobile(mobileData, villageSheetId);
  }
  
  function handleMobileSaveSuccess(result) {
    console.log('Mobile save success:', result);
    
    if (result.success) {
      if (result.mobileCode) {
        mobileData.mobileCode = result.mobileCode;
      }
      
      const existingIndex = mobilesData.findIndex(m => m.mobileCode === mobileData.mobileCode);
      if (existingIndex >= 0) {
        mobilesData[existingIndex] = mobileData;
      } else {
        mobilesData.push(mobileData);
      }
      
      saveToIndexedDB('mobiles', mobileData);
      
      hideLoading();
      showToast(result.message, 'success');
      closeMobileForm();
      loadMobileData();
    } else {
      hideLoading();
      showToast(result.message, 'error');
    }
  }
  
  function handleMobileSaveFailure(error) {
    console.error('Mobile save failed:', error);
    
    saveToSyncQueue('saveMobile', mobileData);
    
    if (!mobileData.mobileCode) {
      mobileData.mobileCode = 'Mobile-' + generateRandomCode(13);
    }
    
    const existingIndex = mobilesData.findIndex(m => m.mobileCode === mobileData.mobileCode);
    if (existingIndex >= 0) {
      mobilesData[existingIndex] = mobileData;
    } else {
      mobilesData.push(mobileData);
    }
    
    saveToIndexedDB('mobiles', mobileData);
    
    hideLoading();
    showToast('ບັນທຶກແບບອອບໄລນ໌สຳเລັດ ຈະ Sync ເມື່ອມີອິນເຕີເນັດ', 'success');
    closeMobileForm();
    loadMobileData();
  }
});

// ===================================
// Edit Mobile
// ===================================
function editMobile(mobileCode) {
  const mobile = mobilesData.find(m => m.mobileCode === mobileCode);
  if (!mobile) {
    showToast('ບໍ່ພົບຂໍ້ມູນ', 'error');
    return;
  }
  
  console.log('Editing mobile:', mobile);
  
  document.getElementById('mobileFormTitle').textContent = '✏️ ແກ້ໄຂປະຊາກອນເຄື່ອນທີ່';
  document.getElementById('mobileCode').value = mobile.mobileCode;
  document.getElementById('mobileType').value = mobile.rentalType || 'ພັກເຊົາເຄື່ອນທີ່';
  document.getElementById('mobileHouseholdCode').value = mobile.householdCode || '';
  document.getElementById('mobileProvince').value = mobile.province || '';
  document.getElementById('mobileDistrict').value = mobile.district || '';
  document.getElementById('mobileVillage').value = mobile.village || '';
  document.getElementById('mobileUnit').value = mobile.unit || '';
  document.getElementById('mobilePosition').value = mobile.position || '';
  document.getElementById('mobileRoomNumber').value = mobile.roomNumber || '';
  document.getElementById('mobileRoomCount').value = mobile.roomCount || '';
  document.getElementById('mobileOwnerName').value = mobile.ownerName || '';
  
  // Clear members container
  const membersContainer = document.getElementById('mobileMembersContainer');
  membersContainer.innerHTML = '';
  mobileMemberCounter = 0;
  
  // Add members if exist
  if (mobile.members && mobile.members.length > 0) {
    mobile.members.forEach(member => {
      mobileMemberCounter++;
      const memberDiv = document.createElement('div');
      memberDiv.className = 'mobile-member-section';
      memberDiv.id = `mobile-member-${mobileMemberCounter}`;
      memberDiv.innerHTML = getMobileMemberFormHTML(mobileMemberCounter, member);
      membersContainer.appendChild(memberDiv);
      
      // Initialize purpose tags
      setTimeout(() => {
        if (member.purpose) {
          initializeExistingPurposes(mobileMemberCounter, member.purpose);
        }
      }, 100);
      
      // Initialize rental periods
      setTimeout(() => {
        if (member.rentalPeriods && member.rentalPeriods.length > 0) {
          member.rentalPeriods.forEach(period => {
            addRentalPeriod(mobileMemberCounter);
            
            // Fill data
            const list = document.getElementById(`rentalPeriodsList${mobileMemberCounter}`);
            if (list) {
              const items = list.querySelectorAll('.rental-period-item');
              const lastItem = items[items.length - 1];
              
              if (lastItem) {
                const dateInput = lastItem.querySelector('.rentalDate');
                const daysInput = lastItem.querySelector('.rentalDays');
                const endDateDisplay = lastItem.querySelector('.rentalEndDate');
                
                if (dateInput) dateInput.value = period.renewalDate || '';
                if (daysInput) daysInput.value = period.days || '';
                if (endDateDisplay) endDateDisplay.textContent = period.endDate || '-';
              }
            }
          });
        }
      }, 200);
    });
  }
  
  populateMobileDataLists();
  document.getElementById('mobileFormModal').classList.add('active');
}

// ===================================
// Initialize Existing Purposes
// ===================================
function initializeExistingPurposes(memberId, purposesString) {
  if (!purposesString) return;
  
  const purposes = purposesString.split(',').map(p => p.trim()).filter(p => p);
  purposes.forEach(purpose => {
    addPurposeTag(purpose, memberId);
  });
}

// ===================================
// Delete Mobile (already handled in showDeleteModal)
// ===================================
// No additional code needed - deletion is handled by:
// showDeleteModal('mobile', mobileCode) -> confirmDelete() -> deleteMobile() in GAS

// ===================================
// Open Mobile Location Picker
// ===================================
function openMobileLocationPicker() {
  // Reuse the same location picker modal
  document.getElementById('locationModal').classList.add('active');
  
  // Destroy old map if exists
  if (map) {
    map.remove();
    map = null;
  }
  
  // Wait for modal to be visible
  setTimeout(() => {
    initializeMobileMap();
  }, 300);
}

// ===================================
// Initialize Mobile Map
// ===================================
function initializeMobileMap() {
  // Default to Vientiane, Laos
  const defaultLat = 17.9757;
  const defaultLng = 102.6331;
  
  // Get current value if exists
  const currentValue = document.getElementById('mobilePosition').value;
  let initialLat = defaultLat;
  let initialLng = defaultLng;
  
  if (currentValue && currentValue.includes(',')) {
    const parts = currentValue.split(',');
    initialLat = parseFloat(parts[0].trim()) || defaultLat;
    initialLng = parseFloat(parts[1].trim()) || defaultLng;
  }
  
  // Create map
  map = L.map('map', {
    center: [initialLat, initialLng],
    zoom: 15,
    preferCanvas: true
  });
  
  // Create Street Map Layer
  streetLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '© OpenStreetMap',
    maxZoom: 19
  });
  
  // Create Satellite Layer
  satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
    attribution: '© Esri',
    maxZoom: 19
  });
  
  // Add satellite layer as default
  satelliteLayer.addTo(map);
  
  // Create custom marker
  const beautifulIcon = createCustomMarkerIcon();
  
  // Add marker
  marker = L.marker([initialLat, initialLng], { 
    draggable: true,
    icon: beautifulIcon
  }).addTo(map);
  
  selectedLatLng = { lat: initialLat, lng: initialLng };
  updateLocationDisplay();
  
  // Update location when marker is dragged
  marker.on('dragend', function(e) {
    const pos = marker.getLatLng();
    selectedLatLng = { lat: pos.lat, lng: pos.lng };
    updateLocationDisplay();
  });
  
  // Update location when map is clicked
  map.on('click', function(e) {
    marker.setLatLng(e.latlng);
    selectedLatLng = { lat: e.latlng.lat, lng: e.latlng.lng };
    updateLocationDisplay();
  });
  
  // Force tiles to load
  map.invalidateSize();
  
  // Try to get user location
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      function(position) {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        map.setView([lat, lng], 17);
        marker.setLatLng([lat, lng]);
        selectedLatLng = { lat: lat, lng: lng };
        updateLocationDisplay();
        showToast('📍 ພົບຕຳແໜ່ງປັດຈຸບັນຂອງທ່ານ', 'success');
      },
      function(error) {
        console.log('Geolocation error:', error);
      }
    );
  }
  
  // Override confirmLocation to save to mobile position field
  window.confirmMobileLocation = function() {
    if (selectedLatLng) {
      const lat = selectedLatLng.lat.toFixed(6);
      const lng = selectedLatLng.lng.toFixed(6);
      document.getElementById('mobilePosition').value = `${lat}, ${lng}`;
      showToast('ບັນທຶກຕໍາແໜ່ງສຳເລັດ ✅', 'success');
    }
    closeLocationPicker();
  };
}

// ===================================
// Purpose List DataList
// ===================================
function createPurposeDataList() {
  // Check if datalist exists
  let datalist = document.getElementById('purposeList');
  if (!datalist) {
    datalist = document.createElement('datalist');
    datalist.id = 'purposeList';
    document.body.appendChild(datalist);
  }
  
  // Common purposes
  const purposes = [
    'ເຮັດວຽກ',
    'ຮຽນຫນັງສື',
    'ປິ່ນປົວພະຍາດ',
    'ທ່ອງທ່ຽວ',
    'ທຸລະກິດ',
    'ຢ້າຍບ່ອນຢູ່',
    'ພັກເຊົາຊົ່ວຄາວ',
    'ເຂົ້າຮ່ວມໂຄງການ',
    'ອື່ນໆ'
  ];
  
  datalist.innerHTML = '';
  purposes.forEach(purpose => {
    const option = document.createElement('option');
    option.value = purpose;
    datalist.appendChild(option);
  });
}

// Create purpose datalist on page load
createPurposeDataList();

// ===================================
// Console Helper - Debug Mobile Data
// ===================================
function debugMobileData() {
  console.clear();
  console.log('='.repeat(50));
  console.log('DEBUG MOBILE DATA');
  console.log('='.repeat(50));
  
  console.log('1. mobilesData exists?', mobilesData !== null && mobilesData !== undefined);
  console.log('2. mobilesData type:', typeof mobilesData);
  console.log('3. mobilesData is Array?', Array.isArray(mobilesData));
  console.log('4. mobilesData length:', mobilesData.length);
  
  if (mobilesData.length > 0) {
    console.log('5. First mobile:');
    console.log(mobilesData[0]);
    
    if (mobilesData[0].members) {
      console.log('6. First mobile members count:', mobilesData[0].members.length);
    }
  } else {
    console.log('ERROR: No mobiles in mobilesData array');
  }
  
  console.log('='.repeat(50));
  
  alert('ກວດສອບ Console (F12) ເພື່ອເບິ່ງຜົນລັບ');
}

console.log('✅ All mobile population functions loaded successfully!');

  </script>
</body>
</html>